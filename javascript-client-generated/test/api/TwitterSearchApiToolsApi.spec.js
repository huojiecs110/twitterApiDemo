/*
 * Utools_twitter_tools_api
 * X (Twitter) API for search, Tweets, users, followers, images, media and more. Supports some v1.1 and v2 API endpoints, with more to come in the future!
 *
 * OpenAPI spec version: 1.1
 * Contact: huojiecs@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.37
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.UtoolsTwitterToolsApi);
  }
}(this, function(expect, UtoolsTwitterToolsApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new UtoolsTwitterToolsApi.TwitterSearchApiToolsApi();
  });

  describe('(package)', function() {
    describe('TwitterSearchApiToolsApi', function() {
      describe('searchUsingGET', function() {
        it('should call searchUsingGET successfully', function(done) {
          // TODO: uncomment, update parameter values for searchUsingGET call and complete the assertions
          /*
          var apiKey = "your own apikey";
          var words = "words_example";
          var opts = {};
          opts.any = "any_example";
          opts.cursor = "cursor_example";
          opts.from = "from_example";
          opts.likes = "likes_example";
          opts.mentioning = "mentioning_example";
          opts.none = "none_example";
          opts.phrase = "phrase_example";
          opts.replies = "replies_example";
          opts.retweets = "retweets_example";
          opts.since = "since_example";
          opts.tag = "tag_example";
          opts.to = "to_example";
          opts.until = "until_example";

          instance.searchUsingGET(apiKey, words, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(UtoolsTwitterToolsApi.ResultT);
            expect(data.code).to.be.a('number');
            expect(data.code).to.be(0);
            expect(data.data).to.be.a(Object);
            expect(data.data).to.be();
            expect(data.msg).to.be.a('string');
            expect(data.msg).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('searchUsingPOST', function() {
        it('should call searchUsingPOST successfully', function(done) {
          // TODO: uncomment, update parameter values for searchUsingPOST call and complete the assertions
          /*
          var apiKey = "your own apikey";
          var words = "words_example";
          var opts = {};
          opts.any = "any_example";
          opts.cursor = "cursor_example";
          opts.from = "from_example";
          opts.likes = "likes_example";
          opts.mentioning = "mentioning_example";
          opts.none = "none_example";
          opts.phrase = "phrase_example";
          opts.replies = "replies_example";
          opts.retweets = "retweets_example";
          opts.since = "since_example";
          opts.tag = "tag_example";
          opts.to = "to_example";
          opts.until = "until_example";

          instance.searchUsingPOST(apiKey, words, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(UtoolsTwitterToolsApi.ResultT);
            expect(data.code).to.be.a('number');
            expect(data.code).to.be(0);
            expect(data.data).to.be.a(Object);
            expect(data.data).to.be();
            expect(data.msg).to.be.a('string');
            expect(data.msg).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('trendsUsingGET', function() {
        it('should call trendsUsingGET successfully', function(done) {
          // TODO: uncomment, update parameter values for trendsUsingGET call and complete the assertions
          /*
          var apiKey = "your own apikey";
          var id = "1";

          instance.trendsUsingGET(apiKey, id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(UtoolsTwitterToolsApi.ResultT);
            expect(data.code).to.be.a('number');
            expect(data.code).to.be(0);
            expect(data.data).to.be.a(Object);
            expect(data.data).to.be();
            expect(data.msg).to.be.a('string');
            expect(data.msg).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('trendsUsingPOST', function() {
        it('should call trendsUsingPOST successfully', function(done) {
          // TODO: uncomment, update parameter values for trendsUsingPOST call and complete the assertions
          /*
          var apiKey = "your own apikey";
          var id = "1";

          instance.trendsUsingPOST(apiKey, id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(UtoolsTwitterToolsApi.ResultT);
            expect(data.code).to.be.a('number');
            expect(data.code).to.be(0);
            expect(data.data).to.be.a(Object);
            expect(data.data).to.be();
            expect(data.msg).to.be.a('string');
            expect(data.msg).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
