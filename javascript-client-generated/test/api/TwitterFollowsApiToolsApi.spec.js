/*
 * Utools_twitter_tools_api
 * X (Twitter) API for search, Tweets, users, followers, images, media and more. Supports some v1.1 and v2 API endpoints, with more to come in the future!
 *
 * OpenAPI spec version: 1.1
 * Contact: huojiecs@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.37
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.UtoolsTwitterToolsApi);
  }
}(this, function(expect, UtoolsTwitterToolsApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new UtoolsTwitterToolsApi.TwitterFollowsApiToolsApi();
  });

  describe('(package)', function() {
    describe('TwitterFollowsApiToolsApi', function() {
      describe('blueVerifiedFollowersV2UsingGET', function() {
        it('should call blueVerifiedFollowersV2UsingGET successfully', function(done) {
          // TODO: uncomment, update parameter values for blueVerifiedFollowersV2UsingGET call and complete the assertions
          /*
          var apiKey = "your own apikey";
          var userId = "1574242047661207552";
          var opts = {};
          opts.cursor = "-1";

          instance.blueVerifiedFollowersV2UsingGET(apiKey, userId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(UtoolsTwitterToolsApi.ResultT);
            expect(data.code).to.be.a('number');
            expect(data.code).to.be(0);
            expect(data.data).to.be.a(Object);
            expect(data.data).to.be();
            expect(data.msg).to.be.a('string');
            expect(data.msg).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('blueVerifiedFollowersV2UsingPOST', function() {
        it('should call blueVerifiedFollowersV2UsingPOST successfully', function(done) {
          // TODO: uncomment, update parameter values for blueVerifiedFollowersV2UsingPOST call and complete the assertions
          /*
          var apiKey = "your own apikey";
          var userId = "1574242047661207552";
          var opts = {};
          opts.cursor = "-1";

          instance.blueVerifiedFollowersV2UsingPOST(apiKey, userId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(UtoolsTwitterToolsApi.ResultT);
            expect(data.code).to.be.a('number');
            expect(data.code).to.be(0);
            expect(data.data).to.be.a(Object);
            expect(data.data).to.be();
            expect(data.msg).to.be.a('string');
            expect(data.msg).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('followUsingGET', function() {
        it('should call followUsingGET successfully', function(done) {
          // TODO: uncomment, update parameter values for followUsingGET call and complete the assertions
          /*
          var apiKey = "your own apikey";
          var authToken = "get it 1:from login API, 2:https://twitter.com/chen22218/status/1722138510680043555";
          var ct0 = "get it 1:from login API, 2:https://twitter.com/chen22218/status/1722138510680043555";
          var opts = {};
          opts.screenName = "screenName_example";
          opts.userId = "1574242047661207552";

          instance.followUsingGET(apiKey, authToken, ct0, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(UtoolsTwitterToolsApi.ResultT);
            expect(data.code).to.be.a('number');
            expect(data.code).to.be(0);
            expect(data.data).to.be.a(Object);
            expect(data.data).to.be();
            expect(data.msg).to.be.a('string');
            expect(data.msg).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('followUsingPOST', function() {
        it('should call followUsingPOST successfully', function(done) {
          // TODO: uncomment, update parameter values for followUsingPOST call and complete the assertions
          /*
          var apiKey = "your own apikey";
          var authToken = "get it 1:from login API, 2:https://twitter.com/chen22218/status/1722138510680043555";
          var ct0 = "get it 1:from login API, 2:https://twitter.com/chen22218/status/1722138510680043555";
          var opts = {};
          opts.screenName = "screenName_example";
          opts.userId = "1574242047661207552";

          instance.followUsingPOST(apiKey, authToken, ct0, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(UtoolsTwitterToolsApi.ResultT);
            expect(data.code).to.be.a('number');
            expect(data.code).to.be(0);
            expect(data.data).to.be.a(Object);
            expect(data.data).to.be();
            expect(data.msg).to.be.a('string');
            expect(data.msg).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('followersIdsUsingGET', function() {
        it('should call followersIdsUsingGET successfully', function(done) {
          // TODO: uncomment, update parameter values for followersIdsUsingGET call and complete the assertions
          /*
          var apiKey = "your own apikey";
          var opts = {};
          opts.cursor = "-1";
          opts.screenName = "elonmusk";
          opts.userId = "1574242047661207552";

          instance.followersIdsUsingGET(apiKey, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(UtoolsTwitterToolsApi.ResultT);
            expect(data.code).to.be.a('number');
            expect(data.code).to.be(0);
            expect(data.data).to.be.a(Object);
            expect(data.data).to.be();
            expect(data.msg).to.be.a('string');
            expect(data.msg).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('followersIdsUsingPOST', function() {
        it('should call followersIdsUsingPOST successfully', function(done) {
          // TODO: uncomment, update parameter values for followersIdsUsingPOST call and complete the assertions
          /*
          var apiKey = "your own apikey";
          var opts = {};
          opts.cursor = "-1";
          opts.screenName = "elonmusk";
          opts.userId = "1574242047661207552";

          instance.followersIdsUsingPOST(apiKey, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(UtoolsTwitterToolsApi.ResultT);
            expect(data.code).to.be.a('number');
            expect(data.code).to.be(0);
            expect(data.data).to.be.a(Object);
            expect(data.data).to.be();
            expect(data.msg).to.be.a('string');
            expect(data.msg).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('followersListUsingGET', function() {
        it('should call followersListUsingGET successfully', function(done) {
          // TODO: uncomment, update parameter values for followersListUsingGET call and complete the assertions
          /*
          var apiKey = "your own apikey";
          var opts = {};
          opts.cursor = "-1";
          opts.screenName = "elonmusk";
          opts.userId = "1574242047661207552";

          instance.followersListUsingGET(apiKey, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(UtoolsTwitterToolsApi.ResultT);
            expect(data.code).to.be.a('number');
            expect(data.code).to.be(0);
            expect(data.data).to.be.a(Object);
            expect(data.data).to.be();
            expect(data.msg).to.be.a('string');
            expect(data.msg).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('followersListUsingPOST', function() {
        it('should call followersListUsingPOST successfully', function(done) {
          // TODO: uncomment, update parameter values for followersListUsingPOST call and complete the assertions
          /*
          var apiKey = "your own apikey";
          var opts = {};
          opts.cursor = "-1";
          opts.screenName = "elonmusk";
          opts.userId = "1574242047661207552";

          instance.followersListUsingPOST(apiKey, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(UtoolsTwitterToolsApi.ResultT);
            expect(data.code).to.be.a('number');
            expect(data.code).to.be(0);
            expect(data.data).to.be.a(Object);
            expect(data.data).to.be();
            expect(data.msg).to.be.a('string');
            expect(data.msg).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('followersListV2UsingGET', function() {
        it('should call followersListV2UsingGET successfully', function(done) {
          // TODO: uncomment, update parameter values for followersListV2UsingGET call and complete the assertions
          /*
          var apiKey = "your own apikey";
          var userId = "1574242047661207552";
          var opts = {};
          opts.cursor = "-1";

          instance.followersListV2UsingGET(apiKey, userId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(UtoolsTwitterToolsApi.ResultT);
            expect(data.code).to.be.a('number');
            expect(data.code).to.be(0);
            expect(data.data).to.be.a(Object);
            expect(data.data).to.be();
            expect(data.msg).to.be.a('string');
            expect(data.msg).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('followersListV2UsingPOST', function() {
        it('should call followersListV2UsingPOST successfully', function(done) {
          // TODO: uncomment, update parameter values for followersListV2UsingPOST call and complete the assertions
          /*
          var apiKey = "your own apikey";
          var userId = "1574242047661207552";
          var opts = {};
          opts.cursor = "-1";

          instance.followersListV2UsingPOST(apiKey, userId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(UtoolsTwitterToolsApi.ResultT);
            expect(data.code).to.be.a('number');
            expect(data.code).to.be(0);
            expect(data.data).to.be.a(Object);
            expect(data.data).to.be();
            expect(data.msg).to.be.a('string');
            expect(data.msg).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('followingsIdsUsingGET', function() {
        it('should call followingsIdsUsingGET successfully', function(done) {
          // TODO: uncomment, update parameter values for followingsIdsUsingGET call and complete the assertions
          /*
          var apiKey = "your own apikey";
          var opts = {};
          opts.cursor = "-1";
          opts.screenName = "elonmusk";
          opts.userId = "1574242047661207552";

          instance.followingsIdsUsingGET(apiKey, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(UtoolsTwitterToolsApi.ResultT);
            expect(data.code).to.be.a('number');
            expect(data.code).to.be(0);
            expect(data.data).to.be.a(Object);
            expect(data.data).to.be();
            expect(data.msg).to.be.a('string');
            expect(data.msg).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('followingsIdsUsingPOST', function() {
        it('should call followingsIdsUsingPOST successfully', function(done) {
          // TODO: uncomment, update parameter values for followingsIdsUsingPOST call and complete the assertions
          /*
          var apiKey = "your own apikey";
          var opts = {};
          opts.cursor = "-1";
          opts.screenName = "elonmusk";
          opts.userId = "1574242047661207552";

          instance.followingsIdsUsingPOST(apiKey, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(UtoolsTwitterToolsApi.ResultT);
            expect(data.code).to.be.a('number');
            expect(data.code).to.be(0);
            expect(data.data).to.be.a(Object);
            expect(data.data).to.be();
            expect(data.msg).to.be.a('string');
            expect(data.msg).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('followingsListUsingGET', function() {
        it('should call followingsListUsingGET successfully', function(done) {
          // TODO: uncomment, update parameter values for followingsListUsingGET call and complete the assertions
          /*
          var apiKey = "your own apikey";
          var opts = {};
          opts.cursor = "-1";
          opts.screenName = "elonmusk";
          opts.userId = "1574242047661207552";

          instance.followingsListUsingGET(apiKey, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(UtoolsTwitterToolsApi.ResultT);
            expect(data.code).to.be.a('number');
            expect(data.code).to.be(0);
            expect(data.data).to.be.a(Object);
            expect(data.data).to.be();
            expect(data.msg).to.be.a('string');
            expect(data.msg).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('followingsListUsingPOST', function() {
        it('should call followingsListUsingPOST successfully', function(done) {
          // TODO: uncomment, update parameter values for followingsListUsingPOST call and complete the assertions
          /*
          var apiKey = "your own apikey";
          var opts = {};
          opts.cursor = "-1";
          opts.screenName = "elonmusk";
          opts.userId = "1574242047661207552";

          instance.followingsListUsingPOST(apiKey, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(UtoolsTwitterToolsApi.ResultT);
            expect(data.code).to.be.a('number');
            expect(data.code).to.be(0);
            expect(data.data).to.be.a(Object);
            expect(data.data).to.be();
            expect(data.msg).to.be.a('string');
            expect(data.msg).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('followingsListV2UsingGET', function() {
        it('should call followingsListV2UsingGET successfully', function(done) {
          // TODO: uncomment, update parameter values for followingsListV2UsingGET call and complete the assertions
          /*
          var apiKey = "your own apikey";
          var userId = "1574242047661207552";
          var opts = {};
          opts.cursor = "-1";

          instance.followingsListV2UsingGET(apiKey, userId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(UtoolsTwitterToolsApi.ResultT);
            expect(data.code).to.be.a('number');
            expect(data.code).to.be(0);
            expect(data.data).to.be.a(Object);
            expect(data.data).to.be();
            expect(data.msg).to.be.a('string');
            expect(data.msg).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('followingsListV2UsingPOST', function() {
        it('should call followingsListV2UsingPOST successfully', function(done) {
          // TODO: uncomment, update parameter values for followingsListV2UsingPOST call and complete the assertions
          /*
          var apiKey = "your own apikey";
          var userId = "1574242047661207552";
          var opts = {};
          opts.cursor = "-1";

          instance.followingsListV2UsingPOST(apiKey, userId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(UtoolsTwitterToolsApi.ResultT);
            expect(data.code).to.be.a('number');
            expect(data.code).to.be(0);
            expect(data.data).to.be.a(Object);
            expect(data.data).to.be();
            expect(data.msg).to.be.a('string');
            expect(data.msg).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getFriendshipsShowUsingGET', function() {
        it('should call getFriendshipsShowUsingGET successfully', function(done) {
          // TODO: uncomment, update parameter values for getFriendshipsShowUsingGET call and complete the assertions
          /*
          var apiKey = "your own apikey";
          var opts = {};
          opts.sourceId = "1574242047661207552";
          opts.sourceScreenName = "sourceScreenName_example";
          opts.targetId = "1620357967962058752";
          opts.targetScreenName = "targetScreenName_example";

          instance.getFriendshipsShowUsingGET(apiKey, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(UtoolsTwitterToolsApi.ResultT);
            expect(data.code).to.be.a('number');
            expect(data.code).to.be(0);
            expect(data.data).to.be.a(Object);
            expect(data.data).to.be();
            expect(data.msg).to.be.a('string');
            expect(data.msg).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getFriendshipsShowUsingPOST', function() {
        it('should call getFriendshipsShowUsingPOST successfully', function(done) {
          // TODO: uncomment, update parameter values for getFriendshipsShowUsingPOST call and complete the assertions
          /*
          var apiKey = "your own apikey";
          var opts = {};
          opts.sourceId = "1574242047661207552";
          opts.sourceScreenName = "sourceScreenName_example";
          opts.targetId = "1620357967962058752";
          opts.targetScreenName = "targetScreenName_example";

          instance.getFriendshipsShowUsingPOST(apiKey, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(UtoolsTwitterToolsApi.ResultT);
            expect(data.code).to.be.a('number');
            expect(data.code).to.be(0);
            expect(data.data).to.be.a(Object);
            expect(data.data).to.be();
            expect(data.msg).to.be.a('string');
            expect(data.msg).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('unfollowUsingGET', function() {
        it('should call unfollowUsingGET successfully', function(done) {
          // TODO: uncomment, update parameter values for unfollowUsingGET call and complete the assertions
          /*
          var apiKey = "your own apikey";
          var authToken = "get it 1:from login API, 2:https://twitter.com/chen22218/status/1722138510680043555";
          var ct0 = "get it 1:from login API, 2:https://twitter.com/chen22218/status/1722138510680043555";
          var opts = {};
          opts.screenName = "screenName_example";
          opts.userId = "44196397";

          instance.unfollowUsingGET(apiKey, authToken, ct0, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(UtoolsTwitterToolsApi.ResultT);
            expect(data.code).to.be.a('number');
            expect(data.code).to.be(0);
            expect(data.data).to.be.a(Object);
            expect(data.data).to.be();
            expect(data.msg).to.be.a('string');
            expect(data.msg).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('unfollowUsingPOST', function() {
        it('should call unfollowUsingPOST successfully', function(done) {
          // TODO: uncomment, update parameter values for unfollowUsingPOST call and complete the assertions
          /*
          var apiKey = "your own apikey";
          var authToken = "get it 1:from login API, 2:https://twitter.com/chen22218/status/1722138510680043555";
          var ct0 = "get it 1:from login API, 2:https://twitter.com/chen22218/status/1722138510680043555";
          var opts = {};
          opts.screenName = "screenName_example";
          opts.userId = "44196397";

          instance.unfollowUsingPOST(apiKey, authToken, ct0, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(UtoolsTwitterToolsApi.ResultT);
            expect(data.code).to.be.a('number');
            expect(data.code).to.be(0);
            expect(data.data).to.be.a(Object);
            expect(data.data).to.be();
            expect(data.msg).to.be.a('string');
            expect(data.msg).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
