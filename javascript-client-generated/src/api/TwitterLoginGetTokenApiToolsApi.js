/*
 * Utools_twitter_tools_api
 * X (Twitter) API for search, Tweets, users, followers, images, media and more. Supports some v1.1 and v2 API endpoints, with more to come in the future!
 *
 * OpenAPI spec version: 1.1
 * Contact: huojiecs@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.37
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ResultT'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ResultT'));
  } else {
    // Browser globals (root is window)
    if (!root.UtoolsTwitterToolsApi) {
      root.UtoolsTwitterToolsApi = {};
    }
    root.UtoolsTwitterToolsApi.TwitterLoginGetTokenApiToolsApi = factory(root.UtoolsTwitterToolsApi.ApiClient, root.UtoolsTwitterToolsApi.ResultT);
  }
}(this, function(ApiClient, ResultT) {
  'use strict';

  /**
   * TwitterLoginGetTokenApiTools service.
   * @module api/TwitterLoginGetTokenApiToolsApi
   * @version 1.1
   */

  /**
   * Constructs a new TwitterLoginGetTokenApiToolsApi. 
   * @alias module:api/TwitterLoginGetTokenApiToolsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the login2FAUsingGET operation.
     * @callback module:api/TwitterLoginGetTokenApiToolsApi~login2FAUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResultT} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * login by code
     * @param {String} apiKey 
     * @param {String} code 
     * @param {module:api/TwitterLoginGetTokenApiToolsApi~login2FAUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResultT}
     */
    this.login2FAUsingGET = function(apiKey, code, callback) {
      var postBody = null;

      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling login2FAUsingGET");
      }

      // verify the required parameter 'code' is set
      if (code === undefined || code === null) {
        throw new Error("Missing the required parameter 'code' when calling login2FAUsingGET");
      }


      var pathParams = {
      };
      var queryParams = {
        'apiKey': apiKey,
        'code': code,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = ResultT;

      return this.apiClient.callApi(
        '/base/apitools/login2FA', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the login2FAUsingPOST operation.
     * @callback module:api/TwitterLoginGetTokenApiToolsApi~login2FAUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResultT} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * login by code
     * @param {String} apiKey 
     * @param {String} code 
     * @param {module:api/TwitterLoginGetTokenApiToolsApi~login2FAUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResultT}
     */
    this.login2FAUsingPOST = function(apiKey, code, callback) {
      var postBody = null;

      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling login2FAUsingPOST");
      }

      // verify the required parameter 'code' is set
      if (code === undefined || code === null) {
        throw new Error("Missing the required parameter 'code' when calling login2FAUsingPOST");
      }


      var pathParams = {
      };
      var queryParams = {
        'apiKey': apiKey,
        'code': code,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = ResultT;

      return this.apiClient.callApi(
        '/base/apitools/login2FA', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the loginUsingGET operation.
     * @callback module:api/TwitterLoginGetTokenApiToolsApi~loginUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResultT} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * login by userName and passwrd
     * @param {String} apiKey 
     * @param {String} email 
     * @param {String} password 
     * @param {String} screenName 
     * @param {module:api/TwitterLoginGetTokenApiToolsApi~loginUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResultT}
     */
    this.loginUsingGET = function(apiKey, email, password, screenName, callback) {
      var postBody = null;

      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling loginUsingGET");
      }

      // verify the required parameter 'email' is set
      if (email === undefined || email === null) {
        throw new Error("Missing the required parameter 'email' when calling loginUsingGET");
      }

      // verify the required parameter 'password' is set
      if (password === undefined || password === null) {
        throw new Error("Missing the required parameter 'password' when calling loginUsingGET");
      }

      // verify the required parameter 'screenName' is set
      if (screenName === undefined || screenName === null) {
        throw new Error("Missing the required parameter 'screenName' when calling loginUsingGET");
      }


      var pathParams = {
      };
      var queryParams = {
        'apiKey': apiKey,
        'email': email,
        'password': password,
        'screenName': screenName,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = ResultT;

      return this.apiClient.callApi(
        '/base/apitools/login', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the loginUsingPOST operation.
     * @callback module:api/TwitterLoginGetTokenApiToolsApi~loginUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResultT} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * login by userName and passwrd
     * @param {String} apiKey 
     * @param {String} email 
     * @param {String} password 
     * @param {String} screenName 
     * @param {module:api/TwitterLoginGetTokenApiToolsApi~loginUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResultT}
     */
    this.loginUsingPOST = function(apiKey, email, password, screenName, callback) {
      var postBody = null;

      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling loginUsingPOST");
      }

      // verify the required parameter 'email' is set
      if (email === undefined || email === null) {
        throw new Error("Missing the required parameter 'email' when calling loginUsingPOST");
      }

      // verify the required parameter 'password' is set
      if (password === undefined || password === null) {
        throw new Error("Missing the required parameter 'password' when calling loginUsingPOST");
      }

      // verify the required parameter 'screenName' is set
      if (screenName === undefined || screenName === null) {
        throw new Error("Missing the required parameter 'screenName' when calling loginUsingPOST");
      }


      var pathParams = {
      };
      var queryParams = {
        'apiKey': apiKey,
        'email': email,
        'password': password,
        'screenName': screenName,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = ResultT;

      return this.apiClient.callApi(
        '/base/apitools/login', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
