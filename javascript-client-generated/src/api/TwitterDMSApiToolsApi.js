/*
 * Utools_twitter_tools_api
 * X (Twitter) API for search, Tweets, users, followers, images, media and more. Supports some v1.1 and v2 API endpoints, with more to come in the future!
 *
 * OpenAPI spec version: 1.1
 * Contact: huojiecs@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.37
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ResultT'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ResultT'));
  } else {
    // Browser globals (root is window)
    if (!root.UtoolsTwitterToolsApi) {
      root.UtoolsTwitterToolsApi = {};
    }
    root.UtoolsTwitterToolsApi.TwitterDMSApiToolsApi = factory(root.UtoolsTwitterToolsApi.ApiClient, root.UtoolsTwitterToolsApi.ResultT);
  }
}(this, function(ApiClient, ResultT) {
  'use strict';

  /**
   * TwitterDMSApiTools service.
   * @module api/TwitterDMSApiToolsApi
   * @version 1.1
   */

  /**
   * Constructs a new TwitterDMSApiToolsApi. 
   * @alias module:api/TwitterDMSApiToolsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the getDMSListV2UsingGET operation.
     * @callback module:api/TwitterDMSApiToolsApi~getDMSListV2UsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResultT} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get DMS List
     * @param {String} apiKey 
     * @param {String} authToken 
     * @param {String} ct0 
     * @param {String} cursor 
     * @param {module:api/TwitterDMSApiToolsApi~getDMSListV2UsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResultT}
     */
    this.getDMSListV2UsingGET = function(apiKey, authToken, ct0, cursor, callback) {
      var postBody = null;

      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling getDMSListV2UsingGET");
      }

      // verify the required parameter 'authToken' is set
      if (authToken === undefined || authToken === null) {
        throw new Error("Missing the required parameter 'authToken' when calling getDMSListV2UsingGET");
      }

      // verify the required parameter 'ct0' is set
      if (ct0 === undefined || ct0 === null) {
        throw new Error("Missing the required parameter 'ct0' when calling getDMSListV2UsingGET");
      }

      // verify the required parameter 'cursor' is set
      if (cursor === undefined || cursor === null) {
        throw new Error("Missing the required parameter 'cursor' when calling getDMSListV2UsingGET");
      }


      var pathParams = {
      };
      var queryParams = {
        'apiKey': apiKey,
        'auth_token': authToken,
        'ct0': ct0,
        'cursor': cursor,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = ResultT;

      return this.apiClient.callApi(
        '/base/apitools/getDMSListV2', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDMSListV2UsingPOST operation.
     * @callback module:api/TwitterDMSApiToolsApi~getDMSListV2UsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResultT} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get DMS List
     * @param {String} apiKey 
     * @param {String} authToken 
     * @param {String} ct0 
     * @param {String} cursor 
     * @param {module:api/TwitterDMSApiToolsApi~getDMSListV2UsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResultT}
     */
    this.getDMSListV2UsingPOST = function(apiKey, authToken, ct0, cursor, callback) {
      var postBody = null;

      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling getDMSListV2UsingPOST");
      }

      // verify the required parameter 'authToken' is set
      if (authToken === undefined || authToken === null) {
        throw new Error("Missing the required parameter 'authToken' when calling getDMSListV2UsingPOST");
      }

      // verify the required parameter 'ct0' is set
      if (ct0 === undefined || ct0 === null) {
        throw new Error("Missing the required parameter 'ct0' when calling getDMSListV2UsingPOST");
      }

      // verify the required parameter 'cursor' is set
      if (cursor === undefined || cursor === null) {
        throw new Error("Missing the required parameter 'cursor' when calling getDMSListV2UsingPOST");
      }


      var pathParams = {
      };
      var queryParams = {
        'apiKey': apiKey,
        'auth_token': authToken,
        'ct0': ct0,
        'cursor': cursor,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = ResultT;

      return this.apiClient.callApi(
        '/base/apitools/getDMSListV2', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDMSUsingGET operation.
     * @callback module:api/TwitterDMSApiToolsApi~getDMSUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResultT} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * receiving events
     * See details https://developer.twitter.com/en/docs/twitter-api/v1/direct-messages/sending-and-receiving/api-reference/get-event<br>  how to get <b>auth_token and ct0</b>? <br> https://twitter.com/chen22218/status/1722138510680043555 
     * @param {String} apiKey 
     * @param {String} authToken 
     * @param {String} ct0 
     * @param {String} id 
     * @param {module:api/TwitterDMSApiToolsApi~getDMSUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResultT}
     */
    this.getDMSUsingGET = function(apiKey, authToken, ct0, id, callback) {
      var postBody = null;

      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling getDMSUsingGET");
      }

      // verify the required parameter 'authToken' is set
      if (authToken === undefined || authToken === null) {
        throw new Error("Missing the required parameter 'authToken' when calling getDMSUsingGET");
      }

      // verify the required parameter 'ct0' is set
      if (ct0 === undefined || ct0 === null) {
        throw new Error("Missing the required parameter 'ct0' when calling getDMSUsingGET");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getDMSUsingGET");
      }


      var pathParams = {
      };
      var queryParams = {
        'apiKey': apiKey,
        'auth_token': authToken,
        'ct0': ct0,
        'id': id,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = ResultT;

      return this.apiClient.callApi(
        '/base/apitools/getDMS', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDMSUsingPOST operation.
     * @callback module:api/TwitterDMSApiToolsApi~getDMSUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResultT} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * receiving events
     * See details https://developer.twitter.com/en/docs/twitter-api/v1/direct-messages/sending-and-receiving/api-reference/get-event<br>  how to get <b>auth_token and ct0</b>? <br> https://twitter.com/chen22218/status/1722138510680043555 
     * @param {String} apiKey 
     * @param {String} authToken 
     * @param {String} ct0 
     * @param {String} id 
     * @param {module:api/TwitterDMSApiToolsApi~getDMSUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResultT}
     */
    this.getDMSUsingPOST = function(apiKey, authToken, ct0, id, callback) {
      var postBody = null;

      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling getDMSUsingPOST");
      }

      // verify the required parameter 'authToken' is set
      if (authToken === undefined || authToken === null) {
        throw new Error("Missing the required parameter 'authToken' when calling getDMSUsingPOST");
      }

      // verify the required parameter 'ct0' is set
      if (ct0 === undefined || ct0 === null) {
        throw new Error("Missing the required parameter 'ct0' when calling getDMSUsingPOST");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getDMSUsingPOST");
      }


      var pathParams = {
      };
      var queryParams = {
        'apiKey': apiKey,
        'auth_token': authToken,
        'ct0': ct0,
        'id': id,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = ResultT;

      return this.apiClient.callApi(
        '/base/apitools/getDMS', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the sendDMSMediaUsingGET operation.
     * @callback module:api/TwitterDMSApiToolsApi~sendDMSMediaUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResultT} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * sendDMSMedia events.
     * See details https://developer.twitter.com/en/docs/twitter-api/v1/direct-messages/sending-and-receiving/api-reference/new-event<br>  how to get <b>auth_token and ct0</b>? <br> https://twitter.com/chen22218/status/1722138510680043555 
     * @param {String} apiKey 
     * @param {String} attachmentMediaId 
     * @param {String} attachmentType 
     * @param {String} authToken 
     * @param {String} ct0 
     * @param {String} recipientId 
     * @param {String} text 
     * @param {String} type 
     * @param {Object} opts Optional parameters
     * @param {String} opts.quickReplyType Returns results with an ID less than (that is, older than) or equal to the specified ID.
     * @param {module:api/TwitterDMSApiToolsApi~sendDMSMediaUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResultT}
     */
    this.sendDMSMediaUsingGET = function(apiKey, attachmentMediaId, attachmentType, authToken, ct0, recipientId, text, type, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling sendDMSMediaUsingGET");
      }

      // verify the required parameter 'attachmentMediaId' is set
      if (attachmentMediaId === undefined || attachmentMediaId === null) {
        throw new Error("Missing the required parameter 'attachmentMediaId' when calling sendDMSMediaUsingGET");
      }

      // verify the required parameter 'attachmentType' is set
      if (attachmentType === undefined || attachmentType === null) {
        throw new Error("Missing the required parameter 'attachmentType' when calling sendDMSMediaUsingGET");
      }

      // verify the required parameter 'authToken' is set
      if (authToken === undefined || authToken === null) {
        throw new Error("Missing the required parameter 'authToken' when calling sendDMSMediaUsingGET");
      }

      // verify the required parameter 'ct0' is set
      if (ct0 === undefined || ct0 === null) {
        throw new Error("Missing the required parameter 'ct0' when calling sendDMSMediaUsingGET");
      }

      // verify the required parameter 'recipientId' is set
      if (recipientId === undefined || recipientId === null) {
        throw new Error("Missing the required parameter 'recipientId' when calling sendDMSMediaUsingGET");
      }

      // verify the required parameter 'text' is set
      if (text === undefined || text === null) {
        throw new Error("Missing the required parameter 'text' when calling sendDMSMediaUsingGET");
      }

      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling sendDMSMediaUsingGET");
      }


      var pathParams = {
      };
      var queryParams = {
        'apiKey': apiKey,
        'attachment_media_id': attachmentMediaId,
        'attachment_type': attachmentType,
        'auth_token': authToken,
        'ct0': ct0,
        'quick_reply_type': opts['quickReplyType'],
        'recipient_id': recipientId,
        'text': text,
        'type': type,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = ResultT;

      return this.apiClient.callApi(
        '/base/apitools/sendDMSMedia', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the sendDMSMediaUsingPOST operation.
     * @callback module:api/TwitterDMSApiToolsApi~sendDMSMediaUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResultT} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * sendDMSMedia events.
     * See details https://developer.twitter.com/en/docs/twitter-api/v1/direct-messages/sending-and-receiving/api-reference/new-event<br>  how to get <b>auth_token and ct0</b>? <br> https://twitter.com/chen22218/status/1722138510680043555 
     * @param {String} apiKey 
     * @param {String} attachmentMediaId 
     * @param {String} attachmentType 
     * @param {String} authToken 
     * @param {String} ct0 
     * @param {String} recipientId 
     * @param {String} text 
     * @param {String} type 
     * @param {Object} opts Optional parameters
     * @param {String} opts.quickReplyType Returns results with an ID less than (that is, older than) or equal to the specified ID.
     * @param {module:api/TwitterDMSApiToolsApi~sendDMSMediaUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResultT}
     */
    this.sendDMSMediaUsingPOST = function(apiKey, attachmentMediaId, attachmentType, authToken, ct0, recipientId, text, type, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling sendDMSMediaUsingPOST");
      }

      // verify the required parameter 'attachmentMediaId' is set
      if (attachmentMediaId === undefined || attachmentMediaId === null) {
        throw new Error("Missing the required parameter 'attachmentMediaId' when calling sendDMSMediaUsingPOST");
      }

      // verify the required parameter 'attachmentType' is set
      if (attachmentType === undefined || attachmentType === null) {
        throw new Error("Missing the required parameter 'attachmentType' when calling sendDMSMediaUsingPOST");
      }

      // verify the required parameter 'authToken' is set
      if (authToken === undefined || authToken === null) {
        throw new Error("Missing the required parameter 'authToken' when calling sendDMSMediaUsingPOST");
      }

      // verify the required parameter 'ct0' is set
      if (ct0 === undefined || ct0 === null) {
        throw new Error("Missing the required parameter 'ct0' when calling sendDMSMediaUsingPOST");
      }

      // verify the required parameter 'recipientId' is set
      if (recipientId === undefined || recipientId === null) {
        throw new Error("Missing the required parameter 'recipientId' when calling sendDMSMediaUsingPOST");
      }

      // verify the required parameter 'text' is set
      if (text === undefined || text === null) {
        throw new Error("Missing the required parameter 'text' when calling sendDMSMediaUsingPOST");
      }

      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling sendDMSMediaUsingPOST");
      }


      var pathParams = {
      };
      var queryParams = {
        'apiKey': apiKey,
        'attachment_media_id': attachmentMediaId,
        'attachment_type': attachmentType,
        'auth_token': authToken,
        'ct0': ct0,
        'quick_reply_type': opts['quickReplyType'],
        'recipient_id': recipientId,
        'text': text,
        'type': type,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = ResultT;

      return this.apiClient.callApi(
        '/base/apitools/sendDMSMedia', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the sendDMSUsingGET operation.
     * @callback module:api/TwitterDMSApiToolsApi~sendDMSUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResultT} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * sendDMS events.
     * See details https://developer.twitter.com/en/docs/twitter-api/v1/direct-messages/sending-and-receiving/api-reference/new-event<br>  how to get <b>auth_token and ct0</b>? <br> https://twitter.com/chen22218/status/1722138510680043555 
     * @param {String} apiKey 
     * @param {String} authToken 
     * @param {String} ct0 
     * @param {String} recipientId 
     * @param {String} text 
     * @param {String} type 
     * @param {module:api/TwitterDMSApiToolsApi~sendDMSUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResultT}
     */
    this.sendDMSUsingGET = function(apiKey, authToken, ct0, recipientId, text, type, callback) {
      var postBody = null;

      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling sendDMSUsingGET");
      }

      // verify the required parameter 'authToken' is set
      if (authToken === undefined || authToken === null) {
        throw new Error("Missing the required parameter 'authToken' when calling sendDMSUsingGET");
      }

      // verify the required parameter 'ct0' is set
      if (ct0 === undefined || ct0 === null) {
        throw new Error("Missing the required parameter 'ct0' when calling sendDMSUsingGET");
      }

      // verify the required parameter 'recipientId' is set
      if (recipientId === undefined || recipientId === null) {
        throw new Error("Missing the required parameter 'recipientId' when calling sendDMSUsingGET");
      }

      // verify the required parameter 'text' is set
      if (text === undefined || text === null) {
        throw new Error("Missing the required parameter 'text' when calling sendDMSUsingGET");
      }

      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling sendDMSUsingGET");
      }


      var pathParams = {
      };
      var queryParams = {
        'apiKey': apiKey,
        'auth_token': authToken,
        'ct0': ct0,
        'recipient_id': recipientId,
        'text': text,
        'type': type,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = ResultT;

      return this.apiClient.callApi(
        '/base/apitools/sendDMS', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the sendDMSUsingPOST operation.
     * @callback module:api/TwitterDMSApiToolsApi~sendDMSUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResultT} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * sendDMS events.
     * See details https://developer.twitter.com/en/docs/twitter-api/v1/direct-messages/sending-and-receiving/api-reference/new-event<br>  how to get <b>auth_token and ct0</b>? <br> https://twitter.com/chen22218/status/1722138510680043555 
     * @param {String} apiKey 
     * @param {String} authToken 
     * @param {String} ct0 
     * @param {String} recipientId 
     * @param {String} text 
     * @param {String} type 
     * @param {module:api/TwitterDMSApiToolsApi~sendDMSUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResultT}
     */
    this.sendDMSUsingPOST = function(apiKey, authToken, ct0, recipientId, text, type, callback) {
      var postBody = null;

      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling sendDMSUsingPOST");
      }

      // verify the required parameter 'authToken' is set
      if (authToken === undefined || authToken === null) {
        throw new Error("Missing the required parameter 'authToken' when calling sendDMSUsingPOST");
      }

      // verify the required parameter 'ct0' is set
      if (ct0 === undefined || ct0 === null) {
        throw new Error("Missing the required parameter 'ct0' when calling sendDMSUsingPOST");
      }

      // verify the required parameter 'recipientId' is set
      if (recipientId === undefined || recipientId === null) {
        throw new Error("Missing the required parameter 'recipientId' when calling sendDMSUsingPOST");
      }

      // verify the required parameter 'text' is set
      if (text === undefined || text === null) {
        throw new Error("Missing the required parameter 'text' when calling sendDMSUsingPOST");
      }

      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling sendDMSUsingPOST");
      }


      var pathParams = {
      };
      var queryParams = {
        'apiKey': apiKey,
        'auth_token': authToken,
        'ct0': ct0,
        'recipient_id': recipientId,
        'text': text,
        'type': type,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = ResultT;

      return this.apiClient.callApi(
        '/base/apitools/sendDMS', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the uploadMediaDMUsingGET operation.
     * @callback module:api/TwitterDMSApiToolsApi~uploadMediaDMUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResultT} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * upload media for DM 
     * @param {String} apiKey 
     * @param {String} authToken 
     * @param {String} ct0 
     * @param {File} file file
     * @param {module:api/TwitterDMSApiToolsApi~uploadMediaDMUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResultT}
     */
    this.uploadMediaDMUsingGET = function(apiKey, authToken, ct0, file, callback) {
      var postBody = null;

      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling uploadMediaDMUsingGET");
      }

      // verify the required parameter 'authToken' is set
      if (authToken === undefined || authToken === null) {
        throw new Error("Missing the required parameter 'authToken' when calling uploadMediaDMUsingGET");
      }

      // verify the required parameter 'ct0' is set
      if (ct0 === undefined || ct0 === null) {
        throw new Error("Missing the required parameter 'ct0' when calling uploadMediaDMUsingGET");
      }

      // verify the required parameter 'file' is set
      if (file === undefined || file === null) {
        throw new Error("Missing the required parameter 'file' when calling uploadMediaDMUsingGET");
      }


      var pathParams = {
      };
      var queryParams = {
        'apiKey': apiKey,
        'auth_token': authToken,
        'ct0': ct0,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'file': file
      };

      var authNames = [];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['*/*'];
      var returnType = ResultT;

      return this.apiClient.callApi(
        '/base/apitools/uploadMediaDM', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the uploadMediaDMUsingPOST operation.
     * @callback module:api/TwitterDMSApiToolsApi~uploadMediaDMUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResultT} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * upload media for DM 
     * @param {String} apiKey 
     * @param {String} authToken 
     * @param {String} ct0 
     * @param {File} file file
     * @param {module:api/TwitterDMSApiToolsApi~uploadMediaDMUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResultT}
     */
    this.uploadMediaDMUsingPOST = function(apiKey, authToken, ct0, file, callback) {
      var postBody = null;

      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling uploadMediaDMUsingPOST");
      }

      // verify the required parameter 'authToken' is set
      if (authToken === undefined || authToken === null) {
        throw new Error("Missing the required parameter 'authToken' when calling uploadMediaDMUsingPOST");
      }

      // verify the required parameter 'ct0' is set
      if (ct0 === undefined || ct0 === null) {
        throw new Error("Missing the required parameter 'ct0' when calling uploadMediaDMUsingPOST");
      }

      // verify the required parameter 'file' is set
      if (file === undefined || file === null) {
        throw new Error("Missing the required parameter 'file' when calling uploadMediaDMUsingPOST");
      }


      var pathParams = {
      };
      var queryParams = {
        'apiKey': apiKey,
        'auth_token': authToken,
        'ct0': ct0,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'file': file
      };

      var authNames = [];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['*/*'];
      var returnType = ResultT;

      return this.apiClient.callApi(
        '/base/apitools/uploadMediaDM', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
