/*
 * Utools_twitter_tools_api
 * X (Twitter) API for search, Tweets, users, followers, images, media and more. Supports some v1.1 and v2 API endpoints, with more to come in the future!
 *
 * OpenAPI spec version: 1.1
 * Contact: huojiecs@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.37
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ResultT'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ResultT'));
  } else {
    // Browser globals (root is window)
    if (!root.UtoolsTwitterToolsApi) {
      root.UtoolsTwitterToolsApi = {};
    }
    root.UtoolsTwitterToolsApi.TwitterFollowsApiToolsApi = factory(root.UtoolsTwitterToolsApi.ApiClient, root.UtoolsTwitterToolsApi.ResultT);
  }
}(this, function(ApiClient, ResultT) {
  'use strict';

  /**
   * TwitterFollowsApiTools service.
   * @module api/TwitterFollowsApiToolsApi
   * @version 1.1
   */

  /**
   * Constructs a new TwitterFollowsApiToolsApi. 
   * @alias module:api/TwitterFollowsApiToolsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the blueVerifiedFollowersV2UsingGET operation.
     * @callback module:api/TwitterFollowsApiToolsApi~blueVerifiedFollowersV2UsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResultT} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get blueVerifiedFollowers by V2 
     * @param {String} apiKey 
     * @param {String} userId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.cursor  (default to -1)
     * @param {module:api/TwitterFollowsApiToolsApi~blueVerifiedFollowersV2UsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResultT}
     */
    this.blueVerifiedFollowersV2UsingGET = function(apiKey, userId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling blueVerifiedFollowersV2UsingGET");
      }

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling blueVerifiedFollowersV2UsingGET");
      }


      var pathParams = {
      };
      var queryParams = {
        'apiKey': apiKey,
        'cursor': opts['cursor'],
        'userId': userId,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = ResultT;

      return this.apiClient.callApi(
        '/base/apitools/blueVerifiedFollowersV2', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the blueVerifiedFollowersV2UsingPOST operation.
     * @callback module:api/TwitterFollowsApiToolsApi~blueVerifiedFollowersV2UsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResultT} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get blueVerifiedFollowers by V2 
     * @param {String} apiKey 
     * @param {String} userId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.cursor  (default to -1)
     * @param {module:api/TwitterFollowsApiToolsApi~blueVerifiedFollowersV2UsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResultT}
     */
    this.blueVerifiedFollowersV2UsingPOST = function(apiKey, userId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling blueVerifiedFollowersV2UsingPOST");
      }

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling blueVerifiedFollowersV2UsingPOST");
      }


      var pathParams = {
      };
      var queryParams = {
        'apiKey': apiKey,
        'cursor': opts['cursor'],
        'userId': userId,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = ResultT;

      return this.apiClient.callApi(
        '/base/apitools/blueVerifiedFollowersV2', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the followUsingGET operation.
     * @callback module:api/TwitterFollowsApiToolsApi~followUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResultT} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * to follow 
     * See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/post-friendships-create
     * @param {String} apiKey 
     * @param {String} authToken 
     * @param {String} ct0 
     * @param {Object} opts Optional parameters
     * @param {String} opts.screenName 
     * @param {String} opts.userId  (default to 1574242047661207552)
     * @param {module:api/TwitterFollowsApiToolsApi~followUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResultT}
     */
    this.followUsingGET = function(apiKey, authToken, ct0, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling followUsingGET");
      }

      // verify the required parameter 'authToken' is set
      if (authToken === undefined || authToken === null) {
        throw new Error("Missing the required parameter 'authToken' when calling followUsingGET");
      }

      // verify the required parameter 'ct0' is set
      if (ct0 === undefined || ct0 === null) {
        throw new Error("Missing the required parameter 'ct0' when calling followUsingGET");
      }


      var pathParams = {
      };
      var queryParams = {
        'apiKey': apiKey,
        'auth_token': authToken,
        'ct0': ct0,
        'screenName': opts['screenName'],
        'userId': opts['userId'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = ResultT;

      return this.apiClient.callApi(
        '/base/apitools/follow', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the followUsingPOST operation.
     * @callback module:api/TwitterFollowsApiToolsApi~followUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResultT} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * to follow 
     * See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/post-friendships-create
     * @param {String} apiKey 
     * @param {String} authToken 
     * @param {String} ct0 
     * @param {Object} opts Optional parameters
     * @param {String} opts.screenName 
     * @param {String} opts.userId  (default to 1574242047661207552)
     * @param {module:api/TwitterFollowsApiToolsApi~followUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResultT}
     */
    this.followUsingPOST = function(apiKey, authToken, ct0, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling followUsingPOST");
      }

      // verify the required parameter 'authToken' is set
      if (authToken === undefined || authToken === null) {
        throw new Error("Missing the required parameter 'authToken' when calling followUsingPOST");
      }

      // verify the required parameter 'ct0' is set
      if (ct0 === undefined || ct0 === null) {
        throw new Error("Missing the required parameter 'ct0' when calling followUsingPOST");
      }


      var pathParams = {
      };
      var queryParams = {
        'apiKey': apiKey,
        'auth_token': authToken,
        'ct0': ct0,
        'screenName': opts['screenName'],
        'userId': opts['userId'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = ResultT;

      return this.apiClient.callApi(
        '/base/apitools/follow', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the followersIdsUsingGET operation.
     * @callback module:api/TwitterFollowsApiToolsApi~followersIdsUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResultT} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Followers Ids
     * See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-followers-ids
     * @param {String} apiKey 
     * @param {Object} opts Optional parameters
     * @param {String} opts.cursor  (default to -1)
     * @param {String} opts.screenName  (default to elonmusk)
     * @param {String} opts.userId  (default to 1574242047661207552)
     * @param {module:api/TwitterFollowsApiToolsApi~followersIdsUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResultT}
     */
    this.followersIdsUsingGET = function(apiKey, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling followersIdsUsingGET");
      }


      var pathParams = {
      };
      var queryParams = {
        'apiKey': apiKey,
        'cursor': opts['cursor'],
        'screenName': opts['screenName'],
        'userId': opts['userId'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = ResultT;

      return this.apiClient.callApi(
        '/base/apitools/followersIds', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the followersIdsUsingPOST operation.
     * @callback module:api/TwitterFollowsApiToolsApi~followersIdsUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResultT} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Followers Ids
     * See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-followers-ids
     * @param {String} apiKey 
     * @param {Object} opts Optional parameters
     * @param {String} opts.cursor  (default to -1)
     * @param {String} opts.screenName  (default to elonmusk)
     * @param {String} opts.userId  (default to 1574242047661207552)
     * @param {module:api/TwitterFollowsApiToolsApi~followersIdsUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResultT}
     */
    this.followersIdsUsingPOST = function(apiKey, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling followersIdsUsingPOST");
      }


      var pathParams = {
      };
      var queryParams = {
        'apiKey': apiKey,
        'cursor': opts['cursor'],
        'screenName': opts['screenName'],
        'userId': opts['userId'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = ResultT;

      return this.apiClient.callApi(
        '/base/apitools/followersIds', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the followersListUsingGET operation.
     * @callback module:api/TwitterFollowsApiToolsApi~followersListUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResultT} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Followers User Collection
     * See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-followers-list
     * @param {String} apiKey 
     * @param {Object} opts Optional parameters
     * @param {String} opts.cursor  (default to -1)
     * @param {String} opts.screenName  (default to elonmusk)
     * @param {String} opts.userId  (default to 1574242047661207552)
     * @param {module:api/TwitterFollowsApiToolsApi~followersListUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResultT}
     */
    this.followersListUsingGET = function(apiKey, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling followersListUsingGET");
      }


      var pathParams = {
      };
      var queryParams = {
        'apiKey': apiKey,
        'cursor': opts['cursor'],
        'screenName': opts['screenName'],
        'userId': opts['userId'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = ResultT;

      return this.apiClient.callApi(
        '/base/apitools/followersList', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the followersListUsingPOST operation.
     * @callback module:api/TwitterFollowsApiToolsApi~followersListUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResultT} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Followers User Collection
     * See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-followers-list
     * @param {String} apiKey 
     * @param {Object} opts Optional parameters
     * @param {String} opts.cursor  (default to -1)
     * @param {String} opts.screenName  (default to elonmusk)
     * @param {String} opts.userId  (default to 1574242047661207552)
     * @param {module:api/TwitterFollowsApiToolsApi~followersListUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResultT}
     */
    this.followersListUsingPOST = function(apiKey, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling followersListUsingPOST");
      }


      var pathParams = {
      };
      var queryParams = {
        'apiKey': apiKey,
        'cursor': opts['cursor'],
        'screenName': opts['screenName'],
        'userId': opts['userId'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = ResultT;

      return this.apiClient.callApi(
        '/base/apitools/followersList', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the followersListV2UsingGET operation.
     * @callback module:api/TwitterFollowsApiToolsApi~followersListV2UsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResultT} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get followersList by V2 
     * @param {String} apiKey 
     * @param {String} userId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.cursor  (default to -1)
     * @param {module:api/TwitterFollowsApiToolsApi~followersListV2UsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResultT}
     */
    this.followersListV2UsingGET = function(apiKey, userId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling followersListV2UsingGET");
      }

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling followersListV2UsingGET");
      }


      var pathParams = {
      };
      var queryParams = {
        'apiKey': apiKey,
        'cursor': opts['cursor'],
        'userId': userId,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = ResultT;

      return this.apiClient.callApi(
        '/base/apitools/followersListV2', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the followersListV2UsingPOST operation.
     * @callback module:api/TwitterFollowsApiToolsApi~followersListV2UsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResultT} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get followersList by V2 
     * @param {String} apiKey 
     * @param {String} userId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.cursor  (default to -1)
     * @param {module:api/TwitterFollowsApiToolsApi~followersListV2UsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResultT}
     */
    this.followersListV2UsingPOST = function(apiKey, userId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling followersListV2UsingPOST");
      }

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling followersListV2UsingPOST");
      }


      var pathParams = {
      };
      var queryParams = {
        'apiKey': apiKey,
        'cursor': opts['cursor'],
        'userId': userId,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = ResultT;

      return this.apiClient.callApi(
        '/base/apitools/followersListV2', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the followingsIdsUsingGET operation.
     * @callback module:api/TwitterFollowsApiToolsApi~followingsIdsUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResultT} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Followings Ids
     * See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-friends-ids
     * @param {String} apiKey 
     * @param {Object} opts Optional parameters
     * @param {String} opts.cursor  (default to -1)
     * @param {String} opts.screenName  (default to elonmusk)
     * @param {String} opts.userId  (default to 1574242047661207552)
     * @param {module:api/TwitterFollowsApiToolsApi~followingsIdsUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResultT}
     */
    this.followingsIdsUsingGET = function(apiKey, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling followingsIdsUsingGET");
      }


      var pathParams = {
      };
      var queryParams = {
        'apiKey': apiKey,
        'cursor': opts['cursor'],
        'screenName': opts['screenName'],
        'userId': opts['userId'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = ResultT;

      return this.apiClient.callApi(
        '/base/apitools/followingsIds', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the followingsIdsUsingPOST operation.
     * @callback module:api/TwitterFollowsApiToolsApi~followingsIdsUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResultT} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Followings Ids
     * See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-friends-ids
     * @param {String} apiKey 
     * @param {Object} opts Optional parameters
     * @param {String} opts.cursor  (default to -1)
     * @param {String} opts.screenName  (default to elonmusk)
     * @param {String} opts.userId  (default to 1574242047661207552)
     * @param {module:api/TwitterFollowsApiToolsApi~followingsIdsUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResultT}
     */
    this.followingsIdsUsingPOST = function(apiKey, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling followingsIdsUsingPOST");
      }


      var pathParams = {
      };
      var queryParams = {
        'apiKey': apiKey,
        'cursor': opts['cursor'],
        'screenName': opts['screenName'],
        'userId': opts['userId'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = ResultT;

      return this.apiClient.callApi(
        '/base/apitools/followingsIds', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the followingsListUsingGET operation.
     * @callback module:api/TwitterFollowsApiToolsApi~followingsListUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResultT} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Followings User Collection
     * See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-friends-list
     * @param {String} apiKey 
     * @param {Object} opts Optional parameters
     * @param {String} opts.cursor  (default to -1)
     * @param {String} opts.screenName  (default to elonmusk)
     * @param {String} opts.userId  (default to 1574242047661207552)
     * @param {module:api/TwitterFollowsApiToolsApi~followingsListUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResultT}
     */
    this.followingsListUsingGET = function(apiKey, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling followingsListUsingGET");
      }


      var pathParams = {
      };
      var queryParams = {
        'apiKey': apiKey,
        'cursor': opts['cursor'],
        'screenName': opts['screenName'],
        'userId': opts['userId'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = ResultT;

      return this.apiClient.callApi(
        '/base/apitools/followingsList', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the followingsListUsingPOST operation.
     * @callback module:api/TwitterFollowsApiToolsApi~followingsListUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResultT} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Followings User Collection
     * See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-friends-list
     * @param {String} apiKey 
     * @param {Object} opts Optional parameters
     * @param {String} opts.cursor  (default to -1)
     * @param {String} opts.screenName  (default to elonmusk)
     * @param {String} opts.userId  (default to 1574242047661207552)
     * @param {module:api/TwitterFollowsApiToolsApi~followingsListUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResultT}
     */
    this.followingsListUsingPOST = function(apiKey, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling followingsListUsingPOST");
      }


      var pathParams = {
      };
      var queryParams = {
        'apiKey': apiKey,
        'cursor': opts['cursor'],
        'screenName': opts['screenName'],
        'userId': opts['userId'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = ResultT;

      return this.apiClient.callApi(
        '/base/apitools/followingsList', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the followingsListV2UsingGET operation.
     * @callback module:api/TwitterFollowsApiToolsApi~followingsListV2UsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResultT} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get followingsList by V2 
     * @param {String} apiKey 
     * @param {String} userId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.cursor  (default to -1)
     * @param {module:api/TwitterFollowsApiToolsApi~followingsListV2UsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResultT}
     */
    this.followingsListV2UsingGET = function(apiKey, userId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling followingsListV2UsingGET");
      }

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling followingsListV2UsingGET");
      }


      var pathParams = {
      };
      var queryParams = {
        'apiKey': apiKey,
        'cursor': opts['cursor'],
        'userId': userId,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = ResultT;

      return this.apiClient.callApi(
        '/base/apitools/followingsListV2', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the followingsListV2UsingPOST operation.
     * @callback module:api/TwitterFollowsApiToolsApi~followingsListV2UsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResultT} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get followingsList by V2 
     * @param {String} apiKey 
     * @param {String} userId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.cursor  (default to -1)
     * @param {module:api/TwitterFollowsApiToolsApi~followingsListV2UsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResultT}
     */
    this.followingsListV2UsingPOST = function(apiKey, userId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling followingsListV2UsingPOST");
      }

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling followingsListV2UsingPOST");
      }


      var pathParams = {
      };
      var queryParams = {
        'apiKey': apiKey,
        'cursor': opts['cursor'],
        'userId': userId,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = ResultT;

      return this.apiClient.callApi(
        '/base/apitools/followingsListV2', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getFriendshipsShowUsingGET operation.
     * @callback module:api/TwitterFollowsApiToolsApi~getFriendshipsShowUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResultT} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get relationship information between two users
     * See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-friendships-show
     * @param {String} apiKey 
     * @param {Object} opts Optional parameters
     * @param {String} opts.sourceId  (default to 1574242047661207552)
     * @param {String} opts.sourceScreenName 
     * @param {String} opts.targetId  (default to 1620357967962058752)
     * @param {String} opts.targetScreenName 
     * @param {module:api/TwitterFollowsApiToolsApi~getFriendshipsShowUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResultT}
     */
    this.getFriendshipsShowUsingGET = function(apiKey, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling getFriendshipsShowUsingGET");
      }


      var pathParams = {
      };
      var queryParams = {
        'apiKey': apiKey,
        'source_id': opts['sourceId'],
        'source_screen_name': opts['sourceScreenName'],
        'target_id': opts['targetId'],
        'target_screen_name': opts['targetScreenName'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = ResultT;

      return this.apiClient.callApi(
        '/base/apitools/friendshipsShow', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getFriendshipsShowUsingPOST operation.
     * @callback module:api/TwitterFollowsApiToolsApi~getFriendshipsShowUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResultT} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get relationship information between two users
     * See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-friendships-show
     * @param {String} apiKey 
     * @param {Object} opts Optional parameters
     * @param {String} opts.sourceId  (default to 1574242047661207552)
     * @param {String} opts.sourceScreenName 
     * @param {String} opts.targetId  (default to 1620357967962058752)
     * @param {String} opts.targetScreenName 
     * @param {module:api/TwitterFollowsApiToolsApi~getFriendshipsShowUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResultT}
     */
    this.getFriendshipsShowUsingPOST = function(apiKey, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling getFriendshipsShowUsingPOST");
      }


      var pathParams = {
      };
      var queryParams = {
        'apiKey': apiKey,
        'source_id': opts['sourceId'],
        'source_screen_name': opts['sourceScreenName'],
        'target_id': opts['targetId'],
        'target_screen_name': opts['targetScreenName'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = ResultT;

      return this.apiClient.callApi(
        '/base/apitools/friendshipsShow', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the unfollowUsingGET operation.
     * @callback module:api/TwitterFollowsApiToolsApi~unfollowUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResultT} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * to unfollow 
     * See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/post-friendships-destroy
     * @param {String} apiKey 
     * @param {String} authToken 
     * @param {String} ct0 
     * @param {Object} opts Optional parameters
     * @param {String} opts.screenName 
     * @param {String} opts.userId  (default to 44196397)
     * @param {module:api/TwitterFollowsApiToolsApi~unfollowUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResultT}
     */
    this.unfollowUsingGET = function(apiKey, authToken, ct0, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling unfollowUsingGET");
      }

      // verify the required parameter 'authToken' is set
      if (authToken === undefined || authToken === null) {
        throw new Error("Missing the required parameter 'authToken' when calling unfollowUsingGET");
      }

      // verify the required parameter 'ct0' is set
      if (ct0 === undefined || ct0 === null) {
        throw new Error("Missing the required parameter 'ct0' when calling unfollowUsingGET");
      }


      var pathParams = {
      };
      var queryParams = {
        'apiKey': apiKey,
        'auth_token': authToken,
        'ct0': ct0,
        'screenName': opts['screenName'],
        'userId': opts['userId'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = ResultT;

      return this.apiClient.callApi(
        '/base/apitools/unfollow', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the unfollowUsingPOST operation.
     * @callback module:api/TwitterFollowsApiToolsApi~unfollowUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResultT} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * to unfollow 
     * See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/post-friendships-destroy
     * @param {String} apiKey 
     * @param {String} authToken 
     * @param {String} ct0 
     * @param {Object} opts Optional parameters
     * @param {String} opts.screenName 
     * @param {String} opts.userId  (default to 44196397)
     * @param {module:api/TwitterFollowsApiToolsApi~unfollowUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResultT}
     */
    this.unfollowUsingPOST = function(apiKey, authToken, ct0, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling unfollowUsingPOST");
      }

      // verify the required parameter 'authToken' is set
      if (authToken === undefined || authToken === null) {
        throw new Error("Missing the required parameter 'authToken' when calling unfollowUsingPOST");
      }

      // verify the required parameter 'ct0' is set
      if (ct0 === undefined || ct0 === null) {
        throw new Error("Missing the required parameter 'ct0' when calling unfollowUsingPOST");
      }


      var pathParams = {
      };
      var queryParams = {
        'apiKey': apiKey,
        'auth_token': authToken,
        'ct0': ct0,
        'screenName': opts['screenName'],
        'userId': opts['userId'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = ResultT;

      return this.apiClient.callApi(
        '/base/apitools/unfollow', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
