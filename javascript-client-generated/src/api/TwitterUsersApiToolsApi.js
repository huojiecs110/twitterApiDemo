/*
 * Utools_twitter_tools_api
 * X (Twitter) API for search, Tweets, users, followers, images, media and more. Supports some v1.1 and v2 API endpoints, with more to come in the future!
 *
 * OpenAPI spec version: 1.1
 * Contact: huojiecs@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.37
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ResultT'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ResultT'));
  } else {
    // Browser globals (root is window)
    if (!root.UtoolsTwitterToolsApi) {
      root.UtoolsTwitterToolsApi = {};
    }
    root.UtoolsTwitterToolsApi.TwitterUsersApiToolsApi = factory(root.UtoolsTwitterToolsApi.ApiClient, root.UtoolsTwitterToolsApi.ResultT);
  }
}(this, function(ApiClient, ResultT) {
  'use strict';

  /**
   * TwitterUsersApiTools service.
   * @module api/TwitterUsersApiToolsApi
   * @version 1.1
   */

  /**
   * Constructs a new TwitterUsersApiToolsApi. 
   * @alias module:api/TwitterUsersApiToolsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the blocksCreateUsingGET operation.
     * @callback module:api/TwitterUsersApiToolsApi~blocksCreateUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResultT} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * blocks Create
     * See details  https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/mute-block-report-users/api-reference/post-blocks-create
     * @param {String} apiKey 
     * @param {String} authToken 
     * @param {String} ct0 
     * @param {Object} opts Optional parameters
     * @param {String} opts.screenName 
     * @param {String} opts.userId  (default to 1574242047661207552)
     * @param {module:api/TwitterUsersApiToolsApi~blocksCreateUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResultT}
     */
    this.blocksCreateUsingGET = function(apiKey, authToken, ct0, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling blocksCreateUsingGET");
      }

      // verify the required parameter 'authToken' is set
      if (authToken === undefined || authToken === null) {
        throw new Error("Missing the required parameter 'authToken' when calling blocksCreateUsingGET");
      }

      // verify the required parameter 'ct0' is set
      if (ct0 === undefined || ct0 === null) {
        throw new Error("Missing the required parameter 'ct0' when calling blocksCreateUsingGET");
      }


      var pathParams = {
      };
      var queryParams = {
        'apiKey': apiKey,
        'auth_token': authToken,
        'ct0': ct0,
        'screenName': opts['screenName'],
        'userId': opts['userId'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = ResultT;

      return this.apiClient.callApi(
        '/base/apitools/blocksCreate', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the blocksCreateUsingPOST operation.
     * @callback module:api/TwitterUsersApiToolsApi~blocksCreateUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResultT} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * blocks Create
     * See details  https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/mute-block-report-users/api-reference/post-blocks-create
     * @param {String} apiKey 
     * @param {String} authToken 
     * @param {String} ct0 
     * @param {Object} opts Optional parameters
     * @param {String} opts.screenName 
     * @param {String} opts.userId  (default to 1574242047661207552)
     * @param {module:api/TwitterUsersApiToolsApi~blocksCreateUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResultT}
     */
    this.blocksCreateUsingPOST = function(apiKey, authToken, ct0, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling blocksCreateUsingPOST");
      }

      // verify the required parameter 'authToken' is set
      if (authToken === undefined || authToken === null) {
        throw new Error("Missing the required parameter 'authToken' when calling blocksCreateUsingPOST");
      }

      // verify the required parameter 'ct0' is set
      if (ct0 === undefined || ct0 === null) {
        throw new Error("Missing the required parameter 'ct0' when calling blocksCreateUsingPOST");
      }


      var pathParams = {
      };
      var queryParams = {
        'apiKey': apiKey,
        'auth_token': authToken,
        'ct0': ct0,
        'screenName': opts['screenName'],
        'userId': opts['userId'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = ResultT;

      return this.apiClient.callApi(
        '/base/apitools/blocksCreate', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the blocksDestroyUsingGET operation.
     * @callback module:api/TwitterUsersApiToolsApi~blocksDestroyUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResultT} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * blocks Destroy
     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/mute-block-report-users/api-reference/post-blocks-destroy
     * @param {String} apiKey 
     * @param {String} authToken 
     * @param {String} ct0 
     * @param {Object} opts Optional parameters
     * @param {String} opts.screenName 
     * @param {String} opts.userId  (default to 44196397)
     * @param {module:api/TwitterUsersApiToolsApi~blocksDestroyUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResultT}
     */
    this.blocksDestroyUsingGET = function(apiKey, authToken, ct0, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling blocksDestroyUsingGET");
      }

      // verify the required parameter 'authToken' is set
      if (authToken === undefined || authToken === null) {
        throw new Error("Missing the required parameter 'authToken' when calling blocksDestroyUsingGET");
      }

      // verify the required parameter 'ct0' is set
      if (ct0 === undefined || ct0 === null) {
        throw new Error("Missing the required parameter 'ct0' when calling blocksDestroyUsingGET");
      }


      var pathParams = {
      };
      var queryParams = {
        'apiKey': apiKey,
        'auth_token': authToken,
        'ct0': ct0,
        'screenName': opts['screenName'],
        'userId': opts['userId'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = ResultT;

      return this.apiClient.callApi(
        '/base/apitools/blocksDestroy', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the blocksDestroyUsingPOST operation.
     * @callback module:api/TwitterUsersApiToolsApi~blocksDestroyUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResultT} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * blocks Destroy
     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/mute-block-report-users/api-reference/post-blocks-destroy
     * @param {String} apiKey 
     * @param {String} authToken 
     * @param {String} ct0 
     * @param {Object} opts Optional parameters
     * @param {String} opts.screenName 
     * @param {String} opts.userId  (default to 44196397)
     * @param {module:api/TwitterUsersApiToolsApi~blocksDestroyUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResultT}
     */
    this.blocksDestroyUsingPOST = function(apiKey, authToken, ct0, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling blocksDestroyUsingPOST");
      }

      // verify the required parameter 'authToken' is set
      if (authToken === undefined || authToken === null) {
        throw new Error("Missing the required parameter 'authToken' when calling blocksDestroyUsingPOST");
      }

      // verify the required parameter 'ct0' is set
      if (ct0 === undefined || ct0 === null) {
        throw new Error("Missing the required parameter 'ct0' when calling blocksDestroyUsingPOST");
      }


      var pathParams = {
      };
      var queryParams = {
        'apiKey': apiKey,
        'auth_token': authToken,
        'ct0': ct0,
        'screenName': opts['screenName'],
        'userId': opts['userId'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = ResultT;

      return this.apiClient.callApi(
        '/base/apitools/blocksDestroy', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getListByUserIdOrScreenNameUsingGET operation.
     * @callback module:api/TwitterUsersApiToolsApi~getListByUserIdOrScreenNameUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResultT} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get List by user_id or screen_name(get-lists-list)
     * See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/get-lists-list
     * @param {String} apiKey 
     * @param {Object} opts Optional parameters
     * @param {String} opts.screenName  (default to elonmusk)
     * @param {String} opts.userId  (default to 1574242047661207552)
     * @param {module:api/TwitterUsersApiToolsApi~getListByUserIdOrScreenNameUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResultT}
     */
    this.getListByUserIdOrScreenNameUsingGET = function(apiKey, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling getListByUserIdOrScreenNameUsingGET");
      }


      var pathParams = {
      };
      var queryParams = {
        'apiKey': apiKey,
        'screenName': opts['screenName'],
        'userId': opts['userId'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = ResultT;

      return this.apiClient.callApi(
        '/base/apitools/listByUserIdOrScreenName', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getListByUserIdOrScreenNameUsingPOST operation.
     * @callback module:api/TwitterUsersApiToolsApi~getListByUserIdOrScreenNameUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResultT} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get List by user_id or screen_name(get-lists-list)
     * See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/get-lists-list
     * @param {String} apiKey 
     * @param {Object} opts Optional parameters
     * @param {String} opts.screenName  (default to elonmusk)
     * @param {String} opts.userId  (default to 1574242047661207552)
     * @param {module:api/TwitterUsersApiToolsApi~getListByUserIdOrScreenNameUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResultT}
     */
    this.getListByUserIdOrScreenNameUsingPOST = function(apiKey, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling getListByUserIdOrScreenNameUsingPOST");
      }


      var pathParams = {
      };
      var queryParams = {
        'apiKey': apiKey,
        'screenName': opts['screenName'],
        'userId': opts['userId'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = ResultT;

      return this.apiClient.callApi(
        '/base/apitools/listByUserIdOrScreenName', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getListMembersByListIdUsingGET operation.
     * @callback module:api/TwitterUsersApiToolsApi~getListMembersByListIdUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResultT} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get List Members By ListId (get-lists-members)
     * See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/get-lists-members
     * @param {String} apiKey 
     * @param {String} listId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.cursor  (default to -1)
     * @param {module:api/TwitterUsersApiToolsApi~getListMembersByListIdUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResultT}
     */
    this.getListMembersByListIdUsingGET = function(apiKey, listId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling getListMembersByListIdUsingGET");
      }

      // verify the required parameter 'listId' is set
      if (listId === undefined || listId === null) {
        throw new Error("Missing the required parameter 'listId' when calling getListMembersByListIdUsingGET");
      }


      var pathParams = {
      };
      var queryParams = {
        'apiKey': apiKey,
        'cursor': opts['cursor'],
        'listId': listId,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = ResultT;

      return this.apiClient.callApi(
        '/base/apitools/listMembersByListId', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getListMembersByListIdUsingPOST operation.
     * @callback module:api/TwitterUsersApiToolsApi~getListMembersByListIdUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResultT} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get List Members By ListId (get-lists-members)
     * See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/get-lists-members
     * @param {String} apiKey 
     * @param {String} listId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.cursor  (default to -1)
     * @param {module:api/TwitterUsersApiToolsApi~getListMembersByListIdUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResultT}
     */
    this.getListMembersByListIdUsingPOST = function(apiKey, listId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling getListMembersByListIdUsingPOST");
      }

      // verify the required parameter 'listId' is set
      if (listId === undefined || listId === null) {
        throw new Error("Missing the required parameter 'listId' when calling getListMembersByListIdUsingPOST");
      }


      var pathParams = {
      };
      var queryParams = {
        'apiKey': apiKey,
        'cursor': opts['cursor'],
        'listId': listId,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = ResultT;

      return this.apiClient.callApi(
        '/base/apitools/listMembersByListId', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getUserByIdOrNameLookUpUsingGET operation.
     * @callback module:api/TwitterUsersApiToolsApi~getUserByIdOrNameLookUpUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResultT} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get user information based on username or id (lookup)
     * See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-users-lookup
     * @param {String} apiKey 
     * @param {Object} opts Optional parameters
     * @param {String} opts.screenName  (default to elonmusk)
     * @param {String} opts.userId  (default to 1574242047661207552)
     * @param {module:api/TwitterUsersApiToolsApi~getUserByIdOrNameLookUpUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResultT}
     */
    this.getUserByIdOrNameLookUpUsingGET = function(apiKey, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling getUserByIdOrNameLookUpUsingGET");
      }


      var pathParams = {
      };
      var queryParams = {
        'apiKey': apiKey,
        'screenName': opts['screenName'],
        'userId': opts['userId'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = ResultT;

      return this.apiClient.callApi(
        '/base/apitools/uerByIdOrNameLookUp', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getUserByIdOrNameLookUpUsingPOST operation.
     * @callback module:api/TwitterUsersApiToolsApi~getUserByIdOrNameLookUpUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResultT} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get user information based on username or id (lookup)
     * See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-users-lookup
     * @param {String} apiKey 
     * @param {Object} opts Optional parameters
     * @param {String} opts.screenName  (default to elonmusk)
     * @param {String} opts.userId  (default to 1574242047661207552)
     * @param {module:api/TwitterUsersApiToolsApi~getUserByIdOrNameLookUpUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResultT}
     */
    this.getUserByIdOrNameLookUpUsingPOST = function(apiKey, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling getUserByIdOrNameLookUpUsingPOST");
      }


      var pathParams = {
      };
      var queryParams = {
        'apiKey': apiKey,
        'screenName': opts['screenName'],
        'userId': opts['userId'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = ResultT;

      return this.apiClient.callApi(
        '/base/apitools/uerByIdOrNameLookUp', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getUserByIdOrNameShowUsingGET operation.
     * @callback module:api/TwitterUsersApiToolsApi~getUserByIdOrNameShowUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResultT} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get user information based on username or id (show)
     * See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-users-show
     * @param {String} apiKey 
     * @param {Object} opts Optional parameters
     * @param {String} opts.screenName  (default to elonmusk)
     * @param {String} opts.userId  (default to 1574242047661207552)
     * @param {module:api/TwitterUsersApiToolsApi~getUserByIdOrNameShowUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResultT}
     */
    this.getUserByIdOrNameShowUsingGET = function(apiKey, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling getUserByIdOrNameShowUsingGET");
      }


      var pathParams = {
      };
      var queryParams = {
        'apiKey': apiKey,
        'screenName': opts['screenName'],
        'userId': opts['userId'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = ResultT;

      return this.apiClient.callApi(
        '/base/apitools/uerByIdOrNameShow', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getUserByIdOrNameShowUsingPOST operation.
     * @callback module:api/TwitterUsersApiToolsApi~getUserByIdOrNameShowUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResultT} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get user information based on username or id (show)
     * See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-users-show
     * @param {String} apiKey 
     * @param {Object} opts Optional parameters
     * @param {String} opts.screenName  (default to elonmusk)
     * @param {String} opts.userId  (default to 1574242047661207552)
     * @param {module:api/TwitterUsersApiToolsApi~getUserByIdOrNameShowUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResultT}
     */
    this.getUserByIdOrNameShowUsingPOST = function(apiKey, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling getUserByIdOrNameShowUsingPOST");
      }


      var pathParams = {
      };
      var queryParams = {
        'apiKey': apiKey,
        'screenName': opts['screenName'],
        'userId': opts['userId'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = ResultT;

      return this.apiClient.callApi(
        '/base/apitools/uerByIdOrNameShow', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the uerByIdRestIdV2UsingGET operation.
     * @callback module:api/TwitterUsersApiToolsApi~uerByIdRestIdV2UsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResultT} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get uerByIdRestId by V2
     * @param {String} apiKey 
     * @param {String} userId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.cursor  (default to -1)
     * @param {module:api/TwitterUsersApiToolsApi~uerByIdRestIdV2UsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResultT}
     */
    this.uerByIdRestIdV2UsingGET = function(apiKey, userId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling uerByIdRestIdV2UsingGET");
      }

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling uerByIdRestIdV2UsingGET");
      }


      var pathParams = {
      };
      var queryParams = {
        'apiKey': apiKey,
        'cursor': opts['cursor'],
        'userId': userId,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = ResultT;

      return this.apiClient.callApi(
        '/base/apitools/uerByIdRestIdV2', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the uerByIdRestIdV2UsingPOST operation.
     * @callback module:api/TwitterUsersApiToolsApi~uerByIdRestIdV2UsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResultT} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get uerByIdRestId by V2
     * @param {String} apiKey 
     * @param {String} userId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.cursor  (default to -1)
     * @param {module:api/TwitterUsersApiToolsApi~uerByIdRestIdV2UsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResultT}
     */
    this.uerByIdRestIdV2UsingPOST = function(apiKey, userId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling uerByIdRestIdV2UsingPOST");
      }

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling uerByIdRestIdV2UsingPOST");
      }


      var pathParams = {
      };
      var queryParams = {
        'apiKey': apiKey,
        'cursor': opts['cursor'],
        'userId': userId,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = ResultT;

      return this.apiClient.callApi(
        '/base/apitools/uerByIdRestIdV2', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the userByScreenNameV2UsingGET operation.
     * @callback module:api/TwitterUsersApiToolsApi~userByScreenNameV2UsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResultT} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get userByScreenName by V2
     * @param {String} apiKey 
     * @param {String} screenName 
     * @param {module:api/TwitterUsersApiToolsApi~userByScreenNameV2UsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResultT}
     */
    this.userByScreenNameV2UsingGET = function(apiKey, screenName, callback) {
      var postBody = null;

      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling userByScreenNameV2UsingGET");
      }

      // verify the required parameter 'screenName' is set
      if (screenName === undefined || screenName === null) {
        throw new Error("Missing the required parameter 'screenName' when calling userByScreenNameV2UsingGET");
      }


      var pathParams = {
      };
      var queryParams = {
        'apiKey': apiKey,
        'screenName': screenName,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = ResultT;

      return this.apiClient.callApi(
        '/base/apitools/userByScreenNameV2', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the userByScreenNameV2UsingPOST operation.
     * @callback module:api/TwitterUsersApiToolsApi~userByScreenNameV2UsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResultT} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get userByScreenName by V2
     * @param {String} apiKey 
     * @param {String} screenName 
     * @param {module:api/TwitterUsersApiToolsApi~userByScreenNameV2UsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResultT}
     */
    this.userByScreenNameV2UsingPOST = function(apiKey, screenName, callback) {
      var postBody = null;

      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling userByScreenNameV2UsingPOST");
      }

      // verify the required parameter 'screenName' is set
      if (screenName === undefined || screenName === null) {
        throw new Error("Missing the required parameter 'screenName' when calling userByScreenNameV2UsingPOST");
      }


      var pathParams = {
      };
      var queryParams = {
        'apiKey': apiKey,
        'screenName': screenName,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = ResultT;

      return this.apiClient.callApi(
        '/base/apitools/userByScreenNameV2', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the userTimelineUsingGET operation.
     * @callback module:api/TwitterUsersApiToolsApi~userTimelineUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResultT} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get UserTimeline  tweets info
     * @param {String} apiKey 
     * @param {String} userId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.cursor  (default to -1)
     * @param {module:api/TwitterUsersApiToolsApi~userTimelineUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResultT}
     */
    this.userTimelineUsingGET = function(apiKey, userId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling userTimelineUsingGET");
      }

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling userTimelineUsingGET");
      }


      var pathParams = {
      };
      var queryParams = {
        'apiKey': apiKey,
        'cursor': opts['cursor'],
        'userId': userId,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = ResultT;

      return this.apiClient.callApi(
        '/base/apitools/userTimeline', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the userTimelineUsingPOST operation.
     * @callback module:api/TwitterUsersApiToolsApi~userTimelineUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResultT} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get UserTimeline  tweets info
     * @param {String} apiKey 
     * @param {String} userId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.cursor  (default to -1)
     * @param {module:api/TwitterUsersApiToolsApi~userTimelineUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResultT}
     */
    this.userTimelineUsingPOST = function(apiKey, userId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling userTimelineUsingPOST");
      }

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling userTimelineUsingPOST");
      }


      var pathParams = {
      };
      var queryParams = {
        'apiKey': apiKey,
        'cursor': opts['cursor'],
        'userId': userId,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = ResultT;

      return this.apiClient.callApi(
        '/base/apitools/userTimeline', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the userTweetsV2UsingGET operation.
     * @callback module:api/TwitterUsersApiToolsApi~userTweetsV2UsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResultT} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get UserTweets by V2
     * @param {String} apiKey 
     * @param {String} userId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.cursor  (default to -1)
     * @param {module:api/TwitterUsersApiToolsApi~userTweetsV2UsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResultT}
     */
    this.userTweetsV2UsingGET = function(apiKey, userId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling userTweetsV2UsingGET");
      }

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling userTweetsV2UsingGET");
      }


      var pathParams = {
      };
      var queryParams = {
        'apiKey': apiKey,
        'cursor': opts['cursor'],
        'userId': userId,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = ResultT;

      return this.apiClient.callApi(
        '/base/apitools/userTweetsV2', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the userTweetsV2UsingPOST operation.
     * @callback module:api/TwitterUsersApiToolsApi~userTweetsV2UsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResultT} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get UserTweets by V2
     * @param {String} apiKey 
     * @param {String} userId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.cursor  (default to -1)
     * @param {module:api/TwitterUsersApiToolsApi~userTweetsV2UsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResultT}
     */
    this.userTweetsV2UsingPOST = function(apiKey, userId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling userTweetsV2UsingPOST");
      }

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling userTweetsV2UsingPOST");
      }


      var pathParams = {
      };
      var queryParams = {
        'apiKey': apiKey,
        'cursor': opts['cursor'],
        'userId': userId,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = ResultT;

      return this.apiClient.callApi(
        '/base/apitools/userTweetsV2', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
