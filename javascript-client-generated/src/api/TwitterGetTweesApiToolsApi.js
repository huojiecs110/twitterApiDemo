/*
 * Utools_twitter_tools_api
 * X (Twitter) API for search, Tweets, users, followers, images, media and more. Supports some v1.1 and v2 API endpoints, with more to come in the future!
 *
 * OpenAPI spec version: 1.1
 * Contact: huojiecs@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.37
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ResultT'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ResultT'));
  } else {
    // Browser globals (root is window)
    if (!root.UtoolsTwitterToolsApi) {
      root.UtoolsTwitterToolsApi = {};
    }
    root.UtoolsTwitterToolsApi.TwitterGetTweesApiToolsApi = factory(root.UtoolsTwitterToolsApi.ApiClient, root.UtoolsTwitterToolsApi.ResultT);
  }
}(this, function(ApiClient, ResultT) {
  'use strict';

  /**
   * TwitterGetTweesApiTools service.
   * @module api/TwitterGetTweesApiToolsApi
   * @version 1.1
   */

  /**
   * Constructs a new TwitterGetTweesApiToolsApi. 
   * @alias module:api/TwitterGetTweesApiToolsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the favoritersV2UsingGET operation.
     * @callback module:api/TwitterGetTweesApiToolsApi~favoritersV2UsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResultT} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Favoriters by V2
     * @param {String} apiKey 
     * @param {String} tweetId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.cursor  (default to -1)
     * @param {module:api/TwitterGetTweesApiToolsApi~favoritersV2UsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResultT}
     */
    this.favoritersV2UsingGET = function(apiKey, tweetId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling favoritersV2UsingGET");
      }

      // verify the required parameter 'tweetId' is set
      if (tweetId === undefined || tweetId === null) {
        throw new Error("Missing the required parameter 'tweetId' when calling favoritersV2UsingGET");
      }


      var pathParams = {
      };
      var queryParams = {
        'apiKey': apiKey,
        'cursor': opts['cursor'],
        'tweetId': tweetId,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = ResultT;

      return this.apiClient.callApi(
        '/base/apitools/favoritersV2', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the favoritersV2UsingPOST operation.
     * @callback module:api/TwitterGetTweesApiToolsApi~favoritersV2UsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResultT} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Favoriters by V2
     * @param {String} apiKey 
     * @param {String} tweetId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.cursor  (default to -1)
     * @param {module:api/TwitterGetTweesApiToolsApi~favoritersV2UsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResultT}
     */
    this.favoritersV2UsingPOST = function(apiKey, tweetId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling favoritersV2UsingPOST");
      }

      // verify the required parameter 'tweetId' is set
      if (tweetId === undefined || tweetId === null) {
        throw new Error("Missing the required parameter 'tweetId' when calling favoritersV2UsingPOST");
      }


      var pathParams = {
      };
      var queryParams = {
        'apiKey': apiKey,
        'cursor': opts['cursor'],
        'tweetId': tweetId,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = ResultT;

      return this.apiClient.callApi(
        '/base/apitools/favoritersV2', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the favoritesListUsingGET operation.
     * @callback module:api/TwitterGetTweesApiToolsApi~favoritesListUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResultT} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * favorites are now known as likes.
     * See details https://developer.twitter.com/en/docs/twitter-api/v1/tweets/post-and-engage/api-reference/get-favorites-list
     * @param {String} apiKey 
     * @param {String} userId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.maxId Returns results with an ID less than (that is, older than) or equal to the specified ID.
     * @param {String} opts.screenName  (default to elonmusk)
     * @param {String} opts.sinceId Returns results with an ID greater than (that is, more recent than) the specified ID. There are limits to the number of Tweets which can be accessed through the API. If the limit of Tweets has occured since the since_id, the since_id will be forced to the oldest ID available.
     * @param {module:api/TwitterGetTweesApiToolsApi~favoritesListUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResultT}
     */
    this.favoritesListUsingGET = function(apiKey, userId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling favoritesListUsingGET");
      }

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling favoritesListUsingGET");
      }


      var pathParams = {
      };
      var queryParams = {
        'apiKey': apiKey,
        'maxId': opts['maxId'],
        'screenName': opts['screenName'],
        'sinceId': opts['sinceId'],
        'userId': userId,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = ResultT;

      return this.apiClient.callApi(
        '/base/apitools/favoritesList', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the favoritesListUsingPOST operation.
     * @callback module:api/TwitterGetTweesApiToolsApi~favoritesListUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResultT} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * favorites are now known as likes.
     * See details https://developer.twitter.com/en/docs/twitter-api/v1/tweets/post-and-engage/api-reference/get-favorites-list
     * @param {String} apiKey 
     * @param {String} userId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.maxId Returns results with an ID less than (that is, older than) or equal to the specified ID.
     * @param {String} opts.screenName  (default to elonmusk)
     * @param {String} opts.sinceId Returns results with an ID greater than (that is, more recent than) the specified ID. There are limits to the number of Tweets which can be accessed through the API. If the limit of Tweets has occured since the since_id, the since_id will be forced to the oldest ID available.
     * @param {module:api/TwitterGetTweesApiToolsApi~favoritesListUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResultT}
     */
    this.favoritesListUsingPOST = function(apiKey, userId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling favoritesListUsingPOST");
      }

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling favoritesListUsingPOST");
      }


      var pathParams = {
      };
      var queryParams = {
        'apiKey': apiKey,
        'maxId': opts['maxId'],
        'screenName': opts['screenName'],
        'sinceId': opts['sinceId'],
        'userId': userId,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = ResultT;

      return this.apiClient.callApi(
        '/base/apitools/favoritesList', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the mentionsTimelineUsingGET operation.
     * @callback module:api/TwitterGetTweesApiToolsApi~mentionsTimelineUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResultT} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get mentionsTimeline Detail
     * See details  https://developer.twitter.com/en/docs/twitter-api/v1/tweets/timelines/api-reference/get-statuses-mentions_timeline
     * @param {String} apiKey 
     * @param {String} authToken 
     * @param {String} ct0 
     * @param {Object} opts Optional parameters
     * @param {String} opts.includeEntities  (default to false)
     * @param {String} opts.maxId Returns results with an ID less than (that is, older than) or equal to the specified ID.
     * @param {String} opts.sinceId Returns results with an ID greater than (that is, more recent than) the specified ID. There are limits to the number of Tweets which can be accessed through the API. If the limit of Tweets has occured since the since_id, the since_id will be forced to the oldest ID available.
     * @param {String} opts.trimUser  (default to true)
     * @param {module:api/TwitterGetTweesApiToolsApi~mentionsTimelineUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResultT}
     */
    this.mentionsTimelineUsingGET = function(apiKey, authToken, ct0, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling mentionsTimelineUsingGET");
      }

      // verify the required parameter 'authToken' is set
      if (authToken === undefined || authToken === null) {
        throw new Error("Missing the required parameter 'authToken' when calling mentionsTimelineUsingGET");
      }

      // verify the required parameter 'ct0' is set
      if (ct0 === undefined || ct0 === null) {
        throw new Error("Missing the required parameter 'ct0' when calling mentionsTimelineUsingGET");
      }


      var pathParams = {
      };
      var queryParams = {
        'apiKey': apiKey,
        'auth_token': authToken,
        'ct0': ct0,
        'include_entities': opts['includeEntities'],
        'maxId': opts['maxId'],
        'sinceId': opts['sinceId'],
        'trim_user': opts['trimUser'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = ResultT;

      return this.apiClient.callApi(
        '/base/apitools/mentionsTimeline', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the mentionsTimelineUsingPOST operation.
     * @callback module:api/TwitterGetTweesApiToolsApi~mentionsTimelineUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResultT} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get mentionsTimeline Detail
     * See details  https://developer.twitter.com/en/docs/twitter-api/v1/tweets/timelines/api-reference/get-statuses-mentions_timeline
     * @param {String} apiKey 
     * @param {String} authToken 
     * @param {String} ct0 
     * @param {Object} opts Optional parameters
     * @param {String} opts.includeEntities  (default to false)
     * @param {String} opts.maxId Returns results with an ID less than (that is, older than) or equal to the specified ID.
     * @param {String} opts.sinceId Returns results with an ID greater than (that is, more recent than) the specified ID. There are limits to the number of Tweets which can be accessed through the API. If the limit of Tweets has occured since the since_id, the since_id will be forced to the oldest ID available.
     * @param {String} opts.trimUser  (default to true)
     * @param {module:api/TwitterGetTweesApiToolsApi~mentionsTimelineUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResultT}
     */
    this.mentionsTimelineUsingPOST = function(apiKey, authToken, ct0, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling mentionsTimelineUsingPOST");
      }

      // verify the required parameter 'authToken' is set
      if (authToken === undefined || authToken === null) {
        throw new Error("Missing the required parameter 'authToken' when calling mentionsTimelineUsingPOST");
      }

      // verify the required parameter 'ct0' is set
      if (ct0 === undefined || ct0 === null) {
        throw new Error("Missing the required parameter 'ct0' when calling mentionsTimelineUsingPOST");
      }


      var pathParams = {
      };
      var queryParams = {
        'apiKey': apiKey,
        'auth_token': authToken,
        'ct0': ct0,
        'include_entities': opts['includeEntities'],
        'maxId': opts['maxId'],
        'sinceId': opts['sinceId'],
        'trim_user': opts['trimUser'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = ResultT;

      return this.apiClient.callApi(
        '/base/apitools/mentionsTimeline', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the quotesV2UsingGET operation.
     * @callback module:api/TwitterGetTweesApiToolsApi~quotesV2UsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResultT} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Quotes by V2
     * @param {String} apiKey 
     * @param {String} tweetId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.cursor  (default to -1)
     * @param {module:api/TwitterGetTweesApiToolsApi~quotesV2UsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResultT}
     */
    this.quotesV2UsingGET = function(apiKey, tweetId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling quotesV2UsingGET");
      }

      // verify the required parameter 'tweetId' is set
      if (tweetId === undefined || tweetId === null) {
        throw new Error("Missing the required parameter 'tweetId' when calling quotesV2UsingGET");
      }


      var pathParams = {
      };
      var queryParams = {
        'apiKey': apiKey,
        'cursor': opts['cursor'],
        'tweetId': tweetId,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = ResultT;

      return this.apiClient.callApi(
        '/base/apitools/quotesV2', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the quotesV2UsingPOST operation.
     * @callback module:api/TwitterGetTweesApiToolsApi~quotesV2UsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResultT} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Quotes by V2
     * @param {String} apiKey 
     * @param {String} tweetId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.cursor  (default to -1)
     * @param {module:api/TwitterGetTweesApiToolsApi~quotesV2UsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResultT}
     */
    this.quotesV2UsingPOST = function(apiKey, tweetId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling quotesV2UsingPOST");
      }

      // verify the required parameter 'tweetId' is set
      if (tweetId === undefined || tweetId === null) {
        throw new Error("Missing the required parameter 'tweetId' when calling quotesV2UsingPOST");
      }


      var pathParams = {
      };
      var queryParams = {
        'apiKey': apiKey,
        'cursor': opts['cursor'],
        'tweetId': tweetId,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = ResultT;

      return this.apiClient.callApi(
        '/base/apitools/quotesV2', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the retweetersIdsUsingGET operation.
     * @callback module:api/TwitterGetTweesApiToolsApi~retweetersIdsUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResultT} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get retwweeters ids by tweetId
     * Returns a collection of up to 100 user IDs belonging to users who have retweeted the Tweet specified by the id parameter. See details https://developer.twitter.com/en/docs/twitter-api/v1/tweets/post-and-engage/api-reference/get-statuses-retweeters-ids
     * @param {String} apiKey 
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.cursor  (default to -1)
     * @param {module:api/TwitterGetTweesApiToolsApi~retweetersIdsUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResultT}
     */
    this.retweetersIdsUsingGET = function(apiKey, id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling retweetersIdsUsingGET");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling retweetersIdsUsingGET");
      }


      var pathParams = {
      };
      var queryParams = {
        'apiKey': apiKey,
        'cursor': opts['cursor'],
        'id': id,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = ResultT;

      return this.apiClient.callApi(
        '/base/apitools/retweetersIds', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the retweetersIdsUsingPOST operation.
     * @callback module:api/TwitterGetTweesApiToolsApi~retweetersIdsUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResultT} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get retwweeters ids by tweetId
     * Returns a collection of up to 100 user IDs belonging to users who have retweeted the Tweet specified by the id parameter. See details https://developer.twitter.com/en/docs/twitter-api/v1/tweets/post-and-engage/api-reference/get-statuses-retweeters-ids
     * @param {String} apiKey 
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.cursor  (default to -1)
     * @param {module:api/TwitterGetTweesApiToolsApi~retweetersIdsUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResultT}
     */
    this.retweetersIdsUsingPOST = function(apiKey, id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling retweetersIdsUsingPOST");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling retweetersIdsUsingPOST");
      }


      var pathParams = {
      };
      var queryParams = {
        'apiKey': apiKey,
        'cursor': opts['cursor'],
        'id': id,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = ResultT;

      return this.apiClient.callApi(
        '/base/apitools/retweetersIds', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the retweetersV2UsingGET operation.
     * @callback module:api/TwitterGetTweesApiToolsApi~retweetersV2UsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResultT} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retweeters by V2
     * @param {String} apiKey 
     * @param {String} tweetId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.cursor  (default to -1)
     * @param {module:api/TwitterGetTweesApiToolsApi~retweetersV2UsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResultT}
     */
    this.retweetersV2UsingGET = function(apiKey, tweetId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling retweetersV2UsingGET");
      }

      // verify the required parameter 'tweetId' is set
      if (tweetId === undefined || tweetId === null) {
        throw new Error("Missing the required parameter 'tweetId' when calling retweetersV2UsingGET");
      }


      var pathParams = {
      };
      var queryParams = {
        'apiKey': apiKey,
        'cursor': opts['cursor'],
        'tweetId': tweetId,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = ResultT;

      return this.apiClient.callApi(
        '/base/apitools/retweetersV2', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the retweetersV2UsingPOST operation.
     * @callback module:api/TwitterGetTweesApiToolsApi~retweetersV2UsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResultT} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retweeters by V2
     * @param {String} apiKey 
     * @param {String} tweetId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.cursor  (default to -1)
     * @param {module:api/TwitterGetTweesApiToolsApi~retweetersV2UsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResultT}
     */
    this.retweetersV2UsingPOST = function(apiKey, tweetId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling retweetersV2UsingPOST");
      }

      // verify the required parameter 'tweetId' is set
      if (tweetId === undefined || tweetId === null) {
        throw new Error("Missing the required parameter 'tweetId' when calling retweetersV2UsingPOST");
      }


      var pathParams = {
      };
      var queryParams = {
        'apiKey': apiKey,
        'cursor': opts['cursor'],
        'tweetId': tweetId,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = ResultT;

      return this.apiClient.callApi(
        '/base/apitools/retweetersV2', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the tweetSimpleUsingGET operation.
     * @callback module:api/TwitterGetTweesApiToolsApi~tweetSimpleUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResultT} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * tweet Brief information
     * get tweet Brief information
     * @param {String} apiKey 
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.cursor  (default to -1)
     * @param {module:api/TwitterGetTweesApiToolsApi~tweetSimpleUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResultT}
     */
    this.tweetSimpleUsingGET = function(apiKey, id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling tweetSimpleUsingGET");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling tweetSimpleUsingGET");
      }


      var pathParams = {
      };
      var queryParams = {
        'apiKey': apiKey,
        'cursor': opts['cursor'],
        'id': id,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = ResultT;

      return this.apiClient.callApi(
        '/base/apitools/tweetSimple', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the tweetSimpleUsingPOST operation.
     * @callback module:api/TwitterGetTweesApiToolsApi~tweetSimpleUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResultT} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * tweet Brief information
     * get tweet Brief information
     * @param {String} apiKey 
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.cursor  (default to -1)
     * @param {module:api/TwitterGetTweesApiToolsApi~tweetSimpleUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResultT}
     */
    this.tweetSimpleUsingPOST = function(apiKey, id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling tweetSimpleUsingPOST");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling tweetSimpleUsingPOST");
      }


      var pathParams = {
      };
      var queryParams = {
        'apiKey': apiKey,
        'cursor': opts['cursor'],
        'id': id,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = ResultT;

      return this.apiClient.callApi(
        '/base/apitools/tweetSimple', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the tweetTimelineUsingGET operation.
     * @callback module:api/TwitterGetTweesApiToolsApi~tweetTimelineUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResultT} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get TweetTimeline Detail
     * get tweetDetail and reply
     * @param {String} apiKey 
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.cursor  (default to -1)
     * @param {module:api/TwitterGetTweesApiToolsApi~tweetTimelineUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResultT}
     */
    this.tweetTimelineUsingGET = function(apiKey, id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling tweetTimelineUsingGET");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling tweetTimelineUsingGET");
      }


      var pathParams = {
      };
      var queryParams = {
        'apiKey': apiKey,
        'cursor': opts['cursor'],
        'id': id,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = ResultT;

      return this.apiClient.callApi(
        '/base/apitools/tweetTimeline', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the tweetTimelineUsingPOST operation.
     * @callback module:api/TwitterGetTweesApiToolsApi~tweetTimelineUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResultT} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get TweetTimeline Detail
     * get tweetDetail and reply
     * @param {String} apiKey 
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.cursor  (default to -1)
     * @param {module:api/TwitterGetTweesApiToolsApi~tweetTimelineUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResultT}
     */
    this.tweetTimelineUsingPOST = function(apiKey, id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling tweetTimelineUsingPOST");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling tweetTimelineUsingPOST");
      }


      var pathParams = {
      };
      var queryParams = {
        'apiKey': apiKey,
        'cursor': opts['cursor'],
        'id': id,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = ResultT;

      return this.apiClient.callApi(
        '/base/apitools/tweetTimeline', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the userTweetReplyUsingGET operation.
     * @callback module:api/TwitterGetTweesApiToolsApi~userTweetReplyUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResultT} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get userTweetReply 
     * get user Tweet Reply
     * @param {String} apiKey 
     * @param {String} userId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.cursor  (default to -1)
     * @param {module:api/TwitterGetTweesApiToolsApi~userTweetReplyUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResultT}
     */
    this.userTweetReplyUsingGET = function(apiKey, userId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling userTweetReplyUsingGET");
      }

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling userTweetReplyUsingGET");
      }


      var pathParams = {
      };
      var queryParams = {
        'apiKey': apiKey,
        'cursor': opts['cursor'],
        'userId': userId,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = ResultT;

      return this.apiClient.callApi(
        '/base/apitools/userTweetReply', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the userTweetReplyUsingPOST operation.
     * @callback module:api/TwitterGetTweesApiToolsApi~userTweetReplyUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResultT} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get userTweetReply 
     * get user Tweet Reply
     * @param {String} apiKey 
     * @param {String} userId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.cursor  (default to -1)
     * @param {module:api/TwitterGetTweesApiToolsApi~userTweetReplyUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResultT}
     */
    this.userTweetReplyUsingPOST = function(apiKey, userId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling userTweetReplyUsingPOST");
      }

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling userTweetReplyUsingPOST");
      }


      var pathParams = {
      };
      var queryParams = {
        'apiKey': apiKey,
        'cursor': opts['cursor'],
        'userId': userId,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = ResultT;

      return this.apiClient.callApi(
        '/base/apitools/userTweetReply', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
