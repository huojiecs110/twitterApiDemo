/*
 * Utools_twitter_tools_api
 * X (Twitter) API for search, Tweets, users, followers, images, media and more. Supports some v1.1 and v2 API endpoints, with more to come in the future!
 *
 * OpenAPI spec version: 1.1
 * Contact: huojiecs@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.io.File;
import io.swagger.client.model.ResultT;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TwitterDmsApiToolsApi {
    private ApiClient apiClient;

    public TwitterDmsApiToolsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TwitterDmsApiToolsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for getDMSListV2UsingGET
     * @param apiKey  (required)
     * @param authToken  (required)
     * @param ct0  (required)
     * @param cursor  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDMSListV2UsingGETCall(String apiKey, String authToken, String ct0, String cursor, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/base/apitools/getDMSListV2";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (apiKey != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("apiKey", apiKey));
        if (authToken != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("auth_token", authToken));
        if (ct0 != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ct0", ct0));
        if (cursor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cursor", cursor));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDMSListV2UsingGETValidateBeforeCall(String apiKey, String authToken, String ct0, String cursor, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling getDMSListV2UsingGET(Async)");
        }
        
        // verify the required parameter 'authToken' is set
        if (authToken == null) {
            throw new ApiException("Missing the required parameter 'authToken' when calling getDMSListV2UsingGET(Async)");
        }
        
        // verify the required parameter 'ct0' is set
        if (ct0 == null) {
            throw new ApiException("Missing the required parameter 'ct0' when calling getDMSListV2UsingGET(Async)");
        }
        
        // verify the required parameter 'cursor' is set
        if (cursor == null) {
            throw new ApiException("Missing the required parameter 'cursor' when calling getDMSListV2UsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = getDMSListV2UsingGETCall(apiKey, authToken, ct0, cursor, progressListener, progressRequestListener);
        return call;

    }

    /**
     * get DMS List
     * 
     * @param apiKey  (required)
     * @param authToken  (required)
     * @param ct0  (required)
     * @param cursor  (required)
     * @return ResultT
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResultT getDMSListV2UsingGET(String apiKey, String authToken, String ct0, String cursor) throws ApiException {
        ApiResponse<ResultT> resp = getDMSListV2UsingGETWithHttpInfo(apiKey, authToken, ct0, cursor);
        return resp.getData();
    }

    /**
     * get DMS List
     * 
     * @param apiKey  (required)
     * @param authToken  (required)
     * @param ct0  (required)
     * @param cursor  (required)
     * @return ApiResponse&lt;ResultT&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResultT> getDMSListV2UsingGETWithHttpInfo(String apiKey, String authToken, String ct0, String cursor) throws ApiException {
        com.squareup.okhttp.Call call = getDMSListV2UsingGETValidateBeforeCall(apiKey, authToken, ct0, cursor, null, null);
        Type localVarReturnType = new TypeToken<ResultT>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * get DMS List (asynchronously)
     * 
     * @param apiKey  (required)
     * @param authToken  (required)
     * @param ct0  (required)
     * @param cursor  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDMSListV2UsingGETAsync(String apiKey, String authToken, String ct0, String cursor, final ApiCallback<ResultT> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDMSListV2UsingGETValidateBeforeCall(apiKey, authToken, ct0, cursor, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResultT>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDMSListV2UsingPOST
     * @param apiKey  (required)
     * @param authToken  (required)
     * @param ct0  (required)
     * @param cursor  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDMSListV2UsingPOSTCall(String apiKey, String authToken, String ct0, String cursor, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/base/apitools/getDMSListV2";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (apiKey != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("apiKey", apiKey));
        if (authToken != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("auth_token", authToken));
        if (ct0 != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ct0", ct0));
        if (cursor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cursor", cursor));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDMSListV2UsingPOSTValidateBeforeCall(String apiKey, String authToken, String ct0, String cursor, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling getDMSListV2UsingPOST(Async)");
        }
        
        // verify the required parameter 'authToken' is set
        if (authToken == null) {
            throw new ApiException("Missing the required parameter 'authToken' when calling getDMSListV2UsingPOST(Async)");
        }
        
        // verify the required parameter 'ct0' is set
        if (ct0 == null) {
            throw new ApiException("Missing the required parameter 'ct0' when calling getDMSListV2UsingPOST(Async)");
        }
        
        // verify the required parameter 'cursor' is set
        if (cursor == null) {
            throw new ApiException("Missing the required parameter 'cursor' when calling getDMSListV2UsingPOST(Async)");
        }
        

        com.squareup.okhttp.Call call = getDMSListV2UsingPOSTCall(apiKey, authToken, ct0, cursor, progressListener, progressRequestListener);
        return call;

    }

    /**
     * get DMS List
     * 
     * @param apiKey  (required)
     * @param authToken  (required)
     * @param ct0  (required)
     * @param cursor  (required)
     * @return ResultT
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResultT getDMSListV2UsingPOST(String apiKey, String authToken, String ct0, String cursor) throws ApiException {
        ApiResponse<ResultT> resp = getDMSListV2UsingPOSTWithHttpInfo(apiKey, authToken, ct0, cursor);
        return resp.getData();
    }

    /**
     * get DMS List
     * 
     * @param apiKey  (required)
     * @param authToken  (required)
     * @param ct0  (required)
     * @param cursor  (required)
     * @return ApiResponse&lt;ResultT&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResultT> getDMSListV2UsingPOSTWithHttpInfo(String apiKey, String authToken, String ct0, String cursor) throws ApiException {
        com.squareup.okhttp.Call call = getDMSListV2UsingPOSTValidateBeforeCall(apiKey, authToken, ct0, cursor, null, null);
        Type localVarReturnType = new TypeToken<ResultT>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * get DMS List (asynchronously)
     * 
     * @param apiKey  (required)
     * @param authToken  (required)
     * @param ct0  (required)
     * @param cursor  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDMSListV2UsingPOSTAsync(String apiKey, String authToken, String ct0, String cursor, final ApiCallback<ResultT> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDMSListV2UsingPOSTValidateBeforeCall(apiKey, authToken, ct0, cursor, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResultT>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDMSUsingGET
     * @param apiKey  (required)
     * @param authToken  (required)
     * @param ct0  (required)
     * @param id  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDMSUsingGETCall(String apiKey, String authToken, String ct0, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/base/apitools/getDMS";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (apiKey != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("apiKey", apiKey));
        if (authToken != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("auth_token", authToken));
        if (ct0 != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ct0", ct0));
        if (id != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("id", id));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDMSUsingGETValidateBeforeCall(String apiKey, String authToken, String ct0, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling getDMSUsingGET(Async)");
        }
        
        // verify the required parameter 'authToken' is set
        if (authToken == null) {
            throw new ApiException("Missing the required parameter 'authToken' when calling getDMSUsingGET(Async)");
        }
        
        // verify the required parameter 'ct0' is set
        if (ct0 == null) {
            throw new ApiException("Missing the required parameter 'ct0' when calling getDMSUsingGET(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getDMSUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = getDMSUsingGETCall(apiKey, authToken, ct0, id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * receiving events
     * See details https://developer.twitter.com/en/docs/twitter-api/v1/direct-messages/sending-and-receiving/api-reference/get-event&lt;br&gt;  how to get &lt;b&gt;auth_token and ct0&lt;/b&gt;? &lt;br&gt; https://twitter.com/chen22218/status/1722138510680043555 
     * @param apiKey  (required)
     * @param authToken  (required)
     * @param ct0  (required)
     * @param id  (required)
     * @return ResultT
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResultT getDMSUsingGET(String apiKey, String authToken, String ct0, String id) throws ApiException {
        ApiResponse<ResultT> resp = getDMSUsingGETWithHttpInfo(apiKey, authToken, ct0, id);
        return resp.getData();
    }

    /**
     * receiving events
     * See details https://developer.twitter.com/en/docs/twitter-api/v1/direct-messages/sending-and-receiving/api-reference/get-event&lt;br&gt;  how to get &lt;b&gt;auth_token and ct0&lt;/b&gt;? &lt;br&gt; https://twitter.com/chen22218/status/1722138510680043555 
     * @param apiKey  (required)
     * @param authToken  (required)
     * @param ct0  (required)
     * @param id  (required)
     * @return ApiResponse&lt;ResultT&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResultT> getDMSUsingGETWithHttpInfo(String apiKey, String authToken, String ct0, String id) throws ApiException {
        com.squareup.okhttp.Call call = getDMSUsingGETValidateBeforeCall(apiKey, authToken, ct0, id, null, null);
        Type localVarReturnType = new TypeToken<ResultT>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * receiving events (asynchronously)
     * See details https://developer.twitter.com/en/docs/twitter-api/v1/direct-messages/sending-and-receiving/api-reference/get-event&lt;br&gt;  how to get &lt;b&gt;auth_token and ct0&lt;/b&gt;? &lt;br&gt; https://twitter.com/chen22218/status/1722138510680043555 
     * @param apiKey  (required)
     * @param authToken  (required)
     * @param ct0  (required)
     * @param id  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDMSUsingGETAsync(String apiKey, String authToken, String ct0, String id, final ApiCallback<ResultT> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDMSUsingGETValidateBeforeCall(apiKey, authToken, ct0, id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResultT>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDMSUsingPOST
     * @param apiKey  (required)
     * @param authToken  (required)
     * @param ct0  (required)
     * @param id  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDMSUsingPOSTCall(String apiKey, String authToken, String ct0, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/base/apitools/getDMS";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (apiKey != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("apiKey", apiKey));
        if (authToken != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("auth_token", authToken));
        if (ct0 != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ct0", ct0));
        if (id != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("id", id));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDMSUsingPOSTValidateBeforeCall(String apiKey, String authToken, String ct0, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling getDMSUsingPOST(Async)");
        }
        
        // verify the required parameter 'authToken' is set
        if (authToken == null) {
            throw new ApiException("Missing the required parameter 'authToken' when calling getDMSUsingPOST(Async)");
        }
        
        // verify the required parameter 'ct0' is set
        if (ct0 == null) {
            throw new ApiException("Missing the required parameter 'ct0' when calling getDMSUsingPOST(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getDMSUsingPOST(Async)");
        }
        

        com.squareup.okhttp.Call call = getDMSUsingPOSTCall(apiKey, authToken, ct0, id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * receiving events
     * See details https://developer.twitter.com/en/docs/twitter-api/v1/direct-messages/sending-and-receiving/api-reference/get-event&lt;br&gt;  how to get &lt;b&gt;auth_token and ct0&lt;/b&gt;? &lt;br&gt; https://twitter.com/chen22218/status/1722138510680043555 
     * @param apiKey  (required)
     * @param authToken  (required)
     * @param ct0  (required)
     * @param id  (required)
     * @return ResultT
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResultT getDMSUsingPOST(String apiKey, String authToken, String ct0, String id) throws ApiException {
        ApiResponse<ResultT> resp = getDMSUsingPOSTWithHttpInfo(apiKey, authToken, ct0, id);
        return resp.getData();
    }

    /**
     * receiving events
     * See details https://developer.twitter.com/en/docs/twitter-api/v1/direct-messages/sending-and-receiving/api-reference/get-event&lt;br&gt;  how to get &lt;b&gt;auth_token and ct0&lt;/b&gt;? &lt;br&gt; https://twitter.com/chen22218/status/1722138510680043555 
     * @param apiKey  (required)
     * @param authToken  (required)
     * @param ct0  (required)
     * @param id  (required)
     * @return ApiResponse&lt;ResultT&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResultT> getDMSUsingPOSTWithHttpInfo(String apiKey, String authToken, String ct0, String id) throws ApiException {
        com.squareup.okhttp.Call call = getDMSUsingPOSTValidateBeforeCall(apiKey, authToken, ct0, id, null, null);
        Type localVarReturnType = new TypeToken<ResultT>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * receiving events (asynchronously)
     * See details https://developer.twitter.com/en/docs/twitter-api/v1/direct-messages/sending-and-receiving/api-reference/get-event&lt;br&gt;  how to get &lt;b&gt;auth_token and ct0&lt;/b&gt;? &lt;br&gt; https://twitter.com/chen22218/status/1722138510680043555 
     * @param apiKey  (required)
     * @param authToken  (required)
     * @param ct0  (required)
     * @param id  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDMSUsingPOSTAsync(String apiKey, String authToken, String ct0, String id, final ApiCallback<ResultT> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDMSUsingPOSTValidateBeforeCall(apiKey, authToken, ct0, id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResultT>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for sendDMSMediaUsingGET
     * @param apiKey  (required)
     * @param attachmentMediaId  (required)
     * @param attachmentType  (required)
     * @param authToken  (required)
     * @param ct0  (required)
     * @param recipientId  (required)
     * @param text  (required)
     * @param type  (required)
     * @param quickReplyType Returns results with an ID less than (that is, older than) or equal to the specified ID. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call sendDMSMediaUsingGETCall(String apiKey, String attachmentMediaId, String attachmentType, String authToken, String ct0, String recipientId, String text, String type, String quickReplyType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/base/apitools/sendDMSMedia";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (apiKey != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("apiKey", apiKey));
        if (attachmentMediaId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("attachment_media_id", attachmentMediaId));
        if (attachmentType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("attachment_type", attachmentType));
        if (authToken != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("auth_token", authToken));
        if (ct0 != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ct0", ct0));
        if (quickReplyType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("quick_reply_type", quickReplyType));
        if (recipientId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("recipient_id", recipientId));
        if (text != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("text", text));
        if (type != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("type", type));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call sendDMSMediaUsingGETValidateBeforeCall(String apiKey, String attachmentMediaId, String attachmentType, String authToken, String ct0, String recipientId, String text, String type, String quickReplyType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling sendDMSMediaUsingGET(Async)");
        }
        
        // verify the required parameter 'attachmentMediaId' is set
        if (attachmentMediaId == null) {
            throw new ApiException("Missing the required parameter 'attachmentMediaId' when calling sendDMSMediaUsingGET(Async)");
        }
        
        // verify the required parameter 'attachmentType' is set
        if (attachmentType == null) {
            throw new ApiException("Missing the required parameter 'attachmentType' when calling sendDMSMediaUsingGET(Async)");
        }
        
        // verify the required parameter 'authToken' is set
        if (authToken == null) {
            throw new ApiException("Missing the required parameter 'authToken' when calling sendDMSMediaUsingGET(Async)");
        }
        
        // verify the required parameter 'ct0' is set
        if (ct0 == null) {
            throw new ApiException("Missing the required parameter 'ct0' when calling sendDMSMediaUsingGET(Async)");
        }
        
        // verify the required parameter 'recipientId' is set
        if (recipientId == null) {
            throw new ApiException("Missing the required parameter 'recipientId' when calling sendDMSMediaUsingGET(Async)");
        }
        
        // verify the required parameter 'text' is set
        if (text == null) {
            throw new ApiException("Missing the required parameter 'text' when calling sendDMSMediaUsingGET(Async)");
        }
        
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling sendDMSMediaUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = sendDMSMediaUsingGETCall(apiKey, attachmentMediaId, attachmentType, authToken, ct0, recipientId, text, type, quickReplyType, progressListener, progressRequestListener);
        return call;

    }

    /**
     * sendDMSMedia events.
     * See details https://developer.twitter.com/en/docs/twitter-api/v1/direct-messages/sending-and-receiving/api-reference/new-event&lt;br&gt;  how to get &lt;b&gt;auth_token and ct0&lt;/b&gt;? &lt;br&gt; https://twitter.com/chen22218/status/1722138510680043555 
     * @param apiKey  (required)
     * @param attachmentMediaId  (required)
     * @param attachmentType  (required)
     * @param authToken  (required)
     * @param ct0  (required)
     * @param recipientId  (required)
     * @param text  (required)
     * @param type  (required)
     * @param quickReplyType Returns results with an ID less than (that is, older than) or equal to the specified ID. (optional)
     * @return ResultT
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResultT sendDMSMediaUsingGET(String apiKey, String attachmentMediaId, String attachmentType, String authToken, String ct0, String recipientId, String text, String type, String quickReplyType) throws ApiException {
        ApiResponse<ResultT> resp = sendDMSMediaUsingGETWithHttpInfo(apiKey, attachmentMediaId, attachmentType, authToken, ct0, recipientId, text, type, quickReplyType);
        return resp.getData();
    }

    /**
     * sendDMSMedia events.
     * See details https://developer.twitter.com/en/docs/twitter-api/v1/direct-messages/sending-and-receiving/api-reference/new-event&lt;br&gt;  how to get &lt;b&gt;auth_token and ct0&lt;/b&gt;? &lt;br&gt; https://twitter.com/chen22218/status/1722138510680043555 
     * @param apiKey  (required)
     * @param attachmentMediaId  (required)
     * @param attachmentType  (required)
     * @param authToken  (required)
     * @param ct0  (required)
     * @param recipientId  (required)
     * @param text  (required)
     * @param type  (required)
     * @param quickReplyType Returns results with an ID less than (that is, older than) or equal to the specified ID. (optional)
     * @return ApiResponse&lt;ResultT&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResultT> sendDMSMediaUsingGETWithHttpInfo(String apiKey, String attachmentMediaId, String attachmentType, String authToken, String ct0, String recipientId, String text, String type, String quickReplyType) throws ApiException {
        com.squareup.okhttp.Call call = sendDMSMediaUsingGETValidateBeforeCall(apiKey, attachmentMediaId, attachmentType, authToken, ct0, recipientId, text, type, quickReplyType, null, null);
        Type localVarReturnType = new TypeToken<ResultT>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * sendDMSMedia events. (asynchronously)
     * See details https://developer.twitter.com/en/docs/twitter-api/v1/direct-messages/sending-and-receiving/api-reference/new-event&lt;br&gt;  how to get &lt;b&gt;auth_token and ct0&lt;/b&gt;? &lt;br&gt; https://twitter.com/chen22218/status/1722138510680043555 
     * @param apiKey  (required)
     * @param attachmentMediaId  (required)
     * @param attachmentType  (required)
     * @param authToken  (required)
     * @param ct0  (required)
     * @param recipientId  (required)
     * @param text  (required)
     * @param type  (required)
     * @param quickReplyType Returns results with an ID less than (that is, older than) or equal to the specified ID. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call sendDMSMediaUsingGETAsync(String apiKey, String attachmentMediaId, String attachmentType, String authToken, String ct0, String recipientId, String text, String type, String quickReplyType, final ApiCallback<ResultT> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = sendDMSMediaUsingGETValidateBeforeCall(apiKey, attachmentMediaId, attachmentType, authToken, ct0, recipientId, text, type, quickReplyType, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResultT>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for sendDMSMediaUsingPOST
     * @param apiKey  (required)
     * @param attachmentMediaId  (required)
     * @param attachmentType  (required)
     * @param authToken  (required)
     * @param ct0  (required)
     * @param recipientId  (required)
     * @param text  (required)
     * @param type  (required)
     * @param quickReplyType Returns results with an ID less than (that is, older than) or equal to the specified ID. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call sendDMSMediaUsingPOSTCall(String apiKey, String attachmentMediaId, String attachmentType, String authToken, String ct0, String recipientId, String text, String type, String quickReplyType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/base/apitools/sendDMSMedia";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (apiKey != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("apiKey", apiKey));
        if (attachmentMediaId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("attachment_media_id", attachmentMediaId));
        if (attachmentType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("attachment_type", attachmentType));
        if (authToken != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("auth_token", authToken));
        if (ct0 != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ct0", ct0));
        if (quickReplyType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("quick_reply_type", quickReplyType));
        if (recipientId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("recipient_id", recipientId));
        if (text != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("text", text));
        if (type != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("type", type));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call sendDMSMediaUsingPOSTValidateBeforeCall(String apiKey, String attachmentMediaId, String attachmentType, String authToken, String ct0, String recipientId, String text, String type, String quickReplyType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling sendDMSMediaUsingPOST(Async)");
        }
        
        // verify the required parameter 'attachmentMediaId' is set
        if (attachmentMediaId == null) {
            throw new ApiException("Missing the required parameter 'attachmentMediaId' when calling sendDMSMediaUsingPOST(Async)");
        }
        
        // verify the required parameter 'attachmentType' is set
        if (attachmentType == null) {
            throw new ApiException("Missing the required parameter 'attachmentType' when calling sendDMSMediaUsingPOST(Async)");
        }
        
        // verify the required parameter 'authToken' is set
        if (authToken == null) {
            throw new ApiException("Missing the required parameter 'authToken' when calling sendDMSMediaUsingPOST(Async)");
        }
        
        // verify the required parameter 'ct0' is set
        if (ct0 == null) {
            throw new ApiException("Missing the required parameter 'ct0' when calling sendDMSMediaUsingPOST(Async)");
        }
        
        // verify the required parameter 'recipientId' is set
        if (recipientId == null) {
            throw new ApiException("Missing the required parameter 'recipientId' when calling sendDMSMediaUsingPOST(Async)");
        }
        
        // verify the required parameter 'text' is set
        if (text == null) {
            throw new ApiException("Missing the required parameter 'text' when calling sendDMSMediaUsingPOST(Async)");
        }
        
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling sendDMSMediaUsingPOST(Async)");
        }
        

        com.squareup.okhttp.Call call = sendDMSMediaUsingPOSTCall(apiKey, attachmentMediaId, attachmentType, authToken, ct0, recipientId, text, type, quickReplyType, progressListener, progressRequestListener);
        return call;

    }

    /**
     * sendDMSMedia events.
     * See details https://developer.twitter.com/en/docs/twitter-api/v1/direct-messages/sending-and-receiving/api-reference/new-event&lt;br&gt;  how to get &lt;b&gt;auth_token and ct0&lt;/b&gt;? &lt;br&gt; https://twitter.com/chen22218/status/1722138510680043555 
     * @param apiKey  (required)
     * @param attachmentMediaId  (required)
     * @param attachmentType  (required)
     * @param authToken  (required)
     * @param ct0  (required)
     * @param recipientId  (required)
     * @param text  (required)
     * @param type  (required)
     * @param quickReplyType Returns results with an ID less than (that is, older than) or equal to the specified ID. (optional)
     * @return ResultT
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResultT sendDMSMediaUsingPOST(String apiKey, String attachmentMediaId, String attachmentType, String authToken, String ct0, String recipientId, String text, String type, String quickReplyType) throws ApiException {
        ApiResponse<ResultT> resp = sendDMSMediaUsingPOSTWithHttpInfo(apiKey, attachmentMediaId, attachmentType, authToken, ct0, recipientId, text, type, quickReplyType);
        return resp.getData();
    }

    /**
     * sendDMSMedia events.
     * See details https://developer.twitter.com/en/docs/twitter-api/v1/direct-messages/sending-and-receiving/api-reference/new-event&lt;br&gt;  how to get &lt;b&gt;auth_token and ct0&lt;/b&gt;? &lt;br&gt; https://twitter.com/chen22218/status/1722138510680043555 
     * @param apiKey  (required)
     * @param attachmentMediaId  (required)
     * @param attachmentType  (required)
     * @param authToken  (required)
     * @param ct0  (required)
     * @param recipientId  (required)
     * @param text  (required)
     * @param type  (required)
     * @param quickReplyType Returns results with an ID less than (that is, older than) or equal to the specified ID. (optional)
     * @return ApiResponse&lt;ResultT&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResultT> sendDMSMediaUsingPOSTWithHttpInfo(String apiKey, String attachmentMediaId, String attachmentType, String authToken, String ct0, String recipientId, String text, String type, String quickReplyType) throws ApiException {
        com.squareup.okhttp.Call call = sendDMSMediaUsingPOSTValidateBeforeCall(apiKey, attachmentMediaId, attachmentType, authToken, ct0, recipientId, text, type, quickReplyType, null, null);
        Type localVarReturnType = new TypeToken<ResultT>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * sendDMSMedia events. (asynchronously)
     * See details https://developer.twitter.com/en/docs/twitter-api/v1/direct-messages/sending-and-receiving/api-reference/new-event&lt;br&gt;  how to get &lt;b&gt;auth_token and ct0&lt;/b&gt;? &lt;br&gt; https://twitter.com/chen22218/status/1722138510680043555 
     * @param apiKey  (required)
     * @param attachmentMediaId  (required)
     * @param attachmentType  (required)
     * @param authToken  (required)
     * @param ct0  (required)
     * @param recipientId  (required)
     * @param text  (required)
     * @param type  (required)
     * @param quickReplyType Returns results with an ID less than (that is, older than) or equal to the specified ID. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call sendDMSMediaUsingPOSTAsync(String apiKey, String attachmentMediaId, String attachmentType, String authToken, String ct0, String recipientId, String text, String type, String quickReplyType, final ApiCallback<ResultT> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = sendDMSMediaUsingPOSTValidateBeforeCall(apiKey, attachmentMediaId, attachmentType, authToken, ct0, recipientId, text, type, quickReplyType, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResultT>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for sendDMSUsingGET
     * @param apiKey  (required)
     * @param authToken  (required)
     * @param ct0  (required)
     * @param recipientId  (required)
     * @param text  (required)
     * @param type  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call sendDMSUsingGETCall(String apiKey, String authToken, String ct0, String recipientId, String text, String type, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/base/apitools/sendDMS";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (apiKey != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("apiKey", apiKey));
        if (authToken != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("auth_token", authToken));
        if (ct0 != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ct0", ct0));
        if (recipientId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("recipient_id", recipientId));
        if (text != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("text", text));
        if (type != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("type", type));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call sendDMSUsingGETValidateBeforeCall(String apiKey, String authToken, String ct0, String recipientId, String text, String type, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling sendDMSUsingGET(Async)");
        }
        
        // verify the required parameter 'authToken' is set
        if (authToken == null) {
            throw new ApiException("Missing the required parameter 'authToken' when calling sendDMSUsingGET(Async)");
        }
        
        // verify the required parameter 'ct0' is set
        if (ct0 == null) {
            throw new ApiException("Missing the required parameter 'ct0' when calling sendDMSUsingGET(Async)");
        }
        
        // verify the required parameter 'recipientId' is set
        if (recipientId == null) {
            throw new ApiException("Missing the required parameter 'recipientId' when calling sendDMSUsingGET(Async)");
        }
        
        // verify the required parameter 'text' is set
        if (text == null) {
            throw new ApiException("Missing the required parameter 'text' when calling sendDMSUsingGET(Async)");
        }
        
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling sendDMSUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = sendDMSUsingGETCall(apiKey, authToken, ct0, recipientId, text, type, progressListener, progressRequestListener);
        return call;

    }

    /**
     * sendDMS events.
     * See details https://developer.twitter.com/en/docs/twitter-api/v1/direct-messages/sending-and-receiving/api-reference/new-event&lt;br&gt;  how to get &lt;b&gt;auth_token and ct0&lt;/b&gt;? &lt;br&gt; https://twitter.com/chen22218/status/1722138510680043555 
     * @param apiKey  (required)
     * @param authToken  (required)
     * @param ct0  (required)
     * @param recipientId  (required)
     * @param text  (required)
     * @param type  (required)
     * @return ResultT
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResultT sendDMSUsingGET(String apiKey, String authToken, String ct0, String recipientId, String text, String type) throws ApiException {
        ApiResponse<ResultT> resp = sendDMSUsingGETWithHttpInfo(apiKey, authToken, ct0, recipientId, text, type);
        return resp.getData();
    }

    /**
     * sendDMS events.
     * See details https://developer.twitter.com/en/docs/twitter-api/v1/direct-messages/sending-and-receiving/api-reference/new-event&lt;br&gt;  how to get &lt;b&gt;auth_token and ct0&lt;/b&gt;? &lt;br&gt; https://twitter.com/chen22218/status/1722138510680043555 
     * @param apiKey  (required)
     * @param authToken  (required)
     * @param ct0  (required)
     * @param recipientId  (required)
     * @param text  (required)
     * @param type  (required)
     * @return ApiResponse&lt;ResultT&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResultT> sendDMSUsingGETWithHttpInfo(String apiKey, String authToken, String ct0, String recipientId, String text, String type) throws ApiException {
        com.squareup.okhttp.Call call = sendDMSUsingGETValidateBeforeCall(apiKey, authToken, ct0, recipientId, text, type, null, null);
        Type localVarReturnType = new TypeToken<ResultT>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * sendDMS events. (asynchronously)
     * See details https://developer.twitter.com/en/docs/twitter-api/v1/direct-messages/sending-and-receiving/api-reference/new-event&lt;br&gt;  how to get &lt;b&gt;auth_token and ct0&lt;/b&gt;? &lt;br&gt; https://twitter.com/chen22218/status/1722138510680043555 
     * @param apiKey  (required)
     * @param authToken  (required)
     * @param ct0  (required)
     * @param recipientId  (required)
     * @param text  (required)
     * @param type  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call sendDMSUsingGETAsync(String apiKey, String authToken, String ct0, String recipientId, String text, String type, final ApiCallback<ResultT> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = sendDMSUsingGETValidateBeforeCall(apiKey, authToken, ct0, recipientId, text, type, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResultT>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for sendDMSUsingPOST
     * @param apiKey  (required)
     * @param authToken  (required)
     * @param ct0  (required)
     * @param recipientId  (required)
     * @param text  (required)
     * @param type  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call sendDMSUsingPOSTCall(String apiKey, String authToken, String ct0, String recipientId, String text, String type, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/base/apitools/sendDMS";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (apiKey != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("apiKey", apiKey));
        if (authToken != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("auth_token", authToken));
        if (ct0 != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ct0", ct0));
        if (recipientId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("recipient_id", recipientId));
        if (text != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("text", text));
        if (type != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("type", type));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call sendDMSUsingPOSTValidateBeforeCall(String apiKey, String authToken, String ct0, String recipientId, String text, String type, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling sendDMSUsingPOST(Async)");
        }
        
        // verify the required parameter 'authToken' is set
        if (authToken == null) {
            throw new ApiException("Missing the required parameter 'authToken' when calling sendDMSUsingPOST(Async)");
        }
        
        // verify the required parameter 'ct0' is set
        if (ct0 == null) {
            throw new ApiException("Missing the required parameter 'ct0' when calling sendDMSUsingPOST(Async)");
        }
        
        // verify the required parameter 'recipientId' is set
        if (recipientId == null) {
            throw new ApiException("Missing the required parameter 'recipientId' when calling sendDMSUsingPOST(Async)");
        }
        
        // verify the required parameter 'text' is set
        if (text == null) {
            throw new ApiException("Missing the required parameter 'text' when calling sendDMSUsingPOST(Async)");
        }
        
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling sendDMSUsingPOST(Async)");
        }
        

        com.squareup.okhttp.Call call = sendDMSUsingPOSTCall(apiKey, authToken, ct0, recipientId, text, type, progressListener, progressRequestListener);
        return call;

    }

    /**
     * sendDMS events.
     * See details https://developer.twitter.com/en/docs/twitter-api/v1/direct-messages/sending-and-receiving/api-reference/new-event&lt;br&gt;  how to get &lt;b&gt;auth_token and ct0&lt;/b&gt;? &lt;br&gt; https://twitter.com/chen22218/status/1722138510680043555 
     * @param apiKey  (required)
     * @param authToken  (required)
     * @param ct0  (required)
     * @param recipientId  (required)
     * @param text  (required)
     * @param type  (required)
     * @return ResultT
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResultT sendDMSUsingPOST(String apiKey, String authToken, String ct0, String recipientId, String text, String type) throws ApiException {
        ApiResponse<ResultT> resp = sendDMSUsingPOSTWithHttpInfo(apiKey, authToken, ct0, recipientId, text, type);
        return resp.getData();
    }

    /**
     * sendDMS events.
     * See details https://developer.twitter.com/en/docs/twitter-api/v1/direct-messages/sending-and-receiving/api-reference/new-event&lt;br&gt;  how to get &lt;b&gt;auth_token and ct0&lt;/b&gt;? &lt;br&gt; https://twitter.com/chen22218/status/1722138510680043555 
     * @param apiKey  (required)
     * @param authToken  (required)
     * @param ct0  (required)
     * @param recipientId  (required)
     * @param text  (required)
     * @param type  (required)
     * @return ApiResponse&lt;ResultT&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResultT> sendDMSUsingPOSTWithHttpInfo(String apiKey, String authToken, String ct0, String recipientId, String text, String type) throws ApiException {
        com.squareup.okhttp.Call call = sendDMSUsingPOSTValidateBeforeCall(apiKey, authToken, ct0, recipientId, text, type, null, null);
        Type localVarReturnType = new TypeToken<ResultT>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * sendDMS events. (asynchronously)
     * See details https://developer.twitter.com/en/docs/twitter-api/v1/direct-messages/sending-and-receiving/api-reference/new-event&lt;br&gt;  how to get &lt;b&gt;auth_token and ct0&lt;/b&gt;? &lt;br&gt; https://twitter.com/chen22218/status/1722138510680043555 
     * @param apiKey  (required)
     * @param authToken  (required)
     * @param ct0  (required)
     * @param recipientId  (required)
     * @param text  (required)
     * @param type  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call sendDMSUsingPOSTAsync(String apiKey, String authToken, String ct0, String recipientId, String text, String type, final ApiCallback<ResultT> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = sendDMSUsingPOSTValidateBeforeCall(apiKey, authToken, ct0, recipientId, text, type, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResultT>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for uploadMediaDMUsingGET
     * @param apiKey  (required)
     * @param authToken  (required)
     * @param ct0  (required)
     * @param file file (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call uploadMediaDMUsingGETCall(String apiKey, String authToken, String ct0, File file, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/base/apitools/uploadMediaDM";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (apiKey != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("apiKey", apiKey));
        if (authToken != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("auth_token", authToken));
        if (ct0 != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ct0", ct0));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (file != null)
        localVarFormParams.put("file", file);

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call uploadMediaDMUsingGETValidateBeforeCall(String apiKey, String authToken, String ct0, File file, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling uploadMediaDMUsingGET(Async)");
        }
        
        // verify the required parameter 'authToken' is set
        if (authToken == null) {
            throw new ApiException("Missing the required parameter 'authToken' when calling uploadMediaDMUsingGET(Async)");
        }
        
        // verify the required parameter 'ct0' is set
        if (ct0 == null) {
            throw new ApiException("Missing the required parameter 'ct0' when calling uploadMediaDMUsingGET(Async)");
        }
        
        // verify the required parameter 'file' is set
        if (file == null) {
            throw new ApiException("Missing the required parameter 'file' when calling uploadMediaDMUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = uploadMediaDMUsingGETCall(apiKey, authToken, ct0, file, progressListener, progressRequestListener);
        return call;

    }

    /**
     * upload media for DM 
     * 
     * @param apiKey  (required)
     * @param authToken  (required)
     * @param ct0  (required)
     * @param file file (required)
     * @return ResultT
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResultT uploadMediaDMUsingGET(String apiKey, String authToken, String ct0, File file) throws ApiException {
        ApiResponse<ResultT> resp = uploadMediaDMUsingGETWithHttpInfo(apiKey, authToken, ct0, file);
        return resp.getData();
    }

    /**
     * upload media for DM 
     * 
     * @param apiKey  (required)
     * @param authToken  (required)
     * @param ct0  (required)
     * @param file file (required)
     * @return ApiResponse&lt;ResultT&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResultT> uploadMediaDMUsingGETWithHttpInfo(String apiKey, String authToken, String ct0, File file) throws ApiException {
        com.squareup.okhttp.Call call = uploadMediaDMUsingGETValidateBeforeCall(apiKey, authToken, ct0, file, null, null);
        Type localVarReturnType = new TypeToken<ResultT>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * upload media for DM  (asynchronously)
     * 
     * @param apiKey  (required)
     * @param authToken  (required)
     * @param ct0  (required)
     * @param file file (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call uploadMediaDMUsingGETAsync(String apiKey, String authToken, String ct0, File file, final ApiCallback<ResultT> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = uploadMediaDMUsingGETValidateBeforeCall(apiKey, authToken, ct0, file, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResultT>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for uploadMediaDMUsingPOST
     * @param apiKey  (required)
     * @param authToken  (required)
     * @param ct0  (required)
     * @param file file (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call uploadMediaDMUsingPOSTCall(String apiKey, String authToken, String ct0, File file, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/base/apitools/uploadMediaDM";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (apiKey != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("apiKey", apiKey));
        if (authToken != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("auth_token", authToken));
        if (ct0 != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ct0", ct0));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (file != null)
        localVarFormParams.put("file", file);

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call uploadMediaDMUsingPOSTValidateBeforeCall(String apiKey, String authToken, String ct0, File file, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling uploadMediaDMUsingPOST(Async)");
        }
        
        // verify the required parameter 'authToken' is set
        if (authToken == null) {
            throw new ApiException("Missing the required parameter 'authToken' when calling uploadMediaDMUsingPOST(Async)");
        }
        
        // verify the required parameter 'ct0' is set
        if (ct0 == null) {
            throw new ApiException("Missing the required parameter 'ct0' when calling uploadMediaDMUsingPOST(Async)");
        }
        
        // verify the required parameter 'file' is set
        if (file == null) {
            throw new ApiException("Missing the required parameter 'file' when calling uploadMediaDMUsingPOST(Async)");
        }
        

        com.squareup.okhttp.Call call = uploadMediaDMUsingPOSTCall(apiKey, authToken, ct0, file, progressListener, progressRequestListener);
        return call;

    }

    /**
     * upload media for DM 
     * 
     * @param apiKey  (required)
     * @param authToken  (required)
     * @param ct0  (required)
     * @param file file (required)
     * @return ResultT
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResultT uploadMediaDMUsingPOST(String apiKey, String authToken, String ct0, File file) throws ApiException {
        ApiResponse<ResultT> resp = uploadMediaDMUsingPOSTWithHttpInfo(apiKey, authToken, ct0, file);
        return resp.getData();
    }

    /**
     * upload media for DM 
     * 
     * @param apiKey  (required)
     * @param authToken  (required)
     * @param ct0  (required)
     * @param file file (required)
     * @return ApiResponse&lt;ResultT&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResultT> uploadMediaDMUsingPOSTWithHttpInfo(String apiKey, String authToken, String ct0, File file) throws ApiException {
        com.squareup.okhttp.Call call = uploadMediaDMUsingPOSTValidateBeforeCall(apiKey, authToken, ct0, file, null, null);
        Type localVarReturnType = new TypeToken<ResultT>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * upload media for DM  (asynchronously)
     * 
     * @param apiKey  (required)
     * @param authToken  (required)
     * @param ct0  (required)
     * @param file file (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call uploadMediaDMUsingPOSTAsync(String apiKey, String authToken, String ct0, File file, final ApiCallback<ResultT> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = uploadMediaDMUsingPOSTValidateBeforeCall(apiKey, authToken, ct0, file, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResultT>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
