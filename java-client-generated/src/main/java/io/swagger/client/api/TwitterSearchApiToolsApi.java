/*
 * Utools_twitter_tools_api
 * X (Twitter) API for search, Tweets, users, followers, images, media and more. Supports some v1.1 and v2 API endpoints, with more to come in the future!
 *
 * OpenAPI spec version: 1.1
 * Contact: huojiecs@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.ResultT;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TwitterSearchApiToolsApi {
    private ApiClient apiClient;

    public TwitterSearchApiToolsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TwitterSearchApiToolsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for searchUsingGET
     * @param apiKey  (required)
     * @param words  (required)
     * @param any Any of these words (Example: cats dogs �� contains either ��cats�� or ��dogs�� (or both)) (optional)
     * @param cursor cursor (Example: AACCgACF91iNpzAJxAKAAMX3WI2nL-x4AgABAAAAA ) (optional)
     * @param from From these accounts (Example: @Twitter �� sent from @Twitter) (optional)
     * @param likes Minimum likes (Example: 280 �� Tweets with at least 280 likes)) (optional)
     * @param mentioning Mentioning these accounts (Example: @SFBART @Caltrain �� mentions @SFBART or mentions @Caltrain) (optional)
     * @param none None of these words (Example: cats dogs �� does not contain ��cats�� and does not contain ��dogs��) (optional)
     * @param phrase This exact phrase (Example: happy hour �� contains the exact phrase ��happy hour��) (optional)
     * @param replies Minimum replies (Example: 280 �� Tweets with at least 280 replies) (optional)
     * @param retweets Minimum retweets (Example: 280 �� Tweets with at least 280 likes) (optional)
     * @param since start time (Example: 2020-01-01 ) (optional)
     * @param tag These hashtags (Example: #ThrowbackThursday �� contains the hashtag #ThrowbackThursday) (optional)
     * @param to To these accounts (Example: @Twitter �� sent in reply to @Twitter) (optional)
     * @param until end time (Example: 2021-02-02) (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call searchUsingGETCall(String apiKey, String words, String any, String cursor, String from, String likes, String mentioning, String none, String phrase, String replies, String retweets, String since, String tag, String to, String until, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/base/apitools/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (any != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("any", any));
        if (apiKey != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("apiKey", apiKey));
        if (cursor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cursor", cursor));
        if (from != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("from", from));
        if (likes != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("likes", likes));
        if (mentioning != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("mentioning", mentioning));
        if (none != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("none", none));
        if (phrase != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("phrase", phrase));
        if (replies != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("replies", replies));
        if (retweets != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("retweets", retweets));
        if (since != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("since", since));
        if (tag != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("tag", tag));
        if (to != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("to", to));
        if (until != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("until", until));
        if (words != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("words", words));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call searchUsingGETValidateBeforeCall(String apiKey, String words, String any, String cursor, String from, String likes, String mentioning, String none, String phrase, String replies, String retweets, String since, String tag, String to, String until, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling searchUsingGET(Async)");
        }
        
        // verify the required parameter 'words' is set
        if (words == null) {
            throw new ApiException("Missing the required parameter 'words' when calling searchUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = searchUsingGETCall(apiKey, words, any, cursor, from, likes, mentioning, none, phrase, replies, retweets, since, tag, to, until, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Advanced Search
     * 
     * @param apiKey  (required)
     * @param words  (required)
     * @param any Any of these words (Example: cats dogs �� contains either ��cats�� or ��dogs�� (or both)) (optional)
     * @param cursor cursor (Example: AACCgACF91iNpzAJxAKAAMX3WI2nL-x4AgABAAAAA ) (optional)
     * @param from From these accounts (Example: @Twitter �� sent from @Twitter) (optional)
     * @param likes Minimum likes (Example: 280 �� Tweets with at least 280 likes)) (optional)
     * @param mentioning Mentioning these accounts (Example: @SFBART @Caltrain �� mentions @SFBART or mentions @Caltrain) (optional)
     * @param none None of these words (Example: cats dogs �� does not contain ��cats�� and does not contain ��dogs��) (optional)
     * @param phrase This exact phrase (Example: happy hour �� contains the exact phrase ��happy hour��) (optional)
     * @param replies Minimum replies (Example: 280 �� Tweets with at least 280 replies) (optional)
     * @param retweets Minimum retweets (Example: 280 �� Tweets with at least 280 likes) (optional)
     * @param since start time (Example: 2020-01-01 ) (optional)
     * @param tag These hashtags (Example: #ThrowbackThursday �� contains the hashtag #ThrowbackThursday) (optional)
     * @param to To these accounts (Example: @Twitter �� sent in reply to @Twitter) (optional)
     * @param until end time (Example: 2021-02-02) (optional)
     * @return ResultT
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResultT searchUsingGET(String apiKey, String words, String any, String cursor, String from, String likes, String mentioning, String none, String phrase, String replies, String retweets, String since, String tag, String to, String until) throws ApiException {
        ApiResponse<ResultT> resp = searchUsingGETWithHttpInfo(apiKey, words, any, cursor, from, likes, mentioning, none, phrase, replies, retweets, since, tag, to, until);
        return resp.getData();
    }

    /**
     * Advanced Search
     * 
     * @param apiKey  (required)
     * @param words  (required)
     * @param any Any of these words (Example: cats dogs �� contains either ��cats�� or ��dogs�� (or both)) (optional)
     * @param cursor cursor (Example: AACCgACF91iNpzAJxAKAAMX3WI2nL-x4AgABAAAAA ) (optional)
     * @param from From these accounts (Example: @Twitter �� sent from @Twitter) (optional)
     * @param likes Minimum likes (Example: 280 �� Tweets with at least 280 likes)) (optional)
     * @param mentioning Mentioning these accounts (Example: @SFBART @Caltrain �� mentions @SFBART or mentions @Caltrain) (optional)
     * @param none None of these words (Example: cats dogs �� does not contain ��cats�� and does not contain ��dogs��) (optional)
     * @param phrase This exact phrase (Example: happy hour �� contains the exact phrase ��happy hour��) (optional)
     * @param replies Minimum replies (Example: 280 �� Tweets with at least 280 replies) (optional)
     * @param retweets Minimum retweets (Example: 280 �� Tweets with at least 280 likes) (optional)
     * @param since start time (Example: 2020-01-01 ) (optional)
     * @param tag These hashtags (Example: #ThrowbackThursday �� contains the hashtag #ThrowbackThursday) (optional)
     * @param to To these accounts (Example: @Twitter �� sent in reply to @Twitter) (optional)
     * @param until end time (Example: 2021-02-02) (optional)
     * @return ApiResponse&lt;ResultT&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResultT> searchUsingGETWithHttpInfo(String apiKey, String words, String any, String cursor, String from, String likes, String mentioning, String none, String phrase, String replies, String retweets, String since, String tag, String to, String until) throws ApiException {
        com.squareup.okhttp.Call call = searchUsingGETValidateBeforeCall(apiKey, words, any, cursor, from, likes, mentioning, none, phrase, replies, retweets, since, tag, to, until, null, null);
        Type localVarReturnType = new TypeToken<ResultT>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Advanced Search (asynchronously)
     * 
     * @param apiKey  (required)
     * @param words  (required)
     * @param any Any of these words (Example: cats dogs �� contains either ��cats�� or ��dogs�� (or both)) (optional)
     * @param cursor cursor (Example: AACCgACF91iNpzAJxAKAAMX3WI2nL-x4AgABAAAAA ) (optional)
     * @param from From these accounts (Example: @Twitter �� sent from @Twitter) (optional)
     * @param likes Minimum likes (Example: 280 �� Tweets with at least 280 likes)) (optional)
     * @param mentioning Mentioning these accounts (Example: @SFBART @Caltrain �� mentions @SFBART or mentions @Caltrain) (optional)
     * @param none None of these words (Example: cats dogs �� does not contain ��cats�� and does not contain ��dogs��) (optional)
     * @param phrase This exact phrase (Example: happy hour �� contains the exact phrase ��happy hour��) (optional)
     * @param replies Minimum replies (Example: 280 �� Tweets with at least 280 replies) (optional)
     * @param retweets Minimum retweets (Example: 280 �� Tweets with at least 280 likes) (optional)
     * @param since start time (Example: 2020-01-01 ) (optional)
     * @param tag These hashtags (Example: #ThrowbackThursday �� contains the hashtag #ThrowbackThursday) (optional)
     * @param to To these accounts (Example: @Twitter �� sent in reply to @Twitter) (optional)
     * @param until end time (Example: 2021-02-02) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call searchUsingGETAsync(String apiKey, String words, String any, String cursor, String from, String likes, String mentioning, String none, String phrase, String replies, String retweets, String since, String tag, String to, String until, final ApiCallback<ResultT> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = searchUsingGETValidateBeforeCall(apiKey, words, any, cursor, from, likes, mentioning, none, phrase, replies, retweets, since, tag, to, until, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResultT>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for searchUsingPOST
     * @param apiKey  (required)
     * @param words  (required)
     * @param any Any of these words (Example: cats dogs �� contains either ��cats�� or ��dogs�� (or both)) (optional)
     * @param cursor cursor (Example: AACCgACF91iNpzAJxAKAAMX3WI2nL-x4AgABAAAAA ) (optional)
     * @param from From these accounts (Example: @Twitter �� sent from @Twitter) (optional)
     * @param likes Minimum likes (Example: 280 �� Tweets with at least 280 likes)) (optional)
     * @param mentioning Mentioning these accounts (Example: @SFBART @Caltrain �� mentions @SFBART or mentions @Caltrain) (optional)
     * @param none None of these words (Example: cats dogs �� does not contain ��cats�� and does not contain ��dogs��) (optional)
     * @param phrase This exact phrase (Example: happy hour �� contains the exact phrase ��happy hour��) (optional)
     * @param replies Minimum replies (Example: 280 �� Tweets with at least 280 replies) (optional)
     * @param retweets Minimum retweets (Example: 280 �� Tweets with at least 280 likes) (optional)
     * @param since start time (Example: 2020-01-01 ) (optional)
     * @param tag These hashtags (Example: #ThrowbackThursday �� contains the hashtag #ThrowbackThursday) (optional)
     * @param to To these accounts (Example: @Twitter �� sent in reply to @Twitter) (optional)
     * @param until end time (Example: 2021-02-02) (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call searchUsingPOSTCall(String apiKey, String words, String any, String cursor, String from, String likes, String mentioning, String none, String phrase, String replies, String retweets, String since, String tag, String to, String until, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/base/apitools/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (any != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("any", any));
        if (apiKey != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("apiKey", apiKey));
        if (cursor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cursor", cursor));
        if (from != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("from", from));
        if (likes != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("likes", likes));
        if (mentioning != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("mentioning", mentioning));
        if (none != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("none", none));
        if (phrase != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("phrase", phrase));
        if (replies != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("replies", replies));
        if (retweets != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("retweets", retweets));
        if (since != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("since", since));
        if (tag != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("tag", tag));
        if (to != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("to", to));
        if (until != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("until", until));
        if (words != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("words", words));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call searchUsingPOSTValidateBeforeCall(String apiKey, String words, String any, String cursor, String from, String likes, String mentioning, String none, String phrase, String replies, String retweets, String since, String tag, String to, String until, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling searchUsingPOST(Async)");
        }
        
        // verify the required parameter 'words' is set
        if (words == null) {
            throw new ApiException("Missing the required parameter 'words' when calling searchUsingPOST(Async)");
        }
        

        com.squareup.okhttp.Call call = searchUsingPOSTCall(apiKey, words, any, cursor, from, likes, mentioning, none, phrase, replies, retweets, since, tag, to, until, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Advanced Search
     * 
     * @param apiKey  (required)
     * @param words  (required)
     * @param any Any of these words (Example: cats dogs �� contains either ��cats�� or ��dogs�� (or both)) (optional)
     * @param cursor cursor (Example: AACCgACF91iNpzAJxAKAAMX3WI2nL-x4AgABAAAAA ) (optional)
     * @param from From these accounts (Example: @Twitter �� sent from @Twitter) (optional)
     * @param likes Minimum likes (Example: 280 �� Tweets with at least 280 likes)) (optional)
     * @param mentioning Mentioning these accounts (Example: @SFBART @Caltrain �� mentions @SFBART or mentions @Caltrain) (optional)
     * @param none None of these words (Example: cats dogs �� does not contain ��cats�� and does not contain ��dogs��) (optional)
     * @param phrase This exact phrase (Example: happy hour �� contains the exact phrase ��happy hour��) (optional)
     * @param replies Minimum replies (Example: 280 �� Tweets with at least 280 replies) (optional)
     * @param retweets Minimum retweets (Example: 280 �� Tweets with at least 280 likes) (optional)
     * @param since start time (Example: 2020-01-01 ) (optional)
     * @param tag These hashtags (Example: #ThrowbackThursday �� contains the hashtag #ThrowbackThursday) (optional)
     * @param to To these accounts (Example: @Twitter �� sent in reply to @Twitter) (optional)
     * @param until end time (Example: 2021-02-02) (optional)
     * @return ResultT
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResultT searchUsingPOST(String apiKey, String words, String any, String cursor, String from, String likes, String mentioning, String none, String phrase, String replies, String retweets, String since, String tag, String to, String until) throws ApiException {
        ApiResponse<ResultT> resp = searchUsingPOSTWithHttpInfo(apiKey, words, any, cursor, from, likes, mentioning, none, phrase, replies, retweets, since, tag, to, until);
        return resp.getData();
    }

    /**
     * Advanced Search
     * 
     * @param apiKey  (required)
     * @param words  (required)
     * @param any Any of these words (Example: cats dogs �� contains either ��cats�� or ��dogs�� (or both)) (optional)
     * @param cursor cursor (Example: AACCgACF91iNpzAJxAKAAMX3WI2nL-x4AgABAAAAA ) (optional)
     * @param from From these accounts (Example: @Twitter �� sent from @Twitter) (optional)
     * @param likes Minimum likes (Example: 280 �� Tweets with at least 280 likes)) (optional)
     * @param mentioning Mentioning these accounts (Example: @SFBART @Caltrain �� mentions @SFBART or mentions @Caltrain) (optional)
     * @param none None of these words (Example: cats dogs �� does not contain ��cats�� and does not contain ��dogs��) (optional)
     * @param phrase This exact phrase (Example: happy hour �� contains the exact phrase ��happy hour��) (optional)
     * @param replies Minimum replies (Example: 280 �� Tweets with at least 280 replies) (optional)
     * @param retweets Minimum retweets (Example: 280 �� Tweets with at least 280 likes) (optional)
     * @param since start time (Example: 2020-01-01 ) (optional)
     * @param tag These hashtags (Example: #ThrowbackThursday �� contains the hashtag #ThrowbackThursday) (optional)
     * @param to To these accounts (Example: @Twitter �� sent in reply to @Twitter) (optional)
     * @param until end time (Example: 2021-02-02) (optional)
     * @return ApiResponse&lt;ResultT&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResultT> searchUsingPOSTWithHttpInfo(String apiKey, String words, String any, String cursor, String from, String likes, String mentioning, String none, String phrase, String replies, String retweets, String since, String tag, String to, String until) throws ApiException {
        com.squareup.okhttp.Call call = searchUsingPOSTValidateBeforeCall(apiKey, words, any, cursor, from, likes, mentioning, none, phrase, replies, retweets, since, tag, to, until, null, null);
        Type localVarReturnType = new TypeToken<ResultT>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Advanced Search (asynchronously)
     * 
     * @param apiKey  (required)
     * @param words  (required)
     * @param any Any of these words (Example: cats dogs �� contains either ��cats�� or ��dogs�� (or both)) (optional)
     * @param cursor cursor (Example: AACCgACF91iNpzAJxAKAAMX3WI2nL-x4AgABAAAAA ) (optional)
     * @param from From these accounts (Example: @Twitter �� sent from @Twitter) (optional)
     * @param likes Minimum likes (Example: 280 �� Tweets with at least 280 likes)) (optional)
     * @param mentioning Mentioning these accounts (Example: @SFBART @Caltrain �� mentions @SFBART or mentions @Caltrain) (optional)
     * @param none None of these words (Example: cats dogs �� does not contain ��cats�� and does not contain ��dogs��) (optional)
     * @param phrase This exact phrase (Example: happy hour �� contains the exact phrase ��happy hour��) (optional)
     * @param replies Minimum replies (Example: 280 �� Tweets with at least 280 replies) (optional)
     * @param retweets Minimum retweets (Example: 280 �� Tweets with at least 280 likes) (optional)
     * @param since start time (Example: 2020-01-01 ) (optional)
     * @param tag These hashtags (Example: #ThrowbackThursday �� contains the hashtag #ThrowbackThursday) (optional)
     * @param to To these accounts (Example: @Twitter �� sent in reply to @Twitter) (optional)
     * @param until end time (Example: 2021-02-02) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call searchUsingPOSTAsync(String apiKey, String words, String any, String cursor, String from, String likes, String mentioning, String none, String phrase, String replies, String retweets, String since, String tag, String to, String until, final ApiCallback<ResultT> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = searchUsingPOSTValidateBeforeCall(apiKey, words, any, cursor, from, likes, mentioning, none, phrase, replies, retweets, since, tag, to, until, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResultT>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for trendsUsingGET
     * @param apiKey  (required)
     * @param id  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call trendsUsingGETCall(String apiKey, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/base/apitools/trends";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (apiKey != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("apiKey", apiKey));
        if (id != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("id", id));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call trendsUsingGETValidateBeforeCall(String apiKey, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling trendsUsingGET(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling trendsUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = trendsUsingGETCall(apiKey, id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * trends Search
     * see details https://developer.twitter.com/en/docs/twitter-api/v1/trends/trends-for-location/api-reference/get-trends-place
     * @param apiKey  (required)
     * @param id  (required)
     * @return ResultT
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResultT trendsUsingGET(String apiKey, String id) throws ApiException {
        ApiResponse<ResultT> resp = trendsUsingGETWithHttpInfo(apiKey, id);
        return resp.getData();
    }

    /**
     * trends Search
     * see details https://developer.twitter.com/en/docs/twitter-api/v1/trends/trends-for-location/api-reference/get-trends-place
     * @param apiKey  (required)
     * @param id  (required)
     * @return ApiResponse&lt;ResultT&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResultT> trendsUsingGETWithHttpInfo(String apiKey, String id) throws ApiException {
        com.squareup.okhttp.Call call = trendsUsingGETValidateBeforeCall(apiKey, id, null, null);
        Type localVarReturnType = new TypeToken<ResultT>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * trends Search (asynchronously)
     * see details https://developer.twitter.com/en/docs/twitter-api/v1/trends/trends-for-location/api-reference/get-trends-place
     * @param apiKey  (required)
     * @param id  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call trendsUsingGETAsync(String apiKey, String id, final ApiCallback<ResultT> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = trendsUsingGETValidateBeforeCall(apiKey, id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResultT>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for trendsUsingPOST
     * @param apiKey  (required)
     * @param id  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call trendsUsingPOSTCall(String apiKey, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/base/apitools/trends";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (apiKey != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("apiKey", apiKey));
        if (id != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("id", id));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call trendsUsingPOSTValidateBeforeCall(String apiKey, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling trendsUsingPOST(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling trendsUsingPOST(Async)");
        }
        

        com.squareup.okhttp.Call call = trendsUsingPOSTCall(apiKey, id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * trends Search
     * see details https://developer.twitter.com/en/docs/twitter-api/v1/trends/trends-for-location/api-reference/get-trends-place
     * @param apiKey  (required)
     * @param id  (required)
     * @return ResultT
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResultT trendsUsingPOST(String apiKey, String id) throws ApiException {
        ApiResponse<ResultT> resp = trendsUsingPOSTWithHttpInfo(apiKey, id);
        return resp.getData();
    }

    /**
     * trends Search
     * see details https://developer.twitter.com/en/docs/twitter-api/v1/trends/trends-for-location/api-reference/get-trends-place
     * @param apiKey  (required)
     * @param id  (required)
     * @return ApiResponse&lt;ResultT&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResultT> trendsUsingPOSTWithHttpInfo(String apiKey, String id) throws ApiException {
        com.squareup.okhttp.Call call = trendsUsingPOSTValidateBeforeCall(apiKey, id, null, null);
        Type localVarReturnType = new TypeToken<ResultT>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * trends Search (asynchronously)
     * see details https://developer.twitter.com/en/docs/twitter-api/v1/trends/trends-for-location/api-reference/get-trends-place
     * @param apiKey  (required)
     * @param id  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call trendsUsingPOSTAsync(String apiKey, String id, final ApiCallback<ResultT> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = trendsUsingPOSTValidateBeforeCall(apiKey, id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResultT>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
