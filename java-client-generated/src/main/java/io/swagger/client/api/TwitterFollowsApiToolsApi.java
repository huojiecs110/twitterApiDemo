/*
 * Utools_twitter_tools_api
 * X (Twitter) API for search, Tweets, users, followers, images, media and more. Supports some v1.1 and v2 API endpoints, with more to come in the future!
 *
 * OpenAPI spec version: 1.1
 * Contact: huojiecs@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.ResultT;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TwitterFollowsApiToolsApi {
    private ApiClient apiClient;

    public TwitterFollowsApiToolsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TwitterFollowsApiToolsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for blueVerifiedFollowersV2UsingGET
     * @param apiKey  (required)
     * @param userId  (required)
     * @param cursor  (optional, default to -1)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call blueVerifiedFollowersV2UsingGETCall(String apiKey, String userId, String cursor, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/base/apitools/blueVerifiedFollowersV2";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (apiKey != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("apiKey", apiKey));
        if (cursor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cursor", cursor));
        if (userId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("userId", userId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call blueVerifiedFollowersV2UsingGETValidateBeforeCall(String apiKey, String userId, String cursor, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling blueVerifiedFollowersV2UsingGET(Async)");
        }
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling blueVerifiedFollowersV2UsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = blueVerifiedFollowersV2UsingGETCall(apiKey, userId, cursor, progressListener, progressRequestListener);
        return call;

    }

    /**
     * get blueVerifiedFollowers by V2 
     * 
     * @param apiKey  (required)
     * @param userId  (required)
     * @param cursor  (optional, default to -1)
     * @return ResultT
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResultT blueVerifiedFollowersV2UsingGET(String apiKey, String userId, String cursor) throws ApiException {
        ApiResponse<ResultT> resp = blueVerifiedFollowersV2UsingGETWithHttpInfo(apiKey, userId, cursor);
        return resp.getData();
    }

    /**
     * get blueVerifiedFollowers by V2 
     * 
     * @param apiKey  (required)
     * @param userId  (required)
     * @param cursor  (optional, default to -1)
     * @return ApiResponse&lt;ResultT&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResultT> blueVerifiedFollowersV2UsingGETWithHttpInfo(String apiKey, String userId, String cursor) throws ApiException {
        com.squareup.okhttp.Call call = blueVerifiedFollowersV2UsingGETValidateBeforeCall(apiKey, userId, cursor, null, null);
        Type localVarReturnType = new TypeToken<ResultT>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * get blueVerifiedFollowers by V2  (asynchronously)
     * 
     * @param apiKey  (required)
     * @param userId  (required)
     * @param cursor  (optional, default to -1)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call blueVerifiedFollowersV2UsingGETAsync(String apiKey, String userId, String cursor, final ApiCallback<ResultT> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = blueVerifiedFollowersV2UsingGETValidateBeforeCall(apiKey, userId, cursor, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResultT>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for blueVerifiedFollowersV2UsingPOST
     * @param apiKey  (required)
     * @param userId  (required)
     * @param cursor  (optional, default to -1)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call blueVerifiedFollowersV2UsingPOSTCall(String apiKey, String userId, String cursor, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/base/apitools/blueVerifiedFollowersV2";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (apiKey != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("apiKey", apiKey));
        if (cursor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cursor", cursor));
        if (userId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("userId", userId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call blueVerifiedFollowersV2UsingPOSTValidateBeforeCall(String apiKey, String userId, String cursor, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling blueVerifiedFollowersV2UsingPOST(Async)");
        }
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling blueVerifiedFollowersV2UsingPOST(Async)");
        }
        

        com.squareup.okhttp.Call call = blueVerifiedFollowersV2UsingPOSTCall(apiKey, userId, cursor, progressListener, progressRequestListener);
        return call;

    }

    /**
     * get blueVerifiedFollowers by V2 
     * 
     * @param apiKey  (required)
     * @param userId  (required)
     * @param cursor  (optional, default to -1)
     * @return ResultT
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResultT blueVerifiedFollowersV2UsingPOST(String apiKey, String userId, String cursor) throws ApiException {
        ApiResponse<ResultT> resp = blueVerifiedFollowersV2UsingPOSTWithHttpInfo(apiKey, userId, cursor);
        return resp.getData();
    }

    /**
     * get blueVerifiedFollowers by V2 
     * 
     * @param apiKey  (required)
     * @param userId  (required)
     * @param cursor  (optional, default to -1)
     * @return ApiResponse&lt;ResultT&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResultT> blueVerifiedFollowersV2UsingPOSTWithHttpInfo(String apiKey, String userId, String cursor) throws ApiException {
        com.squareup.okhttp.Call call = blueVerifiedFollowersV2UsingPOSTValidateBeforeCall(apiKey, userId, cursor, null, null);
        Type localVarReturnType = new TypeToken<ResultT>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * get blueVerifiedFollowers by V2  (asynchronously)
     * 
     * @param apiKey  (required)
     * @param userId  (required)
     * @param cursor  (optional, default to -1)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call blueVerifiedFollowersV2UsingPOSTAsync(String apiKey, String userId, String cursor, final ApiCallback<ResultT> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = blueVerifiedFollowersV2UsingPOSTValidateBeforeCall(apiKey, userId, cursor, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResultT>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for followUsingGET
     * @param apiKey  (required)
     * @param authToken  (required)
     * @param ct0  (required)
     * @param screenName  (optional)
     * @param userId  (optional, default to 1574242047661207552)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call followUsingGETCall(String apiKey, String authToken, String ct0, String screenName, String userId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/base/apitools/follow";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (apiKey != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("apiKey", apiKey));
        if (authToken != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("auth_token", authToken));
        if (ct0 != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ct0", ct0));
        if (screenName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("screenName", screenName));
        if (userId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("userId", userId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call followUsingGETValidateBeforeCall(String apiKey, String authToken, String ct0, String screenName, String userId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling followUsingGET(Async)");
        }
        
        // verify the required parameter 'authToken' is set
        if (authToken == null) {
            throw new ApiException("Missing the required parameter 'authToken' when calling followUsingGET(Async)");
        }
        
        // verify the required parameter 'ct0' is set
        if (ct0 == null) {
            throw new ApiException("Missing the required parameter 'ct0' when calling followUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = followUsingGETCall(apiKey, authToken, ct0, screenName, userId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * to follow 
     * See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/post-friendships-create
     * @param apiKey  (required)
     * @param authToken  (required)
     * @param ct0  (required)
     * @param screenName  (optional)
     * @param userId  (optional, default to 1574242047661207552)
     * @return ResultT
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResultT followUsingGET(String apiKey, String authToken, String ct0, String screenName, String userId) throws ApiException {
        ApiResponse<ResultT> resp = followUsingGETWithHttpInfo(apiKey, authToken, ct0, screenName, userId);
        return resp.getData();
    }

    /**
     * to follow 
     * See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/post-friendships-create
     * @param apiKey  (required)
     * @param authToken  (required)
     * @param ct0  (required)
     * @param screenName  (optional)
     * @param userId  (optional, default to 1574242047661207552)
     * @return ApiResponse&lt;ResultT&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResultT> followUsingGETWithHttpInfo(String apiKey, String authToken, String ct0, String screenName, String userId) throws ApiException {
        com.squareup.okhttp.Call call = followUsingGETValidateBeforeCall(apiKey, authToken, ct0, screenName, userId, null, null);
        Type localVarReturnType = new TypeToken<ResultT>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * to follow  (asynchronously)
     * See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/post-friendships-create
     * @param apiKey  (required)
     * @param authToken  (required)
     * @param ct0  (required)
     * @param screenName  (optional)
     * @param userId  (optional, default to 1574242047661207552)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call followUsingGETAsync(String apiKey, String authToken, String ct0, String screenName, String userId, final ApiCallback<ResultT> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = followUsingGETValidateBeforeCall(apiKey, authToken, ct0, screenName, userId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResultT>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for followUsingPOST
     * @param apiKey  (required)
     * @param authToken  (required)
     * @param ct0  (required)
     * @param screenName  (optional)
     * @param userId  (optional, default to 1574242047661207552)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call followUsingPOSTCall(String apiKey, String authToken, String ct0, String screenName, String userId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/base/apitools/follow";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (apiKey != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("apiKey", apiKey));
        if (authToken != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("auth_token", authToken));
        if (ct0 != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ct0", ct0));
        if (screenName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("screenName", screenName));
        if (userId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("userId", userId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call followUsingPOSTValidateBeforeCall(String apiKey, String authToken, String ct0, String screenName, String userId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling followUsingPOST(Async)");
        }
        
        // verify the required parameter 'authToken' is set
        if (authToken == null) {
            throw new ApiException("Missing the required parameter 'authToken' when calling followUsingPOST(Async)");
        }
        
        // verify the required parameter 'ct0' is set
        if (ct0 == null) {
            throw new ApiException("Missing the required parameter 'ct0' when calling followUsingPOST(Async)");
        }
        

        com.squareup.okhttp.Call call = followUsingPOSTCall(apiKey, authToken, ct0, screenName, userId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * to follow 
     * See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/post-friendships-create
     * @param apiKey  (required)
     * @param authToken  (required)
     * @param ct0  (required)
     * @param screenName  (optional)
     * @param userId  (optional, default to 1574242047661207552)
     * @return ResultT
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResultT followUsingPOST(String apiKey, String authToken, String ct0, String screenName, String userId) throws ApiException {
        ApiResponse<ResultT> resp = followUsingPOSTWithHttpInfo(apiKey, authToken, ct0, screenName, userId);
        return resp.getData();
    }

    /**
     * to follow 
     * See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/post-friendships-create
     * @param apiKey  (required)
     * @param authToken  (required)
     * @param ct0  (required)
     * @param screenName  (optional)
     * @param userId  (optional, default to 1574242047661207552)
     * @return ApiResponse&lt;ResultT&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResultT> followUsingPOSTWithHttpInfo(String apiKey, String authToken, String ct0, String screenName, String userId) throws ApiException {
        com.squareup.okhttp.Call call = followUsingPOSTValidateBeforeCall(apiKey, authToken, ct0, screenName, userId, null, null);
        Type localVarReturnType = new TypeToken<ResultT>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * to follow  (asynchronously)
     * See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/post-friendships-create
     * @param apiKey  (required)
     * @param authToken  (required)
     * @param ct0  (required)
     * @param screenName  (optional)
     * @param userId  (optional, default to 1574242047661207552)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call followUsingPOSTAsync(String apiKey, String authToken, String ct0, String screenName, String userId, final ApiCallback<ResultT> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = followUsingPOSTValidateBeforeCall(apiKey, authToken, ct0, screenName, userId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResultT>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for followersIdsUsingGET
     * @param apiKey  (required)
     * @param cursor  (optional, default to -1)
     * @param screenName  (optional, default to elonmusk)
     * @param userId  (optional, default to 1574242047661207552)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call followersIdsUsingGETCall(String apiKey, String cursor, String screenName, String userId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/base/apitools/followersIds";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (apiKey != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("apiKey", apiKey));
        if (cursor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cursor", cursor));
        if (screenName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("screenName", screenName));
        if (userId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("userId", userId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call followersIdsUsingGETValidateBeforeCall(String apiKey, String cursor, String screenName, String userId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling followersIdsUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = followersIdsUsingGETCall(apiKey, cursor, screenName, userId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get Followers Ids
     * See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-followers-ids
     * @param apiKey  (required)
     * @param cursor  (optional, default to -1)
     * @param screenName  (optional, default to elonmusk)
     * @param userId  (optional, default to 1574242047661207552)
     * @return ResultT
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResultT followersIdsUsingGET(String apiKey, String cursor, String screenName, String userId) throws ApiException {
        ApiResponse<ResultT> resp = followersIdsUsingGETWithHttpInfo(apiKey, cursor, screenName, userId);
        return resp.getData();
    }

    /**
     * Get Followers Ids
     * See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-followers-ids
     * @param apiKey  (required)
     * @param cursor  (optional, default to -1)
     * @param screenName  (optional, default to elonmusk)
     * @param userId  (optional, default to 1574242047661207552)
     * @return ApiResponse&lt;ResultT&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResultT> followersIdsUsingGETWithHttpInfo(String apiKey, String cursor, String screenName, String userId) throws ApiException {
        com.squareup.okhttp.Call call = followersIdsUsingGETValidateBeforeCall(apiKey, cursor, screenName, userId, null, null);
        Type localVarReturnType = new TypeToken<ResultT>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Followers Ids (asynchronously)
     * See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-followers-ids
     * @param apiKey  (required)
     * @param cursor  (optional, default to -1)
     * @param screenName  (optional, default to elonmusk)
     * @param userId  (optional, default to 1574242047661207552)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call followersIdsUsingGETAsync(String apiKey, String cursor, String screenName, String userId, final ApiCallback<ResultT> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = followersIdsUsingGETValidateBeforeCall(apiKey, cursor, screenName, userId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResultT>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for followersIdsUsingPOST
     * @param apiKey  (required)
     * @param cursor  (optional, default to -1)
     * @param screenName  (optional, default to elonmusk)
     * @param userId  (optional, default to 1574242047661207552)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call followersIdsUsingPOSTCall(String apiKey, String cursor, String screenName, String userId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/base/apitools/followersIds";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (apiKey != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("apiKey", apiKey));
        if (cursor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cursor", cursor));
        if (screenName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("screenName", screenName));
        if (userId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("userId", userId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call followersIdsUsingPOSTValidateBeforeCall(String apiKey, String cursor, String screenName, String userId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling followersIdsUsingPOST(Async)");
        }
        

        com.squareup.okhttp.Call call = followersIdsUsingPOSTCall(apiKey, cursor, screenName, userId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get Followers Ids
     * See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-followers-ids
     * @param apiKey  (required)
     * @param cursor  (optional, default to -1)
     * @param screenName  (optional, default to elonmusk)
     * @param userId  (optional, default to 1574242047661207552)
     * @return ResultT
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResultT followersIdsUsingPOST(String apiKey, String cursor, String screenName, String userId) throws ApiException {
        ApiResponse<ResultT> resp = followersIdsUsingPOSTWithHttpInfo(apiKey, cursor, screenName, userId);
        return resp.getData();
    }

    /**
     * Get Followers Ids
     * See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-followers-ids
     * @param apiKey  (required)
     * @param cursor  (optional, default to -1)
     * @param screenName  (optional, default to elonmusk)
     * @param userId  (optional, default to 1574242047661207552)
     * @return ApiResponse&lt;ResultT&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResultT> followersIdsUsingPOSTWithHttpInfo(String apiKey, String cursor, String screenName, String userId) throws ApiException {
        com.squareup.okhttp.Call call = followersIdsUsingPOSTValidateBeforeCall(apiKey, cursor, screenName, userId, null, null);
        Type localVarReturnType = new TypeToken<ResultT>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Followers Ids (asynchronously)
     * See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-followers-ids
     * @param apiKey  (required)
     * @param cursor  (optional, default to -1)
     * @param screenName  (optional, default to elonmusk)
     * @param userId  (optional, default to 1574242047661207552)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call followersIdsUsingPOSTAsync(String apiKey, String cursor, String screenName, String userId, final ApiCallback<ResultT> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = followersIdsUsingPOSTValidateBeforeCall(apiKey, cursor, screenName, userId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResultT>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for followersListUsingGET
     * @param apiKey  (required)
     * @param cursor  (optional, default to -1)
     * @param screenName  (optional, default to elonmusk)
     * @param userId  (optional, default to 1574242047661207552)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call followersListUsingGETCall(String apiKey, String cursor, String screenName, String userId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/base/apitools/followersList";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (apiKey != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("apiKey", apiKey));
        if (cursor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cursor", cursor));
        if (screenName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("screenName", screenName));
        if (userId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("userId", userId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call followersListUsingGETValidateBeforeCall(String apiKey, String cursor, String screenName, String userId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling followersListUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = followersListUsingGETCall(apiKey, cursor, screenName, userId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get Followers User Collection
     * See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-followers-list
     * @param apiKey  (required)
     * @param cursor  (optional, default to -1)
     * @param screenName  (optional, default to elonmusk)
     * @param userId  (optional, default to 1574242047661207552)
     * @return ResultT
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResultT followersListUsingGET(String apiKey, String cursor, String screenName, String userId) throws ApiException {
        ApiResponse<ResultT> resp = followersListUsingGETWithHttpInfo(apiKey, cursor, screenName, userId);
        return resp.getData();
    }

    /**
     * Get Followers User Collection
     * See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-followers-list
     * @param apiKey  (required)
     * @param cursor  (optional, default to -1)
     * @param screenName  (optional, default to elonmusk)
     * @param userId  (optional, default to 1574242047661207552)
     * @return ApiResponse&lt;ResultT&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResultT> followersListUsingGETWithHttpInfo(String apiKey, String cursor, String screenName, String userId) throws ApiException {
        com.squareup.okhttp.Call call = followersListUsingGETValidateBeforeCall(apiKey, cursor, screenName, userId, null, null);
        Type localVarReturnType = new TypeToken<ResultT>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Followers User Collection (asynchronously)
     * See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-followers-list
     * @param apiKey  (required)
     * @param cursor  (optional, default to -1)
     * @param screenName  (optional, default to elonmusk)
     * @param userId  (optional, default to 1574242047661207552)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call followersListUsingGETAsync(String apiKey, String cursor, String screenName, String userId, final ApiCallback<ResultT> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = followersListUsingGETValidateBeforeCall(apiKey, cursor, screenName, userId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResultT>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for followersListUsingPOST
     * @param apiKey  (required)
     * @param cursor  (optional, default to -1)
     * @param screenName  (optional, default to elonmusk)
     * @param userId  (optional, default to 1574242047661207552)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call followersListUsingPOSTCall(String apiKey, String cursor, String screenName, String userId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/base/apitools/followersList";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (apiKey != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("apiKey", apiKey));
        if (cursor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cursor", cursor));
        if (screenName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("screenName", screenName));
        if (userId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("userId", userId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call followersListUsingPOSTValidateBeforeCall(String apiKey, String cursor, String screenName, String userId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling followersListUsingPOST(Async)");
        }
        

        com.squareup.okhttp.Call call = followersListUsingPOSTCall(apiKey, cursor, screenName, userId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get Followers User Collection
     * See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-followers-list
     * @param apiKey  (required)
     * @param cursor  (optional, default to -1)
     * @param screenName  (optional, default to elonmusk)
     * @param userId  (optional, default to 1574242047661207552)
     * @return ResultT
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResultT followersListUsingPOST(String apiKey, String cursor, String screenName, String userId) throws ApiException {
        ApiResponse<ResultT> resp = followersListUsingPOSTWithHttpInfo(apiKey, cursor, screenName, userId);
        return resp.getData();
    }

    /**
     * Get Followers User Collection
     * See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-followers-list
     * @param apiKey  (required)
     * @param cursor  (optional, default to -1)
     * @param screenName  (optional, default to elonmusk)
     * @param userId  (optional, default to 1574242047661207552)
     * @return ApiResponse&lt;ResultT&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResultT> followersListUsingPOSTWithHttpInfo(String apiKey, String cursor, String screenName, String userId) throws ApiException {
        com.squareup.okhttp.Call call = followersListUsingPOSTValidateBeforeCall(apiKey, cursor, screenName, userId, null, null);
        Type localVarReturnType = new TypeToken<ResultT>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Followers User Collection (asynchronously)
     * See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-followers-list
     * @param apiKey  (required)
     * @param cursor  (optional, default to -1)
     * @param screenName  (optional, default to elonmusk)
     * @param userId  (optional, default to 1574242047661207552)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call followersListUsingPOSTAsync(String apiKey, String cursor, String screenName, String userId, final ApiCallback<ResultT> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = followersListUsingPOSTValidateBeforeCall(apiKey, cursor, screenName, userId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResultT>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for followersListV2UsingGET
     * @param apiKey  (required)
     * @param userId  (required)
     * @param cursor  (optional, default to -1)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call followersListV2UsingGETCall(String apiKey, String userId, String cursor, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/base/apitools/followersListV2";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (apiKey != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("apiKey", apiKey));
        if (cursor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cursor", cursor));
        if (userId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("userId", userId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call followersListV2UsingGETValidateBeforeCall(String apiKey, String userId, String cursor, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling followersListV2UsingGET(Async)");
        }
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling followersListV2UsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = followersListV2UsingGETCall(apiKey, userId, cursor, progressListener, progressRequestListener);
        return call;

    }

    /**
     * get followersList by V2 
     * 
     * @param apiKey  (required)
     * @param userId  (required)
     * @param cursor  (optional, default to -1)
     * @return ResultT
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResultT followersListV2UsingGET(String apiKey, String userId, String cursor) throws ApiException {
        ApiResponse<ResultT> resp = followersListV2UsingGETWithHttpInfo(apiKey, userId, cursor);
        return resp.getData();
    }

    /**
     * get followersList by V2 
     * 
     * @param apiKey  (required)
     * @param userId  (required)
     * @param cursor  (optional, default to -1)
     * @return ApiResponse&lt;ResultT&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResultT> followersListV2UsingGETWithHttpInfo(String apiKey, String userId, String cursor) throws ApiException {
        com.squareup.okhttp.Call call = followersListV2UsingGETValidateBeforeCall(apiKey, userId, cursor, null, null);
        Type localVarReturnType = new TypeToken<ResultT>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * get followersList by V2  (asynchronously)
     * 
     * @param apiKey  (required)
     * @param userId  (required)
     * @param cursor  (optional, default to -1)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call followersListV2UsingGETAsync(String apiKey, String userId, String cursor, final ApiCallback<ResultT> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = followersListV2UsingGETValidateBeforeCall(apiKey, userId, cursor, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResultT>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for followersListV2UsingPOST
     * @param apiKey  (required)
     * @param userId  (required)
     * @param cursor  (optional, default to -1)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call followersListV2UsingPOSTCall(String apiKey, String userId, String cursor, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/base/apitools/followersListV2";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (apiKey != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("apiKey", apiKey));
        if (cursor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cursor", cursor));
        if (userId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("userId", userId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call followersListV2UsingPOSTValidateBeforeCall(String apiKey, String userId, String cursor, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling followersListV2UsingPOST(Async)");
        }
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling followersListV2UsingPOST(Async)");
        }
        

        com.squareup.okhttp.Call call = followersListV2UsingPOSTCall(apiKey, userId, cursor, progressListener, progressRequestListener);
        return call;

    }

    /**
     * get followersList by V2 
     * 
     * @param apiKey  (required)
     * @param userId  (required)
     * @param cursor  (optional, default to -1)
     * @return ResultT
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResultT followersListV2UsingPOST(String apiKey, String userId, String cursor) throws ApiException {
        ApiResponse<ResultT> resp = followersListV2UsingPOSTWithHttpInfo(apiKey, userId, cursor);
        return resp.getData();
    }

    /**
     * get followersList by V2 
     * 
     * @param apiKey  (required)
     * @param userId  (required)
     * @param cursor  (optional, default to -1)
     * @return ApiResponse&lt;ResultT&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResultT> followersListV2UsingPOSTWithHttpInfo(String apiKey, String userId, String cursor) throws ApiException {
        com.squareup.okhttp.Call call = followersListV2UsingPOSTValidateBeforeCall(apiKey, userId, cursor, null, null);
        Type localVarReturnType = new TypeToken<ResultT>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * get followersList by V2  (asynchronously)
     * 
     * @param apiKey  (required)
     * @param userId  (required)
     * @param cursor  (optional, default to -1)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call followersListV2UsingPOSTAsync(String apiKey, String userId, String cursor, final ApiCallback<ResultT> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = followersListV2UsingPOSTValidateBeforeCall(apiKey, userId, cursor, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResultT>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for followingsIdsUsingGET
     * @param apiKey  (required)
     * @param cursor  (optional, default to -1)
     * @param screenName  (optional, default to elonmusk)
     * @param userId  (optional, default to 1574242047661207552)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call followingsIdsUsingGETCall(String apiKey, String cursor, String screenName, String userId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/base/apitools/followingsIds";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (apiKey != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("apiKey", apiKey));
        if (cursor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cursor", cursor));
        if (screenName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("screenName", screenName));
        if (userId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("userId", userId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call followingsIdsUsingGETValidateBeforeCall(String apiKey, String cursor, String screenName, String userId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling followingsIdsUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = followingsIdsUsingGETCall(apiKey, cursor, screenName, userId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get Followings Ids
     * See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-friends-ids
     * @param apiKey  (required)
     * @param cursor  (optional, default to -1)
     * @param screenName  (optional, default to elonmusk)
     * @param userId  (optional, default to 1574242047661207552)
     * @return ResultT
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResultT followingsIdsUsingGET(String apiKey, String cursor, String screenName, String userId) throws ApiException {
        ApiResponse<ResultT> resp = followingsIdsUsingGETWithHttpInfo(apiKey, cursor, screenName, userId);
        return resp.getData();
    }

    /**
     * Get Followings Ids
     * See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-friends-ids
     * @param apiKey  (required)
     * @param cursor  (optional, default to -1)
     * @param screenName  (optional, default to elonmusk)
     * @param userId  (optional, default to 1574242047661207552)
     * @return ApiResponse&lt;ResultT&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResultT> followingsIdsUsingGETWithHttpInfo(String apiKey, String cursor, String screenName, String userId) throws ApiException {
        com.squareup.okhttp.Call call = followingsIdsUsingGETValidateBeforeCall(apiKey, cursor, screenName, userId, null, null);
        Type localVarReturnType = new TypeToken<ResultT>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Followings Ids (asynchronously)
     * See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-friends-ids
     * @param apiKey  (required)
     * @param cursor  (optional, default to -1)
     * @param screenName  (optional, default to elonmusk)
     * @param userId  (optional, default to 1574242047661207552)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call followingsIdsUsingGETAsync(String apiKey, String cursor, String screenName, String userId, final ApiCallback<ResultT> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = followingsIdsUsingGETValidateBeforeCall(apiKey, cursor, screenName, userId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResultT>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for followingsIdsUsingPOST
     * @param apiKey  (required)
     * @param cursor  (optional, default to -1)
     * @param screenName  (optional, default to elonmusk)
     * @param userId  (optional, default to 1574242047661207552)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call followingsIdsUsingPOSTCall(String apiKey, String cursor, String screenName, String userId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/base/apitools/followingsIds";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (apiKey != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("apiKey", apiKey));
        if (cursor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cursor", cursor));
        if (screenName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("screenName", screenName));
        if (userId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("userId", userId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call followingsIdsUsingPOSTValidateBeforeCall(String apiKey, String cursor, String screenName, String userId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling followingsIdsUsingPOST(Async)");
        }
        

        com.squareup.okhttp.Call call = followingsIdsUsingPOSTCall(apiKey, cursor, screenName, userId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get Followings Ids
     * See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-friends-ids
     * @param apiKey  (required)
     * @param cursor  (optional, default to -1)
     * @param screenName  (optional, default to elonmusk)
     * @param userId  (optional, default to 1574242047661207552)
     * @return ResultT
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResultT followingsIdsUsingPOST(String apiKey, String cursor, String screenName, String userId) throws ApiException {
        ApiResponse<ResultT> resp = followingsIdsUsingPOSTWithHttpInfo(apiKey, cursor, screenName, userId);
        return resp.getData();
    }

    /**
     * Get Followings Ids
     * See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-friends-ids
     * @param apiKey  (required)
     * @param cursor  (optional, default to -1)
     * @param screenName  (optional, default to elonmusk)
     * @param userId  (optional, default to 1574242047661207552)
     * @return ApiResponse&lt;ResultT&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResultT> followingsIdsUsingPOSTWithHttpInfo(String apiKey, String cursor, String screenName, String userId) throws ApiException {
        com.squareup.okhttp.Call call = followingsIdsUsingPOSTValidateBeforeCall(apiKey, cursor, screenName, userId, null, null);
        Type localVarReturnType = new TypeToken<ResultT>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Followings Ids (asynchronously)
     * See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-friends-ids
     * @param apiKey  (required)
     * @param cursor  (optional, default to -1)
     * @param screenName  (optional, default to elonmusk)
     * @param userId  (optional, default to 1574242047661207552)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call followingsIdsUsingPOSTAsync(String apiKey, String cursor, String screenName, String userId, final ApiCallback<ResultT> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = followingsIdsUsingPOSTValidateBeforeCall(apiKey, cursor, screenName, userId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResultT>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for followingsListUsingGET
     * @param apiKey  (required)
     * @param cursor  (optional, default to -1)
     * @param screenName  (optional, default to elonmusk)
     * @param userId  (optional, default to 1574242047661207552)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call followingsListUsingGETCall(String apiKey, String cursor, String screenName, String userId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/base/apitools/followingsList";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (apiKey != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("apiKey", apiKey));
        if (cursor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cursor", cursor));
        if (screenName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("screenName", screenName));
        if (userId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("userId", userId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call followingsListUsingGETValidateBeforeCall(String apiKey, String cursor, String screenName, String userId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling followingsListUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = followingsListUsingGETCall(apiKey, cursor, screenName, userId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get Followings User Collection
     * See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-friends-list
     * @param apiKey  (required)
     * @param cursor  (optional, default to -1)
     * @param screenName  (optional, default to elonmusk)
     * @param userId  (optional, default to 1574242047661207552)
     * @return ResultT
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResultT followingsListUsingGET(String apiKey, String cursor, String screenName, String userId) throws ApiException {
        ApiResponse<ResultT> resp = followingsListUsingGETWithHttpInfo(apiKey, cursor, screenName, userId);
        return resp.getData();
    }

    /**
     * Get Followings User Collection
     * See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-friends-list
     * @param apiKey  (required)
     * @param cursor  (optional, default to -1)
     * @param screenName  (optional, default to elonmusk)
     * @param userId  (optional, default to 1574242047661207552)
     * @return ApiResponse&lt;ResultT&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResultT> followingsListUsingGETWithHttpInfo(String apiKey, String cursor, String screenName, String userId) throws ApiException {
        com.squareup.okhttp.Call call = followingsListUsingGETValidateBeforeCall(apiKey, cursor, screenName, userId, null, null);
        Type localVarReturnType = new TypeToken<ResultT>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Followings User Collection (asynchronously)
     * See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-friends-list
     * @param apiKey  (required)
     * @param cursor  (optional, default to -1)
     * @param screenName  (optional, default to elonmusk)
     * @param userId  (optional, default to 1574242047661207552)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call followingsListUsingGETAsync(String apiKey, String cursor, String screenName, String userId, final ApiCallback<ResultT> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = followingsListUsingGETValidateBeforeCall(apiKey, cursor, screenName, userId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResultT>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for followingsListUsingPOST
     * @param apiKey  (required)
     * @param cursor  (optional, default to -1)
     * @param screenName  (optional, default to elonmusk)
     * @param userId  (optional, default to 1574242047661207552)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call followingsListUsingPOSTCall(String apiKey, String cursor, String screenName, String userId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/base/apitools/followingsList";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (apiKey != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("apiKey", apiKey));
        if (cursor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cursor", cursor));
        if (screenName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("screenName", screenName));
        if (userId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("userId", userId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call followingsListUsingPOSTValidateBeforeCall(String apiKey, String cursor, String screenName, String userId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling followingsListUsingPOST(Async)");
        }
        

        com.squareup.okhttp.Call call = followingsListUsingPOSTCall(apiKey, cursor, screenName, userId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get Followings User Collection
     * See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-friends-list
     * @param apiKey  (required)
     * @param cursor  (optional, default to -1)
     * @param screenName  (optional, default to elonmusk)
     * @param userId  (optional, default to 1574242047661207552)
     * @return ResultT
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResultT followingsListUsingPOST(String apiKey, String cursor, String screenName, String userId) throws ApiException {
        ApiResponse<ResultT> resp = followingsListUsingPOSTWithHttpInfo(apiKey, cursor, screenName, userId);
        return resp.getData();
    }

    /**
     * Get Followings User Collection
     * See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-friends-list
     * @param apiKey  (required)
     * @param cursor  (optional, default to -1)
     * @param screenName  (optional, default to elonmusk)
     * @param userId  (optional, default to 1574242047661207552)
     * @return ApiResponse&lt;ResultT&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResultT> followingsListUsingPOSTWithHttpInfo(String apiKey, String cursor, String screenName, String userId) throws ApiException {
        com.squareup.okhttp.Call call = followingsListUsingPOSTValidateBeforeCall(apiKey, cursor, screenName, userId, null, null);
        Type localVarReturnType = new TypeToken<ResultT>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Followings User Collection (asynchronously)
     * See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-friends-list
     * @param apiKey  (required)
     * @param cursor  (optional, default to -1)
     * @param screenName  (optional, default to elonmusk)
     * @param userId  (optional, default to 1574242047661207552)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call followingsListUsingPOSTAsync(String apiKey, String cursor, String screenName, String userId, final ApiCallback<ResultT> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = followingsListUsingPOSTValidateBeforeCall(apiKey, cursor, screenName, userId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResultT>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for followingsListV2UsingGET
     * @param apiKey  (required)
     * @param userId  (required)
     * @param cursor  (optional, default to -1)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call followingsListV2UsingGETCall(String apiKey, String userId, String cursor, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/base/apitools/followingsListV2";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (apiKey != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("apiKey", apiKey));
        if (cursor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cursor", cursor));
        if (userId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("userId", userId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call followingsListV2UsingGETValidateBeforeCall(String apiKey, String userId, String cursor, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling followingsListV2UsingGET(Async)");
        }
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling followingsListV2UsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = followingsListV2UsingGETCall(apiKey, userId, cursor, progressListener, progressRequestListener);
        return call;

    }

    /**
     * get followingsList by V2 
     * 
     * @param apiKey  (required)
     * @param userId  (required)
     * @param cursor  (optional, default to -1)
     * @return ResultT
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResultT followingsListV2UsingGET(String apiKey, String userId, String cursor) throws ApiException {
        ApiResponse<ResultT> resp = followingsListV2UsingGETWithHttpInfo(apiKey, userId, cursor);
        return resp.getData();
    }

    /**
     * get followingsList by V2 
     * 
     * @param apiKey  (required)
     * @param userId  (required)
     * @param cursor  (optional, default to -1)
     * @return ApiResponse&lt;ResultT&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResultT> followingsListV2UsingGETWithHttpInfo(String apiKey, String userId, String cursor) throws ApiException {
        com.squareup.okhttp.Call call = followingsListV2UsingGETValidateBeforeCall(apiKey, userId, cursor, null, null);
        Type localVarReturnType = new TypeToken<ResultT>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * get followingsList by V2  (asynchronously)
     * 
     * @param apiKey  (required)
     * @param userId  (required)
     * @param cursor  (optional, default to -1)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call followingsListV2UsingGETAsync(String apiKey, String userId, String cursor, final ApiCallback<ResultT> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = followingsListV2UsingGETValidateBeforeCall(apiKey, userId, cursor, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResultT>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for followingsListV2UsingPOST
     * @param apiKey  (required)
     * @param userId  (required)
     * @param cursor  (optional, default to -1)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call followingsListV2UsingPOSTCall(String apiKey, String userId, String cursor, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/base/apitools/followingsListV2";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (apiKey != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("apiKey", apiKey));
        if (cursor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cursor", cursor));
        if (userId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("userId", userId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call followingsListV2UsingPOSTValidateBeforeCall(String apiKey, String userId, String cursor, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling followingsListV2UsingPOST(Async)");
        }
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling followingsListV2UsingPOST(Async)");
        }
        

        com.squareup.okhttp.Call call = followingsListV2UsingPOSTCall(apiKey, userId, cursor, progressListener, progressRequestListener);
        return call;

    }

    /**
     * get followingsList by V2 
     * 
     * @param apiKey  (required)
     * @param userId  (required)
     * @param cursor  (optional, default to -1)
     * @return ResultT
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResultT followingsListV2UsingPOST(String apiKey, String userId, String cursor) throws ApiException {
        ApiResponse<ResultT> resp = followingsListV2UsingPOSTWithHttpInfo(apiKey, userId, cursor);
        return resp.getData();
    }

    /**
     * get followingsList by V2 
     * 
     * @param apiKey  (required)
     * @param userId  (required)
     * @param cursor  (optional, default to -1)
     * @return ApiResponse&lt;ResultT&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResultT> followingsListV2UsingPOSTWithHttpInfo(String apiKey, String userId, String cursor) throws ApiException {
        com.squareup.okhttp.Call call = followingsListV2UsingPOSTValidateBeforeCall(apiKey, userId, cursor, null, null);
        Type localVarReturnType = new TypeToken<ResultT>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * get followingsList by V2  (asynchronously)
     * 
     * @param apiKey  (required)
     * @param userId  (required)
     * @param cursor  (optional, default to -1)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call followingsListV2UsingPOSTAsync(String apiKey, String userId, String cursor, final ApiCallback<ResultT> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = followingsListV2UsingPOSTValidateBeforeCall(apiKey, userId, cursor, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResultT>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getFriendshipsShowUsingGET
     * @param apiKey  (required)
     * @param sourceId  (optional, default to 1574242047661207552)
     * @param sourceScreenName  (optional)
     * @param targetId  (optional, default to 1620357967962058752)
     * @param targetScreenName  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getFriendshipsShowUsingGETCall(String apiKey, String sourceId, String sourceScreenName, String targetId, String targetScreenName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/base/apitools/friendshipsShow";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (apiKey != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("apiKey", apiKey));
        if (sourceId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("source_id", sourceId));
        if (sourceScreenName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("source_screen_name", sourceScreenName));
        if (targetId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("target_id", targetId));
        if (targetScreenName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("target_screen_name", targetScreenName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getFriendshipsShowUsingGETValidateBeforeCall(String apiKey, String sourceId, String sourceScreenName, String targetId, String targetScreenName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling getFriendshipsShowUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = getFriendshipsShowUsingGETCall(apiKey, sourceId, sourceScreenName, targetId, targetScreenName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get relationship information between two users
     * See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-friendships-show
     * @param apiKey  (required)
     * @param sourceId  (optional, default to 1574242047661207552)
     * @param sourceScreenName  (optional)
     * @param targetId  (optional, default to 1620357967962058752)
     * @param targetScreenName  (optional)
     * @return ResultT
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResultT getFriendshipsShowUsingGET(String apiKey, String sourceId, String sourceScreenName, String targetId, String targetScreenName) throws ApiException {
        ApiResponse<ResultT> resp = getFriendshipsShowUsingGETWithHttpInfo(apiKey, sourceId, sourceScreenName, targetId, targetScreenName);
        return resp.getData();
    }

    /**
     * Get relationship information between two users
     * See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-friendships-show
     * @param apiKey  (required)
     * @param sourceId  (optional, default to 1574242047661207552)
     * @param sourceScreenName  (optional)
     * @param targetId  (optional, default to 1620357967962058752)
     * @param targetScreenName  (optional)
     * @return ApiResponse&lt;ResultT&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResultT> getFriendshipsShowUsingGETWithHttpInfo(String apiKey, String sourceId, String sourceScreenName, String targetId, String targetScreenName) throws ApiException {
        com.squareup.okhttp.Call call = getFriendshipsShowUsingGETValidateBeforeCall(apiKey, sourceId, sourceScreenName, targetId, targetScreenName, null, null);
        Type localVarReturnType = new TypeToken<ResultT>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get relationship information between two users (asynchronously)
     * See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-friendships-show
     * @param apiKey  (required)
     * @param sourceId  (optional, default to 1574242047661207552)
     * @param sourceScreenName  (optional)
     * @param targetId  (optional, default to 1620357967962058752)
     * @param targetScreenName  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getFriendshipsShowUsingGETAsync(String apiKey, String sourceId, String sourceScreenName, String targetId, String targetScreenName, final ApiCallback<ResultT> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getFriendshipsShowUsingGETValidateBeforeCall(apiKey, sourceId, sourceScreenName, targetId, targetScreenName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResultT>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getFriendshipsShowUsingPOST
     * @param apiKey  (required)
     * @param sourceId  (optional, default to 1574242047661207552)
     * @param sourceScreenName  (optional)
     * @param targetId  (optional, default to 1620357967962058752)
     * @param targetScreenName  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getFriendshipsShowUsingPOSTCall(String apiKey, String sourceId, String sourceScreenName, String targetId, String targetScreenName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/base/apitools/friendshipsShow";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (apiKey != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("apiKey", apiKey));
        if (sourceId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("source_id", sourceId));
        if (sourceScreenName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("source_screen_name", sourceScreenName));
        if (targetId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("target_id", targetId));
        if (targetScreenName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("target_screen_name", targetScreenName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getFriendshipsShowUsingPOSTValidateBeforeCall(String apiKey, String sourceId, String sourceScreenName, String targetId, String targetScreenName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling getFriendshipsShowUsingPOST(Async)");
        }
        

        com.squareup.okhttp.Call call = getFriendshipsShowUsingPOSTCall(apiKey, sourceId, sourceScreenName, targetId, targetScreenName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get relationship information between two users
     * See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-friendships-show
     * @param apiKey  (required)
     * @param sourceId  (optional, default to 1574242047661207552)
     * @param sourceScreenName  (optional)
     * @param targetId  (optional, default to 1620357967962058752)
     * @param targetScreenName  (optional)
     * @return ResultT
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResultT getFriendshipsShowUsingPOST(String apiKey, String sourceId, String sourceScreenName, String targetId, String targetScreenName) throws ApiException {
        ApiResponse<ResultT> resp = getFriendshipsShowUsingPOSTWithHttpInfo(apiKey, sourceId, sourceScreenName, targetId, targetScreenName);
        return resp.getData();
    }

    /**
     * Get relationship information between two users
     * See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-friendships-show
     * @param apiKey  (required)
     * @param sourceId  (optional, default to 1574242047661207552)
     * @param sourceScreenName  (optional)
     * @param targetId  (optional, default to 1620357967962058752)
     * @param targetScreenName  (optional)
     * @return ApiResponse&lt;ResultT&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResultT> getFriendshipsShowUsingPOSTWithHttpInfo(String apiKey, String sourceId, String sourceScreenName, String targetId, String targetScreenName) throws ApiException {
        com.squareup.okhttp.Call call = getFriendshipsShowUsingPOSTValidateBeforeCall(apiKey, sourceId, sourceScreenName, targetId, targetScreenName, null, null);
        Type localVarReturnType = new TypeToken<ResultT>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get relationship information between two users (asynchronously)
     * See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-friendships-show
     * @param apiKey  (required)
     * @param sourceId  (optional, default to 1574242047661207552)
     * @param sourceScreenName  (optional)
     * @param targetId  (optional, default to 1620357967962058752)
     * @param targetScreenName  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getFriendshipsShowUsingPOSTAsync(String apiKey, String sourceId, String sourceScreenName, String targetId, String targetScreenName, final ApiCallback<ResultT> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getFriendshipsShowUsingPOSTValidateBeforeCall(apiKey, sourceId, sourceScreenName, targetId, targetScreenName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResultT>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for unfollowUsingGET
     * @param apiKey  (required)
     * @param authToken  (required)
     * @param ct0  (required)
     * @param screenName  (optional)
     * @param userId  (optional, default to 44196397)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call unfollowUsingGETCall(String apiKey, String authToken, String ct0, String screenName, String userId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/base/apitools/unfollow";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (apiKey != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("apiKey", apiKey));
        if (authToken != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("auth_token", authToken));
        if (ct0 != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ct0", ct0));
        if (screenName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("screenName", screenName));
        if (userId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("userId", userId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call unfollowUsingGETValidateBeforeCall(String apiKey, String authToken, String ct0, String screenName, String userId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling unfollowUsingGET(Async)");
        }
        
        // verify the required parameter 'authToken' is set
        if (authToken == null) {
            throw new ApiException("Missing the required parameter 'authToken' when calling unfollowUsingGET(Async)");
        }
        
        // verify the required parameter 'ct0' is set
        if (ct0 == null) {
            throw new ApiException("Missing the required parameter 'ct0' when calling unfollowUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = unfollowUsingGETCall(apiKey, authToken, ct0, screenName, userId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * to unfollow 
     * See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/post-friendships-destroy
     * @param apiKey  (required)
     * @param authToken  (required)
     * @param ct0  (required)
     * @param screenName  (optional)
     * @param userId  (optional, default to 44196397)
     * @return ResultT
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResultT unfollowUsingGET(String apiKey, String authToken, String ct0, String screenName, String userId) throws ApiException {
        ApiResponse<ResultT> resp = unfollowUsingGETWithHttpInfo(apiKey, authToken, ct0, screenName, userId);
        return resp.getData();
    }

    /**
     * to unfollow 
     * See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/post-friendships-destroy
     * @param apiKey  (required)
     * @param authToken  (required)
     * @param ct0  (required)
     * @param screenName  (optional)
     * @param userId  (optional, default to 44196397)
     * @return ApiResponse&lt;ResultT&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResultT> unfollowUsingGETWithHttpInfo(String apiKey, String authToken, String ct0, String screenName, String userId) throws ApiException {
        com.squareup.okhttp.Call call = unfollowUsingGETValidateBeforeCall(apiKey, authToken, ct0, screenName, userId, null, null);
        Type localVarReturnType = new TypeToken<ResultT>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * to unfollow  (asynchronously)
     * See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/post-friendships-destroy
     * @param apiKey  (required)
     * @param authToken  (required)
     * @param ct0  (required)
     * @param screenName  (optional)
     * @param userId  (optional, default to 44196397)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call unfollowUsingGETAsync(String apiKey, String authToken, String ct0, String screenName, String userId, final ApiCallback<ResultT> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = unfollowUsingGETValidateBeforeCall(apiKey, authToken, ct0, screenName, userId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResultT>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for unfollowUsingPOST
     * @param apiKey  (required)
     * @param authToken  (required)
     * @param ct0  (required)
     * @param screenName  (optional)
     * @param userId  (optional, default to 44196397)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call unfollowUsingPOSTCall(String apiKey, String authToken, String ct0, String screenName, String userId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/base/apitools/unfollow";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (apiKey != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("apiKey", apiKey));
        if (authToken != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("auth_token", authToken));
        if (ct0 != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ct0", ct0));
        if (screenName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("screenName", screenName));
        if (userId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("userId", userId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call unfollowUsingPOSTValidateBeforeCall(String apiKey, String authToken, String ct0, String screenName, String userId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling unfollowUsingPOST(Async)");
        }
        
        // verify the required parameter 'authToken' is set
        if (authToken == null) {
            throw new ApiException("Missing the required parameter 'authToken' when calling unfollowUsingPOST(Async)");
        }
        
        // verify the required parameter 'ct0' is set
        if (ct0 == null) {
            throw new ApiException("Missing the required parameter 'ct0' when calling unfollowUsingPOST(Async)");
        }
        

        com.squareup.okhttp.Call call = unfollowUsingPOSTCall(apiKey, authToken, ct0, screenName, userId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * to unfollow 
     * See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/post-friendships-destroy
     * @param apiKey  (required)
     * @param authToken  (required)
     * @param ct0  (required)
     * @param screenName  (optional)
     * @param userId  (optional, default to 44196397)
     * @return ResultT
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResultT unfollowUsingPOST(String apiKey, String authToken, String ct0, String screenName, String userId) throws ApiException {
        ApiResponse<ResultT> resp = unfollowUsingPOSTWithHttpInfo(apiKey, authToken, ct0, screenName, userId);
        return resp.getData();
    }

    /**
     * to unfollow 
     * See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/post-friendships-destroy
     * @param apiKey  (required)
     * @param authToken  (required)
     * @param ct0  (required)
     * @param screenName  (optional)
     * @param userId  (optional, default to 44196397)
     * @return ApiResponse&lt;ResultT&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResultT> unfollowUsingPOSTWithHttpInfo(String apiKey, String authToken, String ct0, String screenName, String userId) throws ApiException {
        com.squareup.okhttp.Call call = unfollowUsingPOSTValidateBeforeCall(apiKey, authToken, ct0, screenName, userId, null, null);
        Type localVarReturnType = new TypeToken<ResultT>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * to unfollow  (asynchronously)
     * See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/post-friendships-destroy
     * @param apiKey  (required)
     * @param authToken  (required)
     * @param ct0  (required)
     * @param screenName  (optional)
     * @param userId  (optional, default to 44196397)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call unfollowUsingPOSTAsync(String apiKey, String authToken, String ct0, String screenName, String userId, final ApiCallback<ResultT> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = unfollowUsingPOSTValidateBeforeCall(apiKey, authToken, ct0, screenName, userId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResultT>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
