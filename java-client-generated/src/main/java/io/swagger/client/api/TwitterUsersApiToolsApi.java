/*
 * Utools_twitter_tools_api
 * X (Twitter) API for search, Tweets, users, followers, images, media and more. Supports some v1.1 and v2 API endpoints, with more to come in the future!
 *
 * OpenAPI spec version: 1.1
 * Contact: huojiecs@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.ResultT;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TwitterUsersApiToolsApi {
    private ApiClient apiClient;

    public TwitterUsersApiToolsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TwitterUsersApiToolsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for blocksCreateUsingGET
     * @param apiKey  (required)
     * @param authToken  (required)
     * @param ct0  (required)
     * @param screenName  (optional)
     * @param userId  (optional, default to 1574242047661207552)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call blocksCreateUsingGETCall(String apiKey, String authToken, String ct0, String screenName, String userId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/base/apitools/blocksCreate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (apiKey != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("apiKey", apiKey));
        if (authToken != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("auth_token", authToken));
        if (ct0 != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ct0", ct0));
        if (screenName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("screenName", screenName));
        if (userId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("userId", userId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call blocksCreateUsingGETValidateBeforeCall(String apiKey, String authToken, String ct0, String screenName, String userId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling blocksCreateUsingGET(Async)");
        }
        
        // verify the required parameter 'authToken' is set
        if (authToken == null) {
            throw new ApiException("Missing the required parameter 'authToken' when calling blocksCreateUsingGET(Async)");
        }
        
        // verify the required parameter 'ct0' is set
        if (ct0 == null) {
            throw new ApiException("Missing the required parameter 'ct0' when calling blocksCreateUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = blocksCreateUsingGETCall(apiKey, authToken, ct0, screenName, userId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * blocks Create
     * See details  https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/mute-block-report-users/api-reference/post-blocks-create
     * @param apiKey  (required)
     * @param authToken  (required)
     * @param ct0  (required)
     * @param screenName  (optional)
     * @param userId  (optional, default to 1574242047661207552)
     * @return ResultT
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResultT blocksCreateUsingGET(String apiKey, String authToken, String ct0, String screenName, String userId) throws ApiException {
        ApiResponse<ResultT> resp = blocksCreateUsingGETWithHttpInfo(apiKey, authToken, ct0, screenName, userId);
        return resp.getData();
    }

    /**
     * blocks Create
     * See details  https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/mute-block-report-users/api-reference/post-blocks-create
     * @param apiKey  (required)
     * @param authToken  (required)
     * @param ct0  (required)
     * @param screenName  (optional)
     * @param userId  (optional, default to 1574242047661207552)
     * @return ApiResponse&lt;ResultT&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResultT> blocksCreateUsingGETWithHttpInfo(String apiKey, String authToken, String ct0, String screenName, String userId) throws ApiException {
        com.squareup.okhttp.Call call = blocksCreateUsingGETValidateBeforeCall(apiKey, authToken, ct0, screenName, userId, null, null);
        Type localVarReturnType = new TypeToken<ResultT>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * blocks Create (asynchronously)
     * See details  https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/mute-block-report-users/api-reference/post-blocks-create
     * @param apiKey  (required)
     * @param authToken  (required)
     * @param ct0  (required)
     * @param screenName  (optional)
     * @param userId  (optional, default to 1574242047661207552)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call blocksCreateUsingGETAsync(String apiKey, String authToken, String ct0, String screenName, String userId, final ApiCallback<ResultT> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = blocksCreateUsingGETValidateBeforeCall(apiKey, authToken, ct0, screenName, userId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResultT>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for blocksCreateUsingPOST
     * @param apiKey  (required)
     * @param authToken  (required)
     * @param ct0  (required)
     * @param screenName  (optional)
     * @param userId  (optional, default to 1574242047661207552)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call blocksCreateUsingPOSTCall(String apiKey, String authToken, String ct0, String screenName, String userId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/base/apitools/blocksCreate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (apiKey != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("apiKey", apiKey));
        if (authToken != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("auth_token", authToken));
        if (ct0 != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ct0", ct0));
        if (screenName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("screenName", screenName));
        if (userId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("userId", userId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call blocksCreateUsingPOSTValidateBeforeCall(String apiKey, String authToken, String ct0, String screenName, String userId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling blocksCreateUsingPOST(Async)");
        }
        
        // verify the required parameter 'authToken' is set
        if (authToken == null) {
            throw new ApiException("Missing the required parameter 'authToken' when calling blocksCreateUsingPOST(Async)");
        }
        
        // verify the required parameter 'ct0' is set
        if (ct0 == null) {
            throw new ApiException("Missing the required parameter 'ct0' when calling blocksCreateUsingPOST(Async)");
        }
        

        com.squareup.okhttp.Call call = blocksCreateUsingPOSTCall(apiKey, authToken, ct0, screenName, userId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * blocks Create
     * See details  https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/mute-block-report-users/api-reference/post-blocks-create
     * @param apiKey  (required)
     * @param authToken  (required)
     * @param ct0  (required)
     * @param screenName  (optional)
     * @param userId  (optional, default to 1574242047661207552)
     * @return ResultT
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResultT blocksCreateUsingPOST(String apiKey, String authToken, String ct0, String screenName, String userId) throws ApiException {
        ApiResponse<ResultT> resp = blocksCreateUsingPOSTWithHttpInfo(apiKey, authToken, ct0, screenName, userId);
        return resp.getData();
    }

    /**
     * blocks Create
     * See details  https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/mute-block-report-users/api-reference/post-blocks-create
     * @param apiKey  (required)
     * @param authToken  (required)
     * @param ct0  (required)
     * @param screenName  (optional)
     * @param userId  (optional, default to 1574242047661207552)
     * @return ApiResponse&lt;ResultT&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResultT> blocksCreateUsingPOSTWithHttpInfo(String apiKey, String authToken, String ct0, String screenName, String userId) throws ApiException {
        com.squareup.okhttp.Call call = blocksCreateUsingPOSTValidateBeforeCall(apiKey, authToken, ct0, screenName, userId, null, null);
        Type localVarReturnType = new TypeToken<ResultT>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * blocks Create (asynchronously)
     * See details  https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/mute-block-report-users/api-reference/post-blocks-create
     * @param apiKey  (required)
     * @param authToken  (required)
     * @param ct0  (required)
     * @param screenName  (optional)
     * @param userId  (optional, default to 1574242047661207552)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call blocksCreateUsingPOSTAsync(String apiKey, String authToken, String ct0, String screenName, String userId, final ApiCallback<ResultT> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = blocksCreateUsingPOSTValidateBeforeCall(apiKey, authToken, ct0, screenName, userId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResultT>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for blocksDestroyUsingGET
     * @param apiKey  (required)
     * @param authToken  (required)
     * @param ct0  (required)
     * @param screenName  (optional)
     * @param userId  (optional, default to 44196397)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call blocksDestroyUsingGETCall(String apiKey, String authToken, String ct0, String screenName, String userId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/base/apitools/blocksDestroy";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (apiKey != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("apiKey", apiKey));
        if (authToken != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("auth_token", authToken));
        if (ct0 != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ct0", ct0));
        if (screenName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("screenName", screenName));
        if (userId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("userId", userId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call blocksDestroyUsingGETValidateBeforeCall(String apiKey, String authToken, String ct0, String screenName, String userId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling blocksDestroyUsingGET(Async)");
        }
        
        // verify the required parameter 'authToken' is set
        if (authToken == null) {
            throw new ApiException("Missing the required parameter 'authToken' when calling blocksDestroyUsingGET(Async)");
        }
        
        // verify the required parameter 'ct0' is set
        if (ct0 == null) {
            throw new ApiException("Missing the required parameter 'ct0' when calling blocksDestroyUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = blocksDestroyUsingGETCall(apiKey, authToken, ct0, screenName, userId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * blocks Destroy
     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/mute-block-report-users/api-reference/post-blocks-destroy
     * @param apiKey  (required)
     * @param authToken  (required)
     * @param ct0  (required)
     * @param screenName  (optional)
     * @param userId  (optional, default to 44196397)
     * @return ResultT
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResultT blocksDestroyUsingGET(String apiKey, String authToken, String ct0, String screenName, String userId) throws ApiException {
        ApiResponse<ResultT> resp = blocksDestroyUsingGETWithHttpInfo(apiKey, authToken, ct0, screenName, userId);
        return resp.getData();
    }

    /**
     * blocks Destroy
     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/mute-block-report-users/api-reference/post-blocks-destroy
     * @param apiKey  (required)
     * @param authToken  (required)
     * @param ct0  (required)
     * @param screenName  (optional)
     * @param userId  (optional, default to 44196397)
     * @return ApiResponse&lt;ResultT&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResultT> blocksDestroyUsingGETWithHttpInfo(String apiKey, String authToken, String ct0, String screenName, String userId) throws ApiException {
        com.squareup.okhttp.Call call = blocksDestroyUsingGETValidateBeforeCall(apiKey, authToken, ct0, screenName, userId, null, null);
        Type localVarReturnType = new TypeToken<ResultT>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * blocks Destroy (asynchronously)
     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/mute-block-report-users/api-reference/post-blocks-destroy
     * @param apiKey  (required)
     * @param authToken  (required)
     * @param ct0  (required)
     * @param screenName  (optional)
     * @param userId  (optional, default to 44196397)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call blocksDestroyUsingGETAsync(String apiKey, String authToken, String ct0, String screenName, String userId, final ApiCallback<ResultT> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = blocksDestroyUsingGETValidateBeforeCall(apiKey, authToken, ct0, screenName, userId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResultT>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for blocksDestroyUsingPOST
     * @param apiKey  (required)
     * @param authToken  (required)
     * @param ct0  (required)
     * @param screenName  (optional)
     * @param userId  (optional, default to 44196397)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call blocksDestroyUsingPOSTCall(String apiKey, String authToken, String ct0, String screenName, String userId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/base/apitools/blocksDestroy";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (apiKey != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("apiKey", apiKey));
        if (authToken != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("auth_token", authToken));
        if (ct0 != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ct0", ct0));
        if (screenName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("screenName", screenName));
        if (userId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("userId", userId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call blocksDestroyUsingPOSTValidateBeforeCall(String apiKey, String authToken, String ct0, String screenName, String userId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling blocksDestroyUsingPOST(Async)");
        }
        
        // verify the required parameter 'authToken' is set
        if (authToken == null) {
            throw new ApiException("Missing the required parameter 'authToken' when calling blocksDestroyUsingPOST(Async)");
        }
        
        // verify the required parameter 'ct0' is set
        if (ct0 == null) {
            throw new ApiException("Missing the required parameter 'ct0' when calling blocksDestroyUsingPOST(Async)");
        }
        

        com.squareup.okhttp.Call call = blocksDestroyUsingPOSTCall(apiKey, authToken, ct0, screenName, userId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * blocks Destroy
     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/mute-block-report-users/api-reference/post-blocks-destroy
     * @param apiKey  (required)
     * @param authToken  (required)
     * @param ct0  (required)
     * @param screenName  (optional)
     * @param userId  (optional, default to 44196397)
     * @return ResultT
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResultT blocksDestroyUsingPOST(String apiKey, String authToken, String ct0, String screenName, String userId) throws ApiException {
        ApiResponse<ResultT> resp = blocksDestroyUsingPOSTWithHttpInfo(apiKey, authToken, ct0, screenName, userId);
        return resp.getData();
    }

    /**
     * blocks Destroy
     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/mute-block-report-users/api-reference/post-blocks-destroy
     * @param apiKey  (required)
     * @param authToken  (required)
     * @param ct0  (required)
     * @param screenName  (optional)
     * @param userId  (optional, default to 44196397)
     * @return ApiResponse&lt;ResultT&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResultT> blocksDestroyUsingPOSTWithHttpInfo(String apiKey, String authToken, String ct0, String screenName, String userId) throws ApiException {
        com.squareup.okhttp.Call call = blocksDestroyUsingPOSTValidateBeforeCall(apiKey, authToken, ct0, screenName, userId, null, null);
        Type localVarReturnType = new TypeToken<ResultT>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * blocks Destroy (asynchronously)
     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/mute-block-report-users/api-reference/post-blocks-destroy
     * @param apiKey  (required)
     * @param authToken  (required)
     * @param ct0  (required)
     * @param screenName  (optional)
     * @param userId  (optional, default to 44196397)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call blocksDestroyUsingPOSTAsync(String apiKey, String authToken, String ct0, String screenName, String userId, final ApiCallback<ResultT> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = blocksDestroyUsingPOSTValidateBeforeCall(apiKey, authToken, ct0, screenName, userId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResultT>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getListByUserIdOrScreenNameUsingGET
     * @param apiKey  (required)
     * @param screenName  (optional, default to elonmusk)
     * @param userId  (optional, default to 1574242047661207552)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getListByUserIdOrScreenNameUsingGETCall(String apiKey, String screenName, String userId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/base/apitools/listByUserIdOrScreenName";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (apiKey != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("apiKey", apiKey));
        if (screenName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("screenName", screenName));
        if (userId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("userId", userId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getListByUserIdOrScreenNameUsingGETValidateBeforeCall(String apiKey, String screenName, String userId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling getListByUserIdOrScreenNameUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = getListByUserIdOrScreenNameUsingGETCall(apiKey, screenName, userId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get List by user_id or screen_name(get-lists-list)
     * See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/get-lists-list
     * @param apiKey  (required)
     * @param screenName  (optional, default to elonmusk)
     * @param userId  (optional, default to 1574242047661207552)
     * @return ResultT
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResultT getListByUserIdOrScreenNameUsingGET(String apiKey, String screenName, String userId) throws ApiException {
        ApiResponse<ResultT> resp = getListByUserIdOrScreenNameUsingGETWithHttpInfo(apiKey, screenName, userId);
        return resp.getData();
    }

    /**
     * Get List by user_id or screen_name(get-lists-list)
     * See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/get-lists-list
     * @param apiKey  (required)
     * @param screenName  (optional, default to elonmusk)
     * @param userId  (optional, default to 1574242047661207552)
     * @return ApiResponse&lt;ResultT&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResultT> getListByUserIdOrScreenNameUsingGETWithHttpInfo(String apiKey, String screenName, String userId) throws ApiException {
        com.squareup.okhttp.Call call = getListByUserIdOrScreenNameUsingGETValidateBeforeCall(apiKey, screenName, userId, null, null);
        Type localVarReturnType = new TypeToken<ResultT>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get List by user_id or screen_name(get-lists-list) (asynchronously)
     * See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/get-lists-list
     * @param apiKey  (required)
     * @param screenName  (optional, default to elonmusk)
     * @param userId  (optional, default to 1574242047661207552)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getListByUserIdOrScreenNameUsingGETAsync(String apiKey, String screenName, String userId, final ApiCallback<ResultT> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getListByUserIdOrScreenNameUsingGETValidateBeforeCall(apiKey, screenName, userId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResultT>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getListByUserIdOrScreenNameUsingPOST
     * @param apiKey  (required)
     * @param screenName  (optional, default to elonmusk)
     * @param userId  (optional, default to 1574242047661207552)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getListByUserIdOrScreenNameUsingPOSTCall(String apiKey, String screenName, String userId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/base/apitools/listByUserIdOrScreenName";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (apiKey != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("apiKey", apiKey));
        if (screenName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("screenName", screenName));
        if (userId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("userId", userId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getListByUserIdOrScreenNameUsingPOSTValidateBeforeCall(String apiKey, String screenName, String userId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling getListByUserIdOrScreenNameUsingPOST(Async)");
        }
        

        com.squareup.okhttp.Call call = getListByUserIdOrScreenNameUsingPOSTCall(apiKey, screenName, userId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get List by user_id or screen_name(get-lists-list)
     * See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/get-lists-list
     * @param apiKey  (required)
     * @param screenName  (optional, default to elonmusk)
     * @param userId  (optional, default to 1574242047661207552)
     * @return ResultT
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResultT getListByUserIdOrScreenNameUsingPOST(String apiKey, String screenName, String userId) throws ApiException {
        ApiResponse<ResultT> resp = getListByUserIdOrScreenNameUsingPOSTWithHttpInfo(apiKey, screenName, userId);
        return resp.getData();
    }

    /**
     * Get List by user_id or screen_name(get-lists-list)
     * See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/get-lists-list
     * @param apiKey  (required)
     * @param screenName  (optional, default to elonmusk)
     * @param userId  (optional, default to 1574242047661207552)
     * @return ApiResponse&lt;ResultT&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResultT> getListByUserIdOrScreenNameUsingPOSTWithHttpInfo(String apiKey, String screenName, String userId) throws ApiException {
        com.squareup.okhttp.Call call = getListByUserIdOrScreenNameUsingPOSTValidateBeforeCall(apiKey, screenName, userId, null, null);
        Type localVarReturnType = new TypeToken<ResultT>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get List by user_id or screen_name(get-lists-list) (asynchronously)
     * See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/get-lists-list
     * @param apiKey  (required)
     * @param screenName  (optional, default to elonmusk)
     * @param userId  (optional, default to 1574242047661207552)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getListByUserIdOrScreenNameUsingPOSTAsync(String apiKey, String screenName, String userId, final ApiCallback<ResultT> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getListByUserIdOrScreenNameUsingPOSTValidateBeforeCall(apiKey, screenName, userId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResultT>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getListMembersByListIdUsingGET
     * @param apiKey  (required)
     * @param listId  (required)
     * @param cursor  (optional, default to -1)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getListMembersByListIdUsingGETCall(String apiKey, String listId, String cursor, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/base/apitools/listMembersByListId";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (apiKey != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("apiKey", apiKey));
        if (cursor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cursor", cursor));
        if (listId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("listId", listId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getListMembersByListIdUsingGETValidateBeforeCall(String apiKey, String listId, String cursor, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling getListMembersByListIdUsingGET(Async)");
        }
        
        // verify the required parameter 'listId' is set
        if (listId == null) {
            throw new ApiException("Missing the required parameter 'listId' when calling getListMembersByListIdUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = getListMembersByListIdUsingGETCall(apiKey, listId, cursor, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get List Members By ListId (get-lists-members)
     * See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/get-lists-members
     * @param apiKey  (required)
     * @param listId  (required)
     * @param cursor  (optional, default to -1)
     * @return ResultT
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResultT getListMembersByListIdUsingGET(String apiKey, String listId, String cursor) throws ApiException {
        ApiResponse<ResultT> resp = getListMembersByListIdUsingGETWithHttpInfo(apiKey, listId, cursor);
        return resp.getData();
    }

    /**
     * Get List Members By ListId (get-lists-members)
     * See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/get-lists-members
     * @param apiKey  (required)
     * @param listId  (required)
     * @param cursor  (optional, default to -1)
     * @return ApiResponse&lt;ResultT&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResultT> getListMembersByListIdUsingGETWithHttpInfo(String apiKey, String listId, String cursor) throws ApiException {
        com.squareup.okhttp.Call call = getListMembersByListIdUsingGETValidateBeforeCall(apiKey, listId, cursor, null, null);
        Type localVarReturnType = new TypeToken<ResultT>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get List Members By ListId (get-lists-members) (asynchronously)
     * See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/get-lists-members
     * @param apiKey  (required)
     * @param listId  (required)
     * @param cursor  (optional, default to -1)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getListMembersByListIdUsingGETAsync(String apiKey, String listId, String cursor, final ApiCallback<ResultT> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getListMembersByListIdUsingGETValidateBeforeCall(apiKey, listId, cursor, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResultT>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getListMembersByListIdUsingPOST
     * @param apiKey  (required)
     * @param listId  (required)
     * @param cursor  (optional, default to -1)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getListMembersByListIdUsingPOSTCall(String apiKey, String listId, String cursor, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/base/apitools/listMembersByListId";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (apiKey != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("apiKey", apiKey));
        if (cursor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cursor", cursor));
        if (listId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("listId", listId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getListMembersByListIdUsingPOSTValidateBeforeCall(String apiKey, String listId, String cursor, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling getListMembersByListIdUsingPOST(Async)");
        }
        
        // verify the required parameter 'listId' is set
        if (listId == null) {
            throw new ApiException("Missing the required parameter 'listId' when calling getListMembersByListIdUsingPOST(Async)");
        }
        

        com.squareup.okhttp.Call call = getListMembersByListIdUsingPOSTCall(apiKey, listId, cursor, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get List Members By ListId (get-lists-members)
     * See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/get-lists-members
     * @param apiKey  (required)
     * @param listId  (required)
     * @param cursor  (optional, default to -1)
     * @return ResultT
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResultT getListMembersByListIdUsingPOST(String apiKey, String listId, String cursor) throws ApiException {
        ApiResponse<ResultT> resp = getListMembersByListIdUsingPOSTWithHttpInfo(apiKey, listId, cursor);
        return resp.getData();
    }

    /**
     * Get List Members By ListId (get-lists-members)
     * See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/get-lists-members
     * @param apiKey  (required)
     * @param listId  (required)
     * @param cursor  (optional, default to -1)
     * @return ApiResponse&lt;ResultT&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResultT> getListMembersByListIdUsingPOSTWithHttpInfo(String apiKey, String listId, String cursor) throws ApiException {
        com.squareup.okhttp.Call call = getListMembersByListIdUsingPOSTValidateBeforeCall(apiKey, listId, cursor, null, null);
        Type localVarReturnType = new TypeToken<ResultT>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get List Members By ListId (get-lists-members) (asynchronously)
     * See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/get-lists-members
     * @param apiKey  (required)
     * @param listId  (required)
     * @param cursor  (optional, default to -1)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getListMembersByListIdUsingPOSTAsync(String apiKey, String listId, String cursor, final ApiCallback<ResultT> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getListMembersByListIdUsingPOSTValidateBeforeCall(apiKey, listId, cursor, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResultT>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getUserByIdOrNameLookUpUsingGET
     * @param apiKey  (required)
     * @param screenName  (optional, default to elonmusk)
     * @param userId  (optional, default to 1574242047661207552)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getUserByIdOrNameLookUpUsingGETCall(String apiKey, String screenName, String userId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/base/apitools/uerByIdOrNameLookUp";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (apiKey != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("apiKey", apiKey));
        if (screenName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("screenName", screenName));
        if (userId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("userId", userId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getUserByIdOrNameLookUpUsingGETValidateBeforeCall(String apiKey, String screenName, String userId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling getUserByIdOrNameLookUpUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = getUserByIdOrNameLookUpUsingGETCall(apiKey, screenName, userId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get user information based on username or id (lookup)
     * See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-users-lookup
     * @param apiKey  (required)
     * @param screenName  (optional, default to elonmusk)
     * @param userId  (optional, default to 1574242047661207552)
     * @return ResultT
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResultT getUserByIdOrNameLookUpUsingGET(String apiKey, String screenName, String userId) throws ApiException {
        ApiResponse<ResultT> resp = getUserByIdOrNameLookUpUsingGETWithHttpInfo(apiKey, screenName, userId);
        return resp.getData();
    }

    /**
     * Get user information based on username or id (lookup)
     * See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-users-lookup
     * @param apiKey  (required)
     * @param screenName  (optional, default to elonmusk)
     * @param userId  (optional, default to 1574242047661207552)
     * @return ApiResponse&lt;ResultT&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResultT> getUserByIdOrNameLookUpUsingGETWithHttpInfo(String apiKey, String screenName, String userId) throws ApiException {
        com.squareup.okhttp.Call call = getUserByIdOrNameLookUpUsingGETValidateBeforeCall(apiKey, screenName, userId, null, null);
        Type localVarReturnType = new TypeToken<ResultT>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get user information based on username or id (lookup) (asynchronously)
     * See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-users-lookup
     * @param apiKey  (required)
     * @param screenName  (optional, default to elonmusk)
     * @param userId  (optional, default to 1574242047661207552)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getUserByIdOrNameLookUpUsingGETAsync(String apiKey, String screenName, String userId, final ApiCallback<ResultT> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getUserByIdOrNameLookUpUsingGETValidateBeforeCall(apiKey, screenName, userId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResultT>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getUserByIdOrNameLookUpUsingPOST
     * @param apiKey  (required)
     * @param screenName  (optional, default to elonmusk)
     * @param userId  (optional, default to 1574242047661207552)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getUserByIdOrNameLookUpUsingPOSTCall(String apiKey, String screenName, String userId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/base/apitools/uerByIdOrNameLookUp";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (apiKey != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("apiKey", apiKey));
        if (screenName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("screenName", screenName));
        if (userId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("userId", userId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getUserByIdOrNameLookUpUsingPOSTValidateBeforeCall(String apiKey, String screenName, String userId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling getUserByIdOrNameLookUpUsingPOST(Async)");
        }
        

        com.squareup.okhttp.Call call = getUserByIdOrNameLookUpUsingPOSTCall(apiKey, screenName, userId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get user information based on username or id (lookup)
     * See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-users-lookup
     * @param apiKey  (required)
     * @param screenName  (optional, default to elonmusk)
     * @param userId  (optional, default to 1574242047661207552)
     * @return ResultT
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResultT getUserByIdOrNameLookUpUsingPOST(String apiKey, String screenName, String userId) throws ApiException {
        ApiResponse<ResultT> resp = getUserByIdOrNameLookUpUsingPOSTWithHttpInfo(apiKey, screenName, userId);
        return resp.getData();
    }

    /**
     * Get user information based on username or id (lookup)
     * See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-users-lookup
     * @param apiKey  (required)
     * @param screenName  (optional, default to elonmusk)
     * @param userId  (optional, default to 1574242047661207552)
     * @return ApiResponse&lt;ResultT&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResultT> getUserByIdOrNameLookUpUsingPOSTWithHttpInfo(String apiKey, String screenName, String userId) throws ApiException {
        com.squareup.okhttp.Call call = getUserByIdOrNameLookUpUsingPOSTValidateBeforeCall(apiKey, screenName, userId, null, null);
        Type localVarReturnType = new TypeToken<ResultT>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get user information based on username or id (lookup) (asynchronously)
     * See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-users-lookup
     * @param apiKey  (required)
     * @param screenName  (optional, default to elonmusk)
     * @param userId  (optional, default to 1574242047661207552)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getUserByIdOrNameLookUpUsingPOSTAsync(String apiKey, String screenName, String userId, final ApiCallback<ResultT> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getUserByIdOrNameLookUpUsingPOSTValidateBeforeCall(apiKey, screenName, userId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResultT>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getUserByIdOrNameShowUsingGET
     * @param apiKey  (required)
     * @param screenName  (optional, default to elonmusk)
     * @param userId  (optional, default to 1574242047661207552)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getUserByIdOrNameShowUsingGETCall(String apiKey, String screenName, String userId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/base/apitools/uerByIdOrNameShow";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (apiKey != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("apiKey", apiKey));
        if (screenName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("screenName", screenName));
        if (userId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("userId", userId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getUserByIdOrNameShowUsingGETValidateBeforeCall(String apiKey, String screenName, String userId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling getUserByIdOrNameShowUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = getUserByIdOrNameShowUsingGETCall(apiKey, screenName, userId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get user information based on username or id (show)
     * See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-users-show
     * @param apiKey  (required)
     * @param screenName  (optional, default to elonmusk)
     * @param userId  (optional, default to 1574242047661207552)
     * @return ResultT
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResultT getUserByIdOrNameShowUsingGET(String apiKey, String screenName, String userId) throws ApiException {
        ApiResponse<ResultT> resp = getUserByIdOrNameShowUsingGETWithHttpInfo(apiKey, screenName, userId);
        return resp.getData();
    }

    /**
     * Get user information based on username or id (show)
     * See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-users-show
     * @param apiKey  (required)
     * @param screenName  (optional, default to elonmusk)
     * @param userId  (optional, default to 1574242047661207552)
     * @return ApiResponse&lt;ResultT&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResultT> getUserByIdOrNameShowUsingGETWithHttpInfo(String apiKey, String screenName, String userId) throws ApiException {
        com.squareup.okhttp.Call call = getUserByIdOrNameShowUsingGETValidateBeforeCall(apiKey, screenName, userId, null, null);
        Type localVarReturnType = new TypeToken<ResultT>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get user information based on username or id (show) (asynchronously)
     * See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-users-show
     * @param apiKey  (required)
     * @param screenName  (optional, default to elonmusk)
     * @param userId  (optional, default to 1574242047661207552)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getUserByIdOrNameShowUsingGETAsync(String apiKey, String screenName, String userId, final ApiCallback<ResultT> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getUserByIdOrNameShowUsingGETValidateBeforeCall(apiKey, screenName, userId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResultT>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getUserByIdOrNameShowUsingPOST
     * @param apiKey  (required)
     * @param screenName  (optional, default to elonmusk)
     * @param userId  (optional, default to 1574242047661207552)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getUserByIdOrNameShowUsingPOSTCall(String apiKey, String screenName, String userId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/base/apitools/uerByIdOrNameShow";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (apiKey != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("apiKey", apiKey));
        if (screenName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("screenName", screenName));
        if (userId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("userId", userId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getUserByIdOrNameShowUsingPOSTValidateBeforeCall(String apiKey, String screenName, String userId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling getUserByIdOrNameShowUsingPOST(Async)");
        }
        

        com.squareup.okhttp.Call call = getUserByIdOrNameShowUsingPOSTCall(apiKey, screenName, userId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get user information based on username or id (show)
     * See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-users-show
     * @param apiKey  (required)
     * @param screenName  (optional, default to elonmusk)
     * @param userId  (optional, default to 1574242047661207552)
     * @return ResultT
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResultT getUserByIdOrNameShowUsingPOST(String apiKey, String screenName, String userId) throws ApiException {
        ApiResponse<ResultT> resp = getUserByIdOrNameShowUsingPOSTWithHttpInfo(apiKey, screenName, userId);
        return resp.getData();
    }

    /**
     * Get user information based on username or id (show)
     * See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-users-show
     * @param apiKey  (required)
     * @param screenName  (optional, default to elonmusk)
     * @param userId  (optional, default to 1574242047661207552)
     * @return ApiResponse&lt;ResultT&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResultT> getUserByIdOrNameShowUsingPOSTWithHttpInfo(String apiKey, String screenName, String userId) throws ApiException {
        com.squareup.okhttp.Call call = getUserByIdOrNameShowUsingPOSTValidateBeforeCall(apiKey, screenName, userId, null, null);
        Type localVarReturnType = new TypeToken<ResultT>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get user information based on username or id (show) (asynchronously)
     * See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-users-show
     * @param apiKey  (required)
     * @param screenName  (optional, default to elonmusk)
     * @param userId  (optional, default to 1574242047661207552)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getUserByIdOrNameShowUsingPOSTAsync(String apiKey, String screenName, String userId, final ApiCallback<ResultT> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getUserByIdOrNameShowUsingPOSTValidateBeforeCall(apiKey, screenName, userId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResultT>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for uerByIdRestIdV2UsingGET
     * @param apiKey  (required)
     * @param userId  (required)
     * @param cursor  (optional, default to -1)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call uerByIdRestIdV2UsingGETCall(String apiKey, String userId, String cursor, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/base/apitools/uerByIdRestIdV2";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (apiKey != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("apiKey", apiKey));
        if (cursor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cursor", cursor));
        if (userId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("userId", userId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call uerByIdRestIdV2UsingGETValidateBeforeCall(String apiKey, String userId, String cursor, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling uerByIdRestIdV2UsingGET(Async)");
        }
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling uerByIdRestIdV2UsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = uerByIdRestIdV2UsingGETCall(apiKey, userId, cursor, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get uerByIdRestId by V2
     * 
     * @param apiKey  (required)
     * @param userId  (required)
     * @param cursor  (optional, default to -1)
     * @return ResultT
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResultT uerByIdRestIdV2UsingGET(String apiKey, String userId, String cursor) throws ApiException {
        ApiResponse<ResultT> resp = uerByIdRestIdV2UsingGETWithHttpInfo(apiKey, userId, cursor);
        return resp.getData();
    }

    /**
     * Get uerByIdRestId by V2
     * 
     * @param apiKey  (required)
     * @param userId  (required)
     * @param cursor  (optional, default to -1)
     * @return ApiResponse&lt;ResultT&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResultT> uerByIdRestIdV2UsingGETWithHttpInfo(String apiKey, String userId, String cursor) throws ApiException {
        com.squareup.okhttp.Call call = uerByIdRestIdV2UsingGETValidateBeforeCall(apiKey, userId, cursor, null, null);
        Type localVarReturnType = new TypeToken<ResultT>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get uerByIdRestId by V2 (asynchronously)
     * 
     * @param apiKey  (required)
     * @param userId  (required)
     * @param cursor  (optional, default to -1)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call uerByIdRestIdV2UsingGETAsync(String apiKey, String userId, String cursor, final ApiCallback<ResultT> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = uerByIdRestIdV2UsingGETValidateBeforeCall(apiKey, userId, cursor, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResultT>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for uerByIdRestIdV2UsingPOST
     * @param apiKey  (required)
     * @param userId  (required)
     * @param cursor  (optional, default to -1)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call uerByIdRestIdV2UsingPOSTCall(String apiKey, String userId, String cursor, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/base/apitools/uerByIdRestIdV2";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (apiKey != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("apiKey", apiKey));
        if (cursor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cursor", cursor));
        if (userId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("userId", userId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call uerByIdRestIdV2UsingPOSTValidateBeforeCall(String apiKey, String userId, String cursor, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling uerByIdRestIdV2UsingPOST(Async)");
        }
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling uerByIdRestIdV2UsingPOST(Async)");
        }
        

        com.squareup.okhttp.Call call = uerByIdRestIdV2UsingPOSTCall(apiKey, userId, cursor, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get uerByIdRestId by V2
     * 
     * @param apiKey  (required)
     * @param userId  (required)
     * @param cursor  (optional, default to -1)
     * @return ResultT
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResultT uerByIdRestIdV2UsingPOST(String apiKey, String userId, String cursor) throws ApiException {
        ApiResponse<ResultT> resp = uerByIdRestIdV2UsingPOSTWithHttpInfo(apiKey, userId, cursor);
        return resp.getData();
    }

    /**
     * Get uerByIdRestId by V2
     * 
     * @param apiKey  (required)
     * @param userId  (required)
     * @param cursor  (optional, default to -1)
     * @return ApiResponse&lt;ResultT&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResultT> uerByIdRestIdV2UsingPOSTWithHttpInfo(String apiKey, String userId, String cursor) throws ApiException {
        com.squareup.okhttp.Call call = uerByIdRestIdV2UsingPOSTValidateBeforeCall(apiKey, userId, cursor, null, null);
        Type localVarReturnType = new TypeToken<ResultT>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get uerByIdRestId by V2 (asynchronously)
     * 
     * @param apiKey  (required)
     * @param userId  (required)
     * @param cursor  (optional, default to -1)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call uerByIdRestIdV2UsingPOSTAsync(String apiKey, String userId, String cursor, final ApiCallback<ResultT> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = uerByIdRestIdV2UsingPOSTValidateBeforeCall(apiKey, userId, cursor, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResultT>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for userByScreenNameV2UsingGET
     * @param apiKey  (required)
     * @param screenName  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call userByScreenNameV2UsingGETCall(String apiKey, String screenName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/base/apitools/userByScreenNameV2";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (apiKey != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("apiKey", apiKey));
        if (screenName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("screenName", screenName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call userByScreenNameV2UsingGETValidateBeforeCall(String apiKey, String screenName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling userByScreenNameV2UsingGET(Async)");
        }
        
        // verify the required parameter 'screenName' is set
        if (screenName == null) {
            throw new ApiException("Missing the required parameter 'screenName' when calling userByScreenNameV2UsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = userByScreenNameV2UsingGETCall(apiKey, screenName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get userByScreenName by V2
     * 
     * @param apiKey  (required)
     * @param screenName  (required)
     * @return ResultT
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResultT userByScreenNameV2UsingGET(String apiKey, String screenName) throws ApiException {
        ApiResponse<ResultT> resp = userByScreenNameV2UsingGETWithHttpInfo(apiKey, screenName);
        return resp.getData();
    }

    /**
     * Get userByScreenName by V2
     * 
     * @param apiKey  (required)
     * @param screenName  (required)
     * @return ApiResponse&lt;ResultT&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResultT> userByScreenNameV2UsingGETWithHttpInfo(String apiKey, String screenName) throws ApiException {
        com.squareup.okhttp.Call call = userByScreenNameV2UsingGETValidateBeforeCall(apiKey, screenName, null, null);
        Type localVarReturnType = new TypeToken<ResultT>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get userByScreenName by V2 (asynchronously)
     * 
     * @param apiKey  (required)
     * @param screenName  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call userByScreenNameV2UsingGETAsync(String apiKey, String screenName, final ApiCallback<ResultT> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = userByScreenNameV2UsingGETValidateBeforeCall(apiKey, screenName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResultT>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for userByScreenNameV2UsingPOST
     * @param apiKey  (required)
     * @param screenName  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call userByScreenNameV2UsingPOSTCall(String apiKey, String screenName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/base/apitools/userByScreenNameV2";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (apiKey != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("apiKey", apiKey));
        if (screenName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("screenName", screenName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call userByScreenNameV2UsingPOSTValidateBeforeCall(String apiKey, String screenName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling userByScreenNameV2UsingPOST(Async)");
        }
        
        // verify the required parameter 'screenName' is set
        if (screenName == null) {
            throw new ApiException("Missing the required parameter 'screenName' when calling userByScreenNameV2UsingPOST(Async)");
        }
        

        com.squareup.okhttp.Call call = userByScreenNameV2UsingPOSTCall(apiKey, screenName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get userByScreenName by V2
     * 
     * @param apiKey  (required)
     * @param screenName  (required)
     * @return ResultT
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResultT userByScreenNameV2UsingPOST(String apiKey, String screenName) throws ApiException {
        ApiResponse<ResultT> resp = userByScreenNameV2UsingPOSTWithHttpInfo(apiKey, screenName);
        return resp.getData();
    }

    /**
     * Get userByScreenName by V2
     * 
     * @param apiKey  (required)
     * @param screenName  (required)
     * @return ApiResponse&lt;ResultT&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResultT> userByScreenNameV2UsingPOSTWithHttpInfo(String apiKey, String screenName) throws ApiException {
        com.squareup.okhttp.Call call = userByScreenNameV2UsingPOSTValidateBeforeCall(apiKey, screenName, null, null);
        Type localVarReturnType = new TypeToken<ResultT>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get userByScreenName by V2 (asynchronously)
     * 
     * @param apiKey  (required)
     * @param screenName  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call userByScreenNameV2UsingPOSTAsync(String apiKey, String screenName, final ApiCallback<ResultT> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = userByScreenNameV2UsingPOSTValidateBeforeCall(apiKey, screenName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResultT>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for userTimelineUsingGET
     * @param apiKey  (required)
     * @param userId  (required)
     * @param cursor  (optional, default to -1)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call userTimelineUsingGETCall(String apiKey, String userId, String cursor, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/base/apitools/userTimeline";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (apiKey != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("apiKey", apiKey));
        if (cursor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cursor", cursor));
        if (userId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("userId", userId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call userTimelineUsingGETValidateBeforeCall(String apiKey, String userId, String cursor, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling userTimelineUsingGET(Async)");
        }
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling userTimelineUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = userTimelineUsingGETCall(apiKey, userId, cursor, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get UserTimeline  tweets info
     * 
     * @param apiKey  (required)
     * @param userId  (required)
     * @param cursor  (optional, default to -1)
     * @return ResultT
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResultT userTimelineUsingGET(String apiKey, String userId, String cursor) throws ApiException {
        ApiResponse<ResultT> resp = userTimelineUsingGETWithHttpInfo(apiKey, userId, cursor);
        return resp.getData();
    }

    /**
     * Get UserTimeline  tweets info
     * 
     * @param apiKey  (required)
     * @param userId  (required)
     * @param cursor  (optional, default to -1)
     * @return ApiResponse&lt;ResultT&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResultT> userTimelineUsingGETWithHttpInfo(String apiKey, String userId, String cursor) throws ApiException {
        com.squareup.okhttp.Call call = userTimelineUsingGETValidateBeforeCall(apiKey, userId, cursor, null, null);
        Type localVarReturnType = new TypeToken<ResultT>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get UserTimeline  tweets info (asynchronously)
     * 
     * @param apiKey  (required)
     * @param userId  (required)
     * @param cursor  (optional, default to -1)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call userTimelineUsingGETAsync(String apiKey, String userId, String cursor, final ApiCallback<ResultT> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = userTimelineUsingGETValidateBeforeCall(apiKey, userId, cursor, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResultT>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for userTimelineUsingPOST
     * @param apiKey  (required)
     * @param userId  (required)
     * @param cursor  (optional, default to -1)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call userTimelineUsingPOSTCall(String apiKey, String userId, String cursor, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/base/apitools/userTimeline";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (apiKey != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("apiKey", apiKey));
        if (cursor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cursor", cursor));
        if (userId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("userId", userId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call userTimelineUsingPOSTValidateBeforeCall(String apiKey, String userId, String cursor, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling userTimelineUsingPOST(Async)");
        }
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling userTimelineUsingPOST(Async)");
        }
        

        com.squareup.okhttp.Call call = userTimelineUsingPOSTCall(apiKey, userId, cursor, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get UserTimeline  tweets info
     * 
     * @param apiKey  (required)
     * @param userId  (required)
     * @param cursor  (optional, default to -1)
     * @return ResultT
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResultT userTimelineUsingPOST(String apiKey, String userId, String cursor) throws ApiException {
        ApiResponse<ResultT> resp = userTimelineUsingPOSTWithHttpInfo(apiKey, userId, cursor);
        return resp.getData();
    }

    /**
     * Get UserTimeline  tweets info
     * 
     * @param apiKey  (required)
     * @param userId  (required)
     * @param cursor  (optional, default to -1)
     * @return ApiResponse&lt;ResultT&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResultT> userTimelineUsingPOSTWithHttpInfo(String apiKey, String userId, String cursor) throws ApiException {
        com.squareup.okhttp.Call call = userTimelineUsingPOSTValidateBeforeCall(apiKey, userId, cursor, null, null);
        Type localVarReturnType = new TypeToken<ResultT>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get UserTimeline  tweets info (asynchronously)
     * 
     * @param apiKey  (required)
     * @param userId  (required)
     * @param cursor  (optional, default to -1)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call userTimelineUsingPOSTAsync(String apiKey, String userId, String cursor, final ApiCallback<ResultT> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = userTimelineUsingPOSTValidateBeforeCall(apiKey, userId, cursor, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResultT>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for userTweetsV2UsingGET
     * @param apiKey  (required)
     * @param userId  (required)
     * @param cursor  (optional, default to -1)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call userTweetsV2UsingGETCall(String apiKey, String userId, String cursor, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/base/apitools/userTweetsV2";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (apiKey != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("apiKey", apiKey));
        if (cursor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cursor", cursor));
        if (userId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("userId", userId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call userTweetsV2UsingGETValidateBeforeCall(String apiKey, String userId, String cursor, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling userTweetsV2UsingGET(Async)");
        }
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling userTweetsV2UsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = userTweetsV2UsingGETCall(apiKey, userId, cursor, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get UserTweets by V2
     * 
     * @param apiKey  (required)
     * @param userId  (required)
     * @param cursor  (optional, default to -1)
     * @return ResultT
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResultT userTweetsV2UsingGET(String apiKey, String userId, String cursor) throws ApiException {
        ApiResponse<ResultT> resp = userTweetsV2UsingGETWithHttpInfo(apiKey, userId, cursor);
        return resp.getData();
    }

    /**
     * Get UserTweets by V2
     * 
     * @param apiKey  (required)
     * @param userId  (required)
     * @param cursor  (optional, default to -1)
     * @return ApiResponse&lt;ResultT&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResultT> userTweetsV2UsingGETWithHttpInfo(String apiKey, String userId, String cursor) throws ApiException {
        com.squareup.okhttp.Call call = userTweetsV2UsingGETValidateBeforeCall(apiKey, userId, cursor, null, null);
        Type localVarReturnType = new TypeToken<ResultT>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get UserTweets by V2 (asynchronously)
     * 
     * @param apiKey  (required)
     * @param userId  (required)
     * @param cursor  (optional, default to -1)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call userTweetsV2UsingGETAsync(String apiKey, String userId, String cursor, final ApiCallback<ResultT> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = userTweetsV2UsingGETValidateBeforeCall(apiKey, userId, cursor, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResultT>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for userTweetsV2UsingPOST
     * @param apiKey  (required)
     * @param userId  (required)
     * @param cursor  (optional, default to -1)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call userTweetsV2UsingPOSTCall(String apiKey, String userId, String cursor, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/base/apitools/userTweetsV2";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (apiKey != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("apiKey", apiKey));
        if (cursor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cursor", cursor));
        if (userId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("userId", userId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call userTweetsV2UsingPOSTValidateBeforeCall(String apiKey, String userId, String cursor, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling userTweetsV2UsingPOST(Async)");
        }
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling userTweetsV2UsingPOST(Async)");
        }
        

        com.squareup.okhttp.Call call = userTweetsV2UsingPOSTCall(apiKey, userId, cursor, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get UserTweets by V2
     * 
     * @param apiKey  (required)
     * @param userId  (required)
     * @param cursor  (optional, default to -1)
     * @return ResultT
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResultT userTweetsV2UsingPOST(String apiKey, String userId, String cursor) throws ApiException {
        ApiResponse<ResultT> resp = userTweetsV2UsingPOSTWithHttpInfo(apiKey, userId, cursor);
        return resp.getData();
    }

    /**
     * Get UserTweets by V2
     * 
     * @param apiKey  (required)
     * @param userId  (required)
     * @param cursor  (optional, default to -1)
     * @return ApiResponse&lt;ResultT&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResultT> userTweetsV2UsingPOSTWithHttpInfo(String apiKey, String userId, String cursor) throws ApiException {
        com.squareup.okhttp.Call call = userTweetsV2UsingPOSTValidateBeforeCall(apiKey, userId, cursor, null, null);
        Type localVarReturnType = new TypeToken<ResultT>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get UserTweets by V2 (asynchronously)
     * 
     * @param apiKey  (required)
     * @param userId  (required)
     * @param cursor  (optional, default to -1)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call userTweetsV2UsingPOSTAsync(String apiKey, String userId, String cursor, final ApiCallback<ResultT> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = userTweetsV2UsingPOSTValidateBeforeCall(apiKey, userId, cursor, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResultT>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
