/*
 * Utools_twitter_tools_api
 * X (Twitter) API for search, Tweets, users, followers, images, media and more. Supports some v1.1 and v2 API endpoints, with more to come in the future!
 *
 * OpenAPI spec version: 1.1
 * Contact: huojiecs@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.ResultT;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TwitterSendTweesApiToolsApi {
    private ApiClient apiClient;

    public TwitterSendTweesApiToolsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TwitterSendTweesApiToolsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createRetweetUsingGET
     * @param apiKey  (required)
     * @param authToken  (required)
     * @param ct0  (required)
     * @param tweetId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createRetweetUsingGETCall(String apiKey, String authToken, String ct0, String tweetId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/base/apitools/createRetweet";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (apiKey != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("apiKey", apiKey));
        if (authToken != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("auth_token", authToken));
        if (ct0 != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ct0", ct0));
        if (tweetId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("tweetId", tweetId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createRetweetUsingGETValidateBeforeCall(String apiKey, String authToken, String ct0, String tweetId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling createRetweetUsingGET(Async)");
        }
        
        // verify the required parameter 'authToken' is set
        if (authToken == null) {
            throw new ApiException("Missing the required parameter 'authToken' when calling createRetweetUsingGET(Async)");
        }
        
        // verify the required parameter 'ct0' is set
        if (ct0 == null) {
            throw new ApiException("Missing the required parameter 'ct0' when calling createRetweetUsingGET(Async)");
        }
        
        // verify the required parameter 'tweetId' is set
        if (tweetId == null) {
            throw new ApiException("Missing the required parameter 'tweetId' when calling createRetweetUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = createRetweetUsingGETCall(apiKey, authToken, ct0, tweetId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * retweet a Tweet
     * 
     * @param apiKey  (required)
     * @param authToken  (required)
     * @param ct0  (required)
     * @param tweetId  (required)
     * @return ResultT
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResultT createRetweetUsingGET(String apiKey, String authToken, String ct0, String tweetId) throws ApiException {
        ApiResponse<ResultT> resp = createRetweetUsingGETWithHttpInfo(apiKey, authToken, ct0, tweetId);
        return resp.getData();
    }

    /**
     * retweet a Tweet
     * 
     * @param apiKey  (required)
     * @param authToken  (required)
     * @param ct0  (required)
     * @param tweetId  (required)
     * @return ApiResponse&lt;ResultT&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResultT> createRetweetUsingGETWithHttpInfo(String apiKey, String authToken, String ct0, String tweetId) throws ApiException {
        com.squareup.okhttp.Call call = createRetweetUsingGETValidateBeforeCall(apiKey, authToken, ct0, tweetId, null, null);
        Type localVarReturnType = new TypeToken<ResultT>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * retweet a Tweet (asynchronously)
     * 
     * @param apiKey  (required)
     * @param authToken  (required)
     * @param ct0  (required)
     * @param tweetId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createRetweetUsingGETAsync(String apiKey, String authToken, String ct0, String tweetId, final ApiCallback<ResultT> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createRetweetUsingGETValidateBeforeCall(apiKey, authToken, ct0, tweetId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResultT>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createRetweetUsingPOST
     * @param apiKey  (required)
     * @param authToken  (required)
     * @param ct0  (required)
     * @param tweetId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createRetweetUsingPOSTCall(String apiKey, String authToken, String ct0, String tweetId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/base/apitools/createRetweet";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (apiKey != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("apiKey", apiKey));
        if (authToken != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("auth_token", authToken));
        if (ct0 != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ct0", ct0));
        if (tweetId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("tweetId", tweetId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createRetweetUsingPOSTValidateBeforeCall(String apiKey, String authToken, String ct0, String tweetId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling createRetweetUsingPOST(Async)");
        }
        
        // verify the required parameter 'authToken' is set
        if (authToken == null) {
            throw new ApiException("Missing the required parameter 'authToken' when calling createRetweetUsingPOST(Async)");
        }
        
        // verify the required parameter 'ct0' is set
        if (ct0 == null) {
            throw new ApiException("Missing the required parameter 'ct0' when calling createRetweetUsingPOST(Async)");
        }
        
        // verify the required parameter 'tweetId' is set
        if (tweetId == null) {
            throw new ApiException("Missing the required parameter 'tweetId' when calling createRetweetUsingPOST(Async)");
        }
        

        com.squareup.okhttp.Call call = createRetweetUsingPOSTCall(apiKey, authToken, ct0, tweetId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * retweet a Tweet
     * 
     * @param apiKey  (required)
     * @param authToken  (required)
     * @param ct0  (required)
     * @param tweetId  (required)
     * @return ResultT
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResultT createRetweetUsingPOST(String apiKey, String authToken, String ct0, String tweetId) throws ApiException {
        ApiResponse<ResultT> resp = createRetweetUsingPOSTWithHttpInfo(apiKey, authToken, ct0, tweetId);
        return resp.getData();
    }

    /**
     * retweet a Tweet
     * 
     * @param apiKey  (required)
     * @param authToken  (required)
     * @param ct0  (required)
     * @param tweetId  (required)
     * @return ApiResponse&lt;ResultT&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResultT> createRetweetUsingPOSTWithHttpInfo(String apiKey, String authToken, String ct0, String tweetId) throws ApiException {
        com.squareup.okhttp.Call call = createRetweetUsingPOSTValidateBeforeCall(apiKey, authToken, ct0, tweetId, null, null);
        Type localVarReturnType = new TypeToken<ResultT>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * retweet a Tweet (asynchronously)
     * 
     * @param apiKey  (required)
     * @param authToken  (required)
     * @param ct0  (required)
     * @param tweetId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createRetweetUsingPOSTAsync(String apiKey, String authToken, String ct0, String tweetId, final ApiCallback<ResultT> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createRetweetUsingPOSTValidateBeforeCall(apiKey, authToken, ct0, tweetId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResultT>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createTweetUsingGET
     * @param apiKey  (required)
     * @param authToken  (required)
     * @param ct0  (required)
     * @param text  (required)
     * @param medias medias ids (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createTweetUsingGETCall(String apiKey, String authToken, String ct0, String text, List<String> medias, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/base/apitools/createTweet";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (apiKey != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("apiKey", apiKey));
        if (authToken != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("auth_token", authToken));
        if (ct0 != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ct0", ct0));
        if (medias != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "medias", medias));
        if (text != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("text", text));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createTweetUsingGETValidateBeforeCall(String apiKey, String authToken, String ct0, String text, List<String> medias, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling createTweetUsingGET(Async)");
        }
        
        // verify the required parameter 'authToken' is set
        if (authToken == null) {
            throw new ApiException("Missing the required parameter 'authToken' when calling createTweetUsingGET(Async)");
        }
        
        // verify the required parameter 'ct0' is set
        if (ct0 == null) {
            throw new ApiException("Missing the required parameter 'ct0' when calling createTweetUsingGET(Async)");
        }
        
        // verify the required parameter 'text' is set
        if (text == null) {
            throw new ApiException("Missing the required parameter 'text' when calling createTweetUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = createTweetUsingGETCall(apiKey, authToken, ct0, text, medias, progressListener, progressRequestListener);
        return call;

    }

    /**
     * create a Tweet
     * 
     * @param apiKey  (required)
     * @param authToken  (required)
     * @param ct0  (required)
     * @param text  (required)
     * @param medias medias ids (optional)
     * @return ResultT
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResultT createTweetUsingGET(String apiKey, String authToken, String ct0, String text, List<String> medias) throws ApiException {
        ApiResponse<ResultT> resp = createTweetUsingGETWithHttpInfo(apiKey, authToken, ct0, text, medias);
        return resp.getData();
    }

    /**
     * create a Tweet
     * 
     * @param apiKey  (required)
     * @param authToken  (required)
     * @param ct0  (required)
     * @param text  (required)
     * @param medias medias ids (optional)
     * @return ApiResponse&lt;ResultT&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResultT> createTweetUsingGETWithHttpInfo(String apiKey, String authToken, String ct0, String text, List<String> medias) throws ApiException {
        com.squareup.okhttp.Call call = createTweetUsingGETValidateBeforeCall(apiKey, authToken, ct0, text, medias, null, null);
        Type localVarReturnType = new TypeToken<ResultT>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * create a Tweet (asynchronously)
     * 
     * @param apiKey  (required)
     * @param authToken  (required)
     * @param ct0  (required)
     * @param text  (required)
     * @param medias medias ids (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createTweetUsingGETAsync(String apiKey, String authToken, String ct0, String text, List<String> medias, final ApiCallback<ResultT> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createTweetUsingGETValidateBeforeCall(apiKey, authToken, ct0, text, medias, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResultT>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createTweetUsingPOST
     * @param apiKey  (required)
     * @param authToken  (required)
     * @param ct0  (required)
     * @param text  (required)
     * @param medias medias ids (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createTweetUsingPOSTCall(String apiKey, String authToken, String ct0, String text, List<String> medias, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/base/apitools/createTweet";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (apiKey != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("apiKey", apiKey));
        if (authToken != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("auth_token", authToken));
        if (ct0 != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ct0", ct0));
        if (medias != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "medias", medias));
        if (text != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("text", text));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createTweetUsingPOSTValidateBeforeCall(String apiKey, String authToken, String ct0, String text, List<String> medias, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling createTweetUsingPOST(Async)");
        }
        
        // verify the required parameter 'authToken' is set
        if (authToken == null) {
            throw new ApiException("Missing the required parameter 'authToken' when calling createTweetUsingPOST(Async)");
        }
        
        // verify the required parameter 'ct0' is set
        if (ct0 == null) {
            throw new ApiException("Missing the required parameter 'ct0' when calling createTweetUsingPOST(Async)");
        }
        
        // verify the required parameter 'text' is set
        if (text == null) {
            throw new ApiException("Missing the required parameter 'text' when calling createTweetUsingPOST(Async)");
        }
        

        com.squareup.okhttp.Call call = createTweetUsingPOSTCall(apiKey, authToken, ct0, text, medias, progressListener, progressRequestListener);
        return call;

    }

    /**
     * create a Tweet
     * 
     * @param apiKey  (required)
     * @param authToken  (required)
     * @param ct0  (required)
     * @param text  (required)
     * @param medias medias ids (optional)
     * @return ResultT
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResultT createTweetUsingPOST(String apiKey, String authToken, String ct0, String text, List<String> medias) throws ApiException {
        ApiResponse<ResultT> resp = createTweetUsingPOSTWithHttpInfo(apiKey, authToken, ct0, text, medias);
        return resp.getData();
    }

    /**
     * create a Tweet
     * 
     * @param apiKey  (required)
     * @param authToken  (required)
     * @param ct0  (required)
     * @param text  (required)
     * @param medias medias ids (optional)
     * @return ApiResponse&lt;ResultT&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResultT> createTweetUsingPOSTWithHttpInfo(String apiKey, String authToken, String ct0, String text, List<String> medias) throws ApiException {
        com.squareup.okhttp.Call call = createTweetUsingPOSTValidateBeforeCall(apiKey, authToken, ct0, text, medias, null, null);
        Type localVarReturnType = new TypeToken<ResultT>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * create a Tweet (asynchronously)
     * 
     * @param apiKey  (required)
     * @param authToken  (required)
     * @param ct0  (required)
     * @param text  (required)
     * @param medias medias ids (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createTweetUsingPOSTAsync(String apiKey, String authToken, String ct0, String text, List<String> medias, final ApiCallback<ResultT> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createTweetUsingPOSTValidateBeforeCall(apiKey, authToken, ct0, text, medias, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResultT>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for likeTweetUsingGET
     * @param apiKey  (required)
     * @param authToken  (required)
     * @param ct0  (required)
     * @param id  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call likeTweetUsingGETCall(String apiKey, String authToken, String ct0, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/base/apitools/likeTweet";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (apiKey != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("apiKey", apiKey));
        if (authToken != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("auth_token", authToken));
        if (ct0 != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ct0", ct0));
        if (id != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("id", id));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call likeTweetUsingGETValidateBeforeCall(String apiKey, String authToken, String ct0, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling likeTweetUsingGET(Async)");
        }
        
        // verify the required parameter 'authToken' is set
        if (authToken == null) {
            throw new ApiException("Missing the required parameter 'authToken' when calling likeTweetUsingGET(Async)");
        }
        
        // verify the required parameter 'ct0' is set
        if (ct0 == null) {
            throw new ApiException("Missing the required parameter 'ct0' when calling likeTweetUsingGET(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling likeTweetUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = likeTweetUsingGETCall(apiKey, authToken, ct0, id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * like(favorites) Tweet
     * see details https://developer.twitter.com/en/docs/twitter-api/v1/tweets/post-and-engage/api-reference/post-favorites-create
     * @param apiKey  (required)
     * @param authToken  (required)
     * @param ct0  (required)
     * @param id  (required)
     * @return ResultT
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResultT likeTweetUsingGET(String apiKey, String authToken, String ct0, String id) throws ApiException {
        ApiResponse<ResultT> resp = likeTweetUsingGETWithHttpInfo(apiKey, authToken, ct0, id);
        return resp.getData();
    }

    /**
     * like(favorites) Tweet
     * see details https://developer.twitter.com/en/docs/twitter-api/v1/tweets/post-and-engage/api-reference/post-favorites-create
     * @param apiKey  (required)
     * @param authToken  (required)
     * @param ct0  (required)
     * @param id  (required)
     * @return ApiResponse&lt;ResultT&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResultT> likeTweetUsingGETWithHttpInfo(String apiKey, String authToken, String ct0, String id) throws ApiException {
        com.squareup.okhttp.Call call = likeTweetUsingGETValidateBeforeCall(apiKey, authToken, ct0, id, null, null);
        Type localVarReturnType = new TypeToken<ResultT>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * like(favorites) Tweet (asynchronously)
     * see details https://developer.twitter.com/en/docs/twitter-api/v1/tweets/post-and-engage/api-reference/post-favorites-create
     * @param apiKey  (required)
     * @param authToken  (required)
     * @param ct0  (required)
     * @param id  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call likeTweetUsingGETAsync(String apiKey, String authToken, String ct0, String id, final ApiCallback<ResultT> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = likeTweetUsingGETValidateBeforeCall(apiKey, authToken, ct0, id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResultT>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for likeTweetUsingPOST
     * @param apiKey  (required)
     * @param authToken  (required)
     * @param ct0  (required)
     * @param id  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call likeTweetUsingPOSTCall(String apiKey, String authToken, String ct0, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/base/apitools/likeTweet";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (apiKey != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("apiKey", apiKey));
        if (authToken != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("auth_token", authToken));
        if (ct0 != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ct0", ct0));
        if (id != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("id", id));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call likeTweetUsingPOSTValidateBeforeCall(String apiKey, String authToken, String ct0, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling likeTweetUsingPOST(Async)");
        }
        
        // verify the required parameter 'authToken' is set
        if (authToken == null) {
            throw new ApiException("Missing the required parameter 'authToken' when calling likeTweetUsingPOST(Async)");
        }
        
        // verify the required parameter 'ct0' is set
        if (ct0 == null) {
            throw new ApiException("Missing the required parameter 'ct0' when calling likeTweetUsingPOST(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling likeTweetUsingPOST(Async)");
        }
        

        com.squareup.okhttp.Call call = likeTweetUsingPOSTCall(apiKey, authToken, ct0, id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * like(favorites) Tweet
     * see details https://developer.twitter.com/en/docs/twitter-api/v1/tweets/post-and-engage/api-reference/post-favorites-create
     * @param apiKey  (required)
     * @param authToken  (required)
     * @param ct0  (required)
     * @param id  (required)
     * @return ResultT
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResultT likeTweetUsingPOST(String apiKey, String authToken, String ct0, String id) throws ApiException {
        ApiResponse<ResultT> resp = likeTweetUsingPOSTWithHttpInfo(apiKey, authToken, ct0, id);
        return resp.getData();
    }

    /**
     * like(favorites) Tweet
     * see details https://developer.twitter.com/en/docs/twitter-api/v1/tweets/post-and-engage/api-reference/post-favorites-create
     * @param apiKey  (required)
     * @param authToken  (required)
     * @param ct0  (required)
     * @param id  (required)
     * @return ApiResponse&lt;ResultT&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResultT> likeTweetUsingPOSTWithHttpInfo(String apiKey, String authToken, String ct0, String id) throws ApiException {
        com.squareup.okhttp.Call call = likeTweetUsingPOSTValidateBeforeCall(apiKey, authToken, ct0, id, null, null);
        Type localVarReturnType = new TypeToken<ResultT>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * like(favorites) Tweet (asynchronously)
     * see details https://developer.twitter.com/en/docs/twitter-api/v1/tweets/post-and-engage/api-reference/post-favorites-create
     * @param apiKey  (required)
     * @param authToken  (required)
     * @param ct0  (required)
     * @param id  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call likeTweetUsingPOSTAsync(String apiKey, String authToken, String ct0, String id, final ApiCallback<ResultT> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = likeTweetUsingPOSTValidateBeforeCall(apiKey, authToken, ct0, id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResultT>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for tweetReplyUsingGET
     * @param apiKey  (required)
     * @param authToken  (required)
     * @param ct0  (required)
     * @param text  (required)
     * @param tweetId  (required)
     * @param medias medias ids (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call tweetReplyUsingGETCall(String apiKey, String authToken, String ct0, String text, String tweetId, List<String> medias, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/base/apitools/tweetReply";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (apiKey != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("apiKey", apiKey));
        if (authToken != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("auth_token", authToken));
        if (ct0 != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ct0", ct0));
        if (medias != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "medias", medias));
        if (text != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("text", text));
        if (tweetId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("tweetId", tweetId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call tweetReplyUsingGETValidateBeforeCall(String apiKey, String authToken, String ct0, String text, String tweetId, List<String> medias, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling tweetReplyUsingGET(Async)");
        }
        
        // verify the required parameter 'authToken' is set
        if (authToken == null) {
            throw new ApiException("Missing the required parameter 'authToken' when calling tweetReplyUsingGET(Async)");
        }
        
        // verify the required parameter 'ct0' is set
        if (ct0 == null) {
            throw new ApiException("Missing the required parameter 'ct0' when calling tweetReplyUsingGET(Async)");
        }
        
        // verify the required parameter 'text' is set
        if (text == null) {
            throw new ApiException("Missing the required parameter 'text' when calling tweetReplyUsingGET(Async)");
        }
        
        // verify the required parameter 'tweetId' is set
        if (tweetId == null) {
            throw new ApiException("Missing the required parameter 'tweetId' when calling tweetReplyUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = tweetReplyUsingGETCall(apiKey, authToken, ct0, text, tweetId, medias, progressListener, progressRequestListener);
        return call;

    }

    /**
     * reply to tweet 
     * 
     * @param apiKey  (required)
     * @param authToken  (required)
     * @param ct0  (required)
     * @param text  (required)
     * @param tweetId  (required)
     * @param medias medias ids (optional)
     * @return ResultT
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResultT tweetReplyUsingGET(String apiKey, String authToken, String ct0, String text, String tweetId, List<String> medias) throws ApiException {
        ApiResponse<ResultT> resp = tweetReplyUsingGETWithHttpInfo(apiKey, authToken, ct0, text, tweetId, medias);
        return resp.getData();
    }

    /**
     * reply to tweet 
     * 
     * @param apiKey  (required)
     * @param authToken  (required)
     * @param ct0  (required)
     * @param text  (required)
     * @param tweetId  (required)
     * @param medias medias ids (optional)
     * @return ApiResponse&lt;ResultT&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResultT> tweetReplyUsingGETWithHttpInfo(String apiKey, String authToken, String ct0, String text, String tweetId, List<String> medias) throws ApiException {
        com.squareup.okhttp.Call call = tweetReplyUsingGETValidateBeforeCall(apiKey, authToken, ct0, text, tweetId, medias, null, null);
        Type localVarReturnType = new TypeToken<ResultT>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * reply to tweet  (asynchronously)
     * 
     * @param apiKey  (required)
     * @param authToken  (required)
     * @param ct0  (required)
     * @param text  (required)
     * @param tweetId  (required)
     * @param medias medias ids (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call tweetReplyUsingGETAsync(String apiKey, String authToken, String ct0, String text, String tweetId, List<String> medias, final ApiCallback<ResultT> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = tweetReplyUsingGETValidateBeforeCall(apiKey, authToken, ct0, text, tweetId, medias, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResultT>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for tweetReplyUsingPOST
     * @param apiKey  (required)
     * @param authToken  (required)
     * @param ct0  (required)
     * @param text  (required)
     * @param tweetId  (required)
     * @param medias medias ids (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call tweetReplyUsingPOSTCall(String apiKey, String authToken, String ct0, String text, String tweetId, List<String> medias, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/base/apitools/tweetReply";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (apiKey != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("apiKey", apiKey));
        if (authToken != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("auth_token", authToken));
        if (ct0 != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ct0", ct0));
        if (medias != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "medias", medias));
        if (text != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("text", text));
        if (tweetId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("tweetId", tweetId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call tweetReplyUsingPOSTValidateBeforeCall(String apiKey, String authToken, String ct0, String text, String tweetId, List<String> medias, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling tweetReplyUsingPOST(Async)");
        }
        
        // verify the required parameter 'authToken' is set
        if (authToken == null) {
            throw new ApiException("Missing the required parameter 'authToken' when calling tweetReplyUsingPOST(Async)");
        }
        
        // verify the required parameter 'ct0' is set
        if (ct0 == null) {
            throw new ApiException("Missing the required parameter 'ct0' when calling tweetReplyUsingPOST(Async)");
        }
        
        // verify the required parameter 'text' is set
        if (text == null) {
            throw new ApiException("Missing the required parameter 'text' when calling tweetReplyUsingPOST(Async)");
        }
        
        // verify the required parameter 'tweetId' is set
        if (tweetId == null) {
            throw new ApiException("Missing the required parameter 'tweetId' when calling tweetReplyUsingPOST(Async)");
        }
        

        com.squareup.okhttp.Call call = tweetReplyUsingPOSTCall(apiKey, authToken, ct0, text, tweetId, medias, progressListener, progressRequestListener);
        return call;

    }

    /**
     * reply to tweet 
     * 
     * @param apiKey  (required)
     * @param authToken  (required)
     * @param ct0  (required)
     * @param text  (required)
     * @param tweetId  (required)
     * @param medias medias ids (optional)
     * @return ResultT
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResultT tweetReplyUsingPOST(String apiKey, String authToken, String ct0, String text, String tweetId, List<String> medias) throws ApiException {
        ApiResponse<ResultT> resp = tweetReplyUsingPOSTWithHttpInfo(apiKey, authToken, ct0, text, tweetId, medias);
        return resp.getData();
    }

    /**
     * reply to tweet 
     * 
     * @param apiKey  (required)
     * @param authToken  (required)
     * @param ct0  (required)
     * @param text  (required)
     * @param tweetId  (required)
     * @param medias medias ids (optional)
     * @return ApiResponse&lt;ResultT&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResultT> tweetReplyUsingPOSTWithHttpInfo(String apiKey, String authToken, String ct0, String text, String tweetId, List<String> medias) throws ApiException {
        com.squareup.okhttp.Call call = tweetReplyUsingPOSTValidateBeforeCall(apiKey, authToken, ct0, text, tweetId, medias, null, null);
        Type localVarReturnType = new TypeToken<ResultT>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * reply to tweet  (asynchronously)
     * 
     * @param apiKey  (required)
     * @param authToken  (required)
     * @param ct0  (required)
     * @param text  (required)
     * @param tweetId  (required)
     * @param medias medias ids (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call tweetReplyUsingPOSTAsync(String apiKey, String authToken, String ct0, String text, String tweetId, List<String> medias, final ApiCallback<ResultT> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = tweetReplyUsingPOSTValidateBeforeCall(apiKey, authToken, ct0, text, tweetId, medias, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResultT>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for unlikeTweetUsingGET
     * @param apiKey  (required)
     * @param authToken  (required)
     * @param ct0  (required)
     * @param id  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call unlikeTweetUsingGETCall(String apiKey, String authToken, String ct0, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/base/apitools/unlikeTweet";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (apiKey != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("apiKey", apiKey));
        if (authToken != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("auth_token", authToken));
        if (ct0 != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ct0", ct0));
        if (id != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("id", id));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call unlikeTweetUsingGETValidateBeforeCall(String apiKey, String authToken, String ct0, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling unlikeTweetUsingGET(Async)");
        }
        
        // verify the required parameter 'authToken' is set
        if (authToken == null) {
            throw new ApiException("Missing the required parameter 'authToken' when calling unlikeTweetUsingGET(Async)");
        }
        
        // verify the required parameter 'ct0' is set
        if (ct0 == null) {
            throw new ApiException("Missing the required parameter 'ct0' when calling unlikeTweetUsingGET(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling unlikeTweetUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = unlikeTweetUsingGETCall(apiKey, authToken, ct0, id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * unlike(unfavorites) Tweet
     * see details https://developer.twitter.com/en/docs/twitter-api/v1/tweets/post-and-engage/api-reference/post-favorites-destroy
     * @param apiKey  (required)
     * @param authToken  (required)
     * @param ct0  (required)
     * @param id  (required)
     * @return ResultT
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResultT unlikeTweetUsingGET(String apiKey, String authToken, String ct0, String id) throws ApiException {
        ApiResponse<ResultT> resp = unlikeTweetUsingGETWithHttpInfo(apiKey, authToken, ct0, id);
        return resp.getData();
    }

    /**
     * unlike(unfavorites) Tweet
     * see details https://developer.twitter.com/en/docs/twitter-api/v1/tweets/post-and-engage/api-reference/post-favorites-destroy
     * @param apiKey  (required)
     * @param authToken  (required)
     * @param ct0  (required)
     * @param id  (required)
     * @return ApiResponse&lt;ResultT&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResultT> unlikeTweetUsingGETWithHttpInfo(String apiKey, String authToken, String ct0, String id) throws ApiException {
        com.squareup.okhttp.Call call = unlikeTweetUsingGETValidateBeforeCall(apiKey, authToken, ct0, id, null, null);
        Type localVarReturnType = new TypeToken<ResultT>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * unlike(unfavorites) Tweet (asynchronously)
     * see details https://developer.twitter.com/en/docs/twitter-api/v1/tweets/post-and-engage/api-reference/post-favorites-destroy
     * @param apiKey  (required)
     * @param authToken  (required)
     * @param ct0  (required)
     * @param id  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call unlikeTweetUsingGETAsync(String apiKey, String authToken, String ct0, String id, final ApiCallback<ResultT> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = unlikeTweetUsingGETValidateBeforeCall(apiKey, authToken, ct0, id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResultT>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for unlikeTweetUsingPOST
     * @param apiKey  (required)
     * @param authToken  (required)
     * @param ct0  (required)
     * @param id  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call unlikeTweetUsingPOSTCall(String apiKey, String authToken, String ct0, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/base/apitools/unlikeTweet";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (apiKey != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("apiKey", apiKey));
        if (authToken != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("auth_token", authToken));
        if (ct0 != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ct0", ct0));
        if (id != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("id", id));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call unlikeTweetUsingPOSTValidateBeforeCall(String apiKey, String authToken, String ct0, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling unlikeTweetUsingPOST(Async)");
        }
        
        // verify the required parameter 'authToken' is set
        if (authToken == null) {
            throw new ApiException("Missing the required parameter 'authToken' when calling unlikeTweetUsingPOST(Async)");
        }
        
        // verify the required parameter 'ct0' is set
        if (ct0 == null) {
            throw new ApiException("Missing the required parameter 'ct0' when calling unlikeTweetUsingPOST(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling unlikeTweetUsingPOST(Async)");
        }
        

        com.squareup.okhttp.Call call = unlikeTweetUsingPOSTCall(apiKey, authToken, ct0, id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * unlike(unfavorites) Tweet
     * see details https://developer.twitter.com/en/docs/twitter-api/v1/tweets/post-and-engage/api-reference/post-favorites-destroy
     * @param apiKey  (required)
     * @param authToken  (required)
     * @param ct0  (required)
     * @param id  (required)
     * @return ResultT
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResultT unlikeTweetUsingPOST(String apiKey, String authToken, String ct0, String id) throws ApiException {
        ApiResponse<ResultT> resp = unlikeTweetUsingPOSTWithHttpInfo(apiKey, authToken, ct0, id);
        return resp.getData();
    }

    /**
     * unlike(unfavorites) Tweet
     * see details https://developer.twitter.com/en/docs/twitter-api/v1/tweets/post-and-engage/api-reference/post-favorites-destroy
     * @param apiKey  (required)
     * @param authToken  (required)
     * @param ct0  (required)
     * @param id  (required)
     * @return ApiResponse&lt;ResultT&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResultT> unlikeTweetUsingPOSTWithHttpInfo(String apiKey, String authToken, String ct0, String id) throws ApiException {
        com.squareup.okhttp.Call call = unlikeTweetUsingPOSTValidateBeforeCall(apiKey, authToken, ct0, id, null, null);
        Type localVarReturnType = new TypeToken<ResultT>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * unlike(unfavorites) Tweet (asynchronously)
     * see details https://developer.twitter.com/en/docs/twitter-api/v1/tweets/post-and-engage/api-reference/post-favorites-destroy
     * @param apiKey  (required)
     * @param authToken  (required)
     * @param ct0  (required)
     * @param id  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call unlikeTweetUsingPOSTAsync(String apiKey, String authToken, String ct0, String id, final ApiCallback<ResultT> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = unlikeTweetUsingPOSTValidateBeforeCall(apiKey, authToken, ct0, id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResultT>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for uploadMediaUsingGET
     * @param apiKey  (required)
     * @param authToken  (required)
     * @param ct0  (required)
     * @param mediaUrl  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call uploadMediaUsingGETCall(String apiKey, String authToken, String ct0, String mediaUrl, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/base/apitools/uploadMedia";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (apiKey != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("apiKey", apiKey));
        if (authToken != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("auth_token", authToken));
        if (ct0 != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ct0", ct0));
        if (mediaUrl != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("media_url", mediaUrl));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call uploadMediaUsingGETValidateBeforeCall(String apiKey, String authToken, String ct0, String mediaUrl, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling uploadMediaUsingGET(Async)");
        }
        
        // verify the required parameter 'authToken' is set
        if (authToken == null) {
            throw new ApiException("Missing the required parameter 'authToken' when calling uploadMediaUsingGET(Async)");
        }
        
        // verify the required parameter 'ct0' is set
        if (ct0 == null) {
            throw new ApiException("Missing the required parameter 'ct0' when calling uploadMediaUsingGET(Async)");
        }
        
        // verify the required parameter 'mediaUrl' is set
        if (mediaUrl == null) {
            throw new ApiException("Missing the required parameter 'mediaUrl' when calling uploadMediaUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = uploadMediaUsingGETCall(apiKey, authToken, ct0, mediaUrl, progressListener, progressRequestListener);
        return call;

    }

    /**
     * upload media (gif)
     * 
     * @param apiKey  (required)
     * @param authToken  (required)
     * @param ct0  (required)
     * @param mediaUrl  (required)
     * @return ResultT
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResultT uploadMediaUsingGET(String apiKey, String authToken, String ct0, String mediaUrl) throws ApiException {
        ApiResponse<ResultT> resp = uploadMediaUsingGETWithHttpInfo(apiKey, authToken, ct0, mediaUrl);
        return resp.getData();
    }

    /**
     * upload media (gif)
     * 
     * @param apiKey  (required)
     * @param authToken  (required)
     * @param ct0  (required)
     * @param mediaUrl  (required)
     * @return ApiResponse&lt;ResultT&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResultT> uploadMediaUsingGETWithHttpInfo(String apiKey, String authToken, String ct0, String mediaUrl) throws ApiException {
        com.squareup.okhttp.Call call = uploadMediaUsingGETValidateBeforeCall(apiKey, authToken, ct0, mediaUrl, null, null);
        Type localVarReturnType = new TypeToken<ResultT>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * upload media (gif) (asynchronously)
     * 
     * @param apiKey  (required)
     * @param authToken  (required)
     * @param ct0  (required)
     * @param mediaUrl  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call uploadMediaUsingGETAsync(String apiKey, String authToken, String ct0, String mediaUrl, final ApiCallback<ResultT> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = uploadMediaUsingGETValidateBeforeCall(apiKey, authToken, ct0, mediaUrl, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResultT>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for uploadMediaUsingPOST
     * @param apiKey  (required)
     * @param authToken  (required)
     * @param ct0  (required)
     * @param mediaUrl  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call uploadMediaUsingPOSTCall(String apiKey, String authToken, String ct0, String mediaUrl, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/base/apitools/uploadMedia";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (apiKey != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("apiKey", apiKey));
        if (authToken != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("auth_token", authToken));
        if (ct0 != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ct0", ct0));
        if (mediaUrl != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("media_url", mediaUrl));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call uploadMediaUsingPOSTValidateBeforeCall(String apiKey, String authToken, String ct0, String mediaUrl, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling uploadMediaUsingPOST(Async)");
        }
        
        // verify the required parameter 'authToken' is set
        if (authToken == null) {
            throw new ApiException("Missing the required parameter 'authToken' when calling uploadMediaUsingPOST(Async)");
        }
        
        // verify the required parameter 'ct0' is set
        if (ct0 == null) {
            throw new ApiException("Missing the required parameter 'ct0' when calling uploadMediaUsingPOST(Async)");
        }
        
        // verify the required parameter 'mediaUrl' is set
        if (mediaUrl == null) {
            throw new ApiException("Missing the required parameter 'mediaUrl' when calling uploadMediaUsingPOST(Async)");
        }
        

        com.squareup.okhttp.Call call = uploadMediaUsingPOSTCall(apiKey, authToken, ct0, mediaUrl, progressListener, progressRequestListener);
        return call;

    }

    /**
     * upload media (gif)
     * 
     * @param apiKey  (required)
     * @param authToken  (required)
     * @param ct0  (required)
     * @param mediaUrl  (required)
     * @return ResultT
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResultT uploadMediaUsingPOST(String apiKey, String authToken, String ct0, String mediaUrl) throws ApiException {
        ApiResponse<ResultT> resp = uploadMediaUsingPOSTWithHttpInfo(apiKey, authToken, ct0, mediaUrl);
        return resp.getData();
    }

    /**
     * upload media (gif)
     * 
     * @param apiKey  (required)
     * @param authToken  (required)
     * @param ct0  (required)
     * @param mediaUrl  (required)
     * @return ApiResponse&lt;ResultT&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResultT> uploadMediaUsingPOSTWithHttpInfo(String apiKey, String authToken, String ct0, String mediaUrl) throws ApiException {
        com.squareup.okhttp.Call call = uploadMediaUsingPOSTValidateBeforeCall(apiKey, authToken, ct0, mediaUrl, null, null);
        Type localVarReturnType = new TypeToken<ResultT>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * upload media (gif) (asynchronously)
     * 
     * @param apiKey  (required)
     * @param authToken  (required)
     * @param ct0  (required)
     * @param mediaUrl  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call uploadMediaUsingPOSTAsync(String apiKey, String authToken, String ct0, String mediaUrl, final ApiCallback<ResultT> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = uploadMediaUsingPOSTValidateBeforeCall(apiKey, authToken, ct0, mediaUrl, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResultT>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
