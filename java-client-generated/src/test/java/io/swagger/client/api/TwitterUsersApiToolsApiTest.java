/*
 * Utools_twitter_tools_api
 * X (Twitter) API for search, Tweets, users, followers, images, media and more. Supports some v1.1 and v2 API endpoints, with more to come in the future!
 *
 * OpenAPI spec version: 1.1
 * Contact: huojiecs@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.model.ResultT;
import org.junit.Test;
import org.junit.Ignore;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TwitterUsersApiToolsApi
 */
@Ignore
public class TwitterUsersApiToolsApiTest {

    private final TwitterUsersApiToolsApi api = new TwitterUsersApiToolsApi();

    
    /**
     * blocks Create
     *
     * See details  https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/mute-block-report-users/api-reference/post-blocks-create
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void blocksCreateUsingGETTest() throws Exception {
        String apiKey = null;
        String authToken = null;
        String ct0 = null;
        String screenName = null;
        String userId = null;
        ResultT response = api.blocksCreateUsingGET(apiKey, authToken, ct0, screenName, userId);

        // TODO: test validations
    }
    
    /**
     * blocks Create
     *
     * See details  https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/mute-block-report-users/api-reference/post-blocks-create
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void blocksCreateUsingPOSTTest() throws Exception {
        String apiKey = null;
        String authToken = null;
        String ct0 = null;
        String screenName = null;
        String userId = null;
        ResultT response = api.blocksCreateUsingPOST(apiKey, authToken, ct0, screenName, userId);

        // TODO: test validations
    }
    
    /**
     * blocks Destroy
     *
     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/mute-block-report-users/api-reference/post-blocks-destroy
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void blocksDestroyUsingGETTest() throws Exception {
        String apiKey = null;
        String authToken = null;
        String ct0 = null;
        String screenName = null;
        String userId = null;
        ResultT response = api.blocksDestroyUsingGET(apiKey, authToken, ct0, screenName, userId);

        // TODO: test validations
    }
    
    /**
     * blocks Destroy
     *
     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/mute-block-report-users/api-reference/post-blocks-destroy
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void blocksDestroyUsingPOSTTest() throws Exception {
        String apiKey = null;
        String authToken = null;
        String ct0 = null;
        String screenName = null;
        String userId = null;
        ResultT response = api.blocksDestroyUsingPOST(apiKey, authToken, ct0, screenName, userId);

        // TODO: test validations
    }
    
    /**
     * Get List by user_id or screen_name(get-lists-list)
     *
     * See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/get-lists-list
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getListByUserIdOrScreenNameUsingGETTest() throws Exception {
        String apiKey = null;
        String screenName = null;
        String userId = null;
        ResultT response = api.getListByUserIdOrScreenNameUsingGET(apiKey, screenName, userId);

        // TODO: test validations
    }
    
    /**
     * Get List by user_id or screen_name(get-lists-list)
     *
     * See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/get-lists-list
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getListByUserIdOrScreenNameUsingPOSTTest() throws Exception {
        String apiKey = null;
        String screenName = null;
        String userId = null;
        ResultT response = api.getListByUserIdOrScreenNameUsingPOST(apiKey, screenName, userId);

        // TODO: test validations
    }
    
    /**
     * Get List Members By ListId (get-lists-members)
     *
     * See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/get-lists-members
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getListMembersByListIdUsingGETTest() throws Exception {
        String apiKey = null;
        String listId = null;
        String cursor = null;
        ResultT response = api.getListMembersByListIdUsingGET(apiKey, listId, cursor);

        // TODO: test validations
    }
    
    /**
     * Get List Members By ListId (get-lists-members)
     *
     * See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/get-lists-members
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getListMembersByListIdUsingPOSTTest() throws Exception {
        String apiKey = null;
        String listId = null;
        String cursor = null;
        ResultT response = api.getListMembersByListIdUsingPOST(apiKey, listId, cursor);

        // TODO: test validations
    }
    
    /**
     * Get user information based on username or id (lookup)
     *
     * See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-users-lookup
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getUserByIdOrNameLookUpUsingGETTest() throws Exception {
        String apiKey = null;
        String screenName = null;
        String userId = null;
        ResultT response = api.getUserByIdOrNameLookUpUsingGET(apiKey, screenName, userId);

        // TODO: test validations
    }
    
    /**
     * Get user information based on username or id (lookup)
     *
     * See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-users-lookup
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getUserByIdOrNameLookUpUsingPOSTTest() throws Exception {
        String apiKey = null;
        String screenName = null;
        String userId = null;
        ResultT response = api.getUserByIdOrNameLookUpUsingPOST(apiKey, screenName, userId);

        // TODO: test validations
    }
    
    /**
     * Get user information based on username or id (show)
     *
     * See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-users-show
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getUserByIdOrNameShowUsingGETTest() throws Exception {
        String apiKey = null;
        String screenName = null;
        String userId = null;
        ResultT response = api.getUserByIdOrNameShowUsingGET(apiKey, screenName, userId);

        // TODO: test validations
    }
    
    /**
     * Get user information based on username or id (show)
     *
     * See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-users-show
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getUserByIdOrNameShowUsingPOSTTest() throws Exception {
        String apiKey = null;
        String screenName = null;
        String userId = null;
        ResultT response = api.getUserByIdOrNameShowUsingPOST(apiKey, screenName, userId);

        // TODO: test validations
    }
    
    /**
     * Get uerByIdRestId by V2
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void uerByIdRestIdV2UsingGETTest() throws Exception {
        String apiKey = null;
        String userId = null;
        String cursor = null;
        ResultT response = api.uerByIdRestIdV2UsingGET(apiKey, userId, cursor);

        // TODO: test validations
    }
    
    /**
     * Get uerByIdRestId by V2
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void uerByIdRestIdV2UsingPOSTTest() throws Exception {
        String apiKey = null;
        String userId = null;
        String cursor = null;
        ResultT response = api.uerByIdRestIdV2UsingPOST(apiKey, userId, cursor);

        // TODO: test validations
    }
    
    /**
     * Get userByScreenName by V2
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void userByScreenNameV2UsingGETTest() throws Exception {
        String apiKey = null;
        String screenName = null;
        ResultT response = api.userByScreenNameV2UsingGET(apiKey, screenName);

        // TODO: test validations
    }
    
    /**
     * Get userByScreenName by V2
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void userByScreenNameV2UsingPOSTTest() throws Exception {
        String apiKey = null;
        String screenName = null;
        ResultT response = api.userByScreenNameV2UsingPOST(apiKey, screenName);

        // TODO: test validations
    }
    
    /**
     * Get UserTimeline  tweets info
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void userTimelineUsingGETTest() throws Exception {
        String apiKey = null;
        String userId = null;
        String cursor = null;
        ResultT response = api.userTimelineUsingGET(apiKey, userId, cursor);

        // TODO: test validations
    }
    
    /**
     * Get UserTimeline  tweets info
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void userTimelineUsingPOSTTest() throws Exception {
        String apiKey = null;
        String userId = null;
        String cursor = null;
        ResultT response = api.userTimelineUsingPOST(apiKey, userId, cursor);

        // TODO: test validations
    }
    
    /**
     * Get UserTweets by V2
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void userTweetsV2UsingGETTest() throws Exception {
        String apiKey = null;
        String userId = null;
        String cursor = null;
        ResultT response = api.userTweetsV2UsingGET(apiKey, userId, cursor);

        // TODO: test validations
    }
    
    /**
     * Get UserTweets by V2
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void userTweetsV2UsingPOSTTest() throws Exception {
        String apiKey = null;
        String userId = null;
        String cursor = null;
        ResultT response = api.userTweetsV2UsingPOST(apiKey, userId, cursor);

        // TODO: test validations
    }
    
}
