/*
 * Utools_twitter_tools_api
 * X (Twitter) API for search, Tweets, users, followers, images, media and more. Supports some v1.1 and v2 API endpoints, with more to come in the future!
 *
 * OpenAPI spec version: 1.1
 * Contact: huojiecs@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.model.ResultT;
import org.junit.Test;
import org.junit.Ignore;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TwitterGetTweesApiToolsApi
 */
@Ignore
public class TwitterGetTweesApiToolsApiTest {

    private final TwitterGetTweesApiToolsApi api = new TwitterGetTweesApiToolsApi();

    
    /**
     * Favoriters by V2
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void favoritersV2UsingGETTest() throws Exception {
        String apiKey = null;
        String tweetId = null;
        String cursor = null;
        ResultT response = api.favoritersV2UsingGET(apiKey, tweetId, cursor);

        // TODO: test validations
    }
    
    /**
     * Favoriters by V2
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void favoritersV2UsingPOSTTest() throws Exception {
        String apiKey = null;
        String tweetId = null;
        String cursor = null;
        ResultT response = api.favoritersV2UsingPOST(apiKey, tweetId, cursor);

        // TODO: test validations
    }
    
    /**
     * favorites are now known as likes.
     *
     * See details https://developer.twitter.com/en/docs/twitter-api/v1/tweets/post-and-engage/api-reference/get-favorites-list
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void favoritesListUsingGETTest() throws Exception {
        String apiKey = null;
        String userId = null;
        String maxId = null;
        String screenName = null;
        String sinceId = null;
        ResultT response = api.favoritesListUsingGET(apiKey, userId, maxId, screenName, sinceId);

        // TODO: test validations
    }
    
    /**
     * favorites are now known as likes.
     *
     * See details https://developer.twitter.com/en/docs/twitter-api/v1/tweets/post-and-engage/api-reference/get-favorites-list
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void favoritesListUsingPOSTTest() throws Exception {
        String apiKey = null;
        String userId = null;
        String maxId = null;
        String screenName = null;
        String sinceId = null;
        ResultT response = api.favoritesListUsingPOST(apiKey, userId, maxId, screenName, sinceId);

        // TODO: test validations
    }
    
    /**
     * get mentionsTimeline Detail
     *
     * See details  https://developer.twitter.com/en/docs/twitter-api/v1/tweets/timelines/api-reference/get-statuses-mentions_timeline
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void mentionsTimelineUsingGETTest() throws Exception {
        String apiKey = null;
        String authToken = null;
        String ct0 = null;
        String includeEntities = null;
        String maxId = null;
        String sinceId = null;
        String trimUser = null;
        ResultT response = api.mentionsTimelineUsingGET(apiKey, authToken, ct0, includeEntities, maxId, sinceId, trimUser);

        // TODO: test validations
    }
    
    /**
     * get mentionsTimeline Detail
     *
     * See details  https://developer.twitter.com/en/docs/twitter-api/v1/tweets/timelines/api-reference/get-statuses-mentions_timeline
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void mentionsTimelineUsingPOSTTest() throws Exception {
        String apiKey = null;
        String authToken = null;
        String ct0 = null;
        String includeEntities = null;
        String maxId = null;
        String sinceId = null;
        String trimUser = null;
        ResultT response = api.mentionsTimelineUsingPOST(apiKey, authToken, ct0, includeEntities, maxId, sinceId, trimUser);

        // TODO: test validations
    }
    
    /**
     * Quotes by V2
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void quotesV2UsingGETTest() throws Exception {
        String apiKey = null;
        String tweetId = null;
        String cursor = null;
        ResultT response = api.quotesV2UsingGET(apiKey, tweetId, cursor);

        // TODO: test validations
    }
    
    /**
     * Quotes by V2
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void quotesV2UsingPOSTTest() throws Exception {
        String apiKey = null;
        String tweetId = null;
        String cursor = null;
        ResultT response = api.quotesV2UsingPOST(apiKey, tweetId, cursor);

        // TODO: test validations
    }
    
    /**
     * get retwweeters ids by tweetId
     *
     * Returns a collection of up to 100 user IDs belonging to users who have retweeted the Tweet specified by the id parameter. See details https://developer.twitter.com/en/docs/twitter-api/v1/tweets/post-and-engage/api-reference/get-statuses-retweeters-ids
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void retweetersIdsUsingGETTest() throws Exception {
        String apiKey = null;
        String id = null;
        String cursor = null;
        ResultT response = api.retweetersIdsUsingGET(apiKey, id, cursor);

        // TODO: test validations
    }
    
    /**
     * get retwweeters ids by tweetId
     *
     * Returns a collection of up to 100 user IDs belonging to users who have retweeted the Tweet specified by the id parameter. See details https://developer.twitter.com/en/docs/twitter-api/v1/tweets/post-and-engage/api-reference/get-statuses-retweeters-ids
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void retweetersIdsUsingPOSTTest() throws Exception {
        String apiKey = null;
        String id = null;
        String cursor = null;
        ResultT response = api.retweetersIdsUsingPOST(apiKey, id, cursor);

        // TODO: test validations
    }
    
    /**
     * Retweeters by V2
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void retweetersV2UsingGETTest() throws Exception {
        String apiKey = null;
        String tweetId = null;
        String cursor = null;
        ResultT response = api.retweetersV2UsingGET(apiKey, tweetId, cursor);

        // TODO: test validations
    }
    
    /**
     * Retweeters by V2
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void retweetersV2UsingPOSTTest() throws Exception {
        String apiKey = null;
        String tweetId = null;
        String cursor = null;
        ResultT response = api.retweetersV2UsingPOST(apiKey, tweetId, cursor);

        // TODO: test validations
    }
    
    /**
     * tweet Brief information
     *
     * get tweet Brief information
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void tweetSimpleUsingGETTest() throws Exception {
        String apiKey = null;
        String id = null;
        String cursor = null;
        ResultT response = api.tweetSimpleUsingGET(apiKey, id, cursor);

        // TODO: test validations
    }
    
    /**
     * tweet Brief information
     *
     * get tweet Brief information
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void tweetSimpleUsingPOSTTest() throws Exception {
        String apiKey = null;
        String id = null;
        String cursor = null;
        ResultT response = api.tweetSimpleUsingPOST(apiKey, id, cursor);

        // TODO: test validations
    }
    
    /**
     * get TweetTimeline Detail
     *
     * get tweetDetail and reply
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void tweetTimelineUsingGETTest() throws Exception {
        String apiKey = null;
        String id = null;
        String cursor = null;
        ResultT response = api.tweetTimelineUsingGET(apiKey, id, cursor);

        // TODO: test validations
    }
    
    /**
     * get TweetTimeline Detail
     *
     * get tweetDetail and reply
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void tweetTimelineUsingPOSTTest() throws Exception {
        String apiKey = null;
        String id = null;
        String cursor = null;
        ResultT response = api.tweetTimelineUsingPOST(apiKey, id, cursor);

        // TODO: test validations
    }
    
    /**
     * get userTweetReply 
     *
     * get user Tweet Reply
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void userTweetReplyUsingGETTest() throws Exception {
        String apiKey = null;
        String userId = null;
        String cursor = null;
        ResultT response = api.userTweetReplyUsingGET(apiKey, userId, cursor);

        // TODO: test validations
    }
    
    /**
     * get userTweetReply 
     *
     * get user Tweet Reply
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void userTweetReplyUsingPOSTTest() throws Exception {
        String apiKey = null;
        String userId = null;
        String cursor = null;
        ResultT response = api.userTweetReplyUsingPOST(apiKey, userId, cursor);

        // TODO: test validations
    }
    
}
