# coding: utf-8

"""
    Utools_twitter_tools_api

    X (Twitter) API for search, Tweets, users, followers, images, media and more. Supports some v1.1 and v2 API endpoints, with more to come in the future!  # noqa: E501

    OpenAPI spec version: 1.1
    Contact: huojiecs@gmail.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class TwitterSendTweesApiToolsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_retweet_using_get(self, api_key, auth_token, ct0, tweet_id, **kwargs):  # noqa: E501
        """retweet a Tweet  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_retweet_using_get(api_key, auth_token, ct0, tweet_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: (required)
        :param str auth_token: (required)
        :param str ct0: (required)
        :param str tweet_id: (required)
        :return: ResultT
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_retweet_using_get_with_http_info(api_key, auth_token, ct0, tweet_id, **kwargs)  # noqa: E501
        else:
            (data) = self.create_retweet_using_get_with_http_info(api_key, auth_token, ct0, tweet_id, **kwargs)  # noqa: E501
            return data

    def create_retweet_using_get_with_http_info(self, api_key, auth_token, ct0, tweet_id, **kwargs):  # noqa: E501
        """retweet a Tweet  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_retweet_using_get_with_http_info(api_key, auth_token, ct0, tweet_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: (required)
        :param str auth_token: (required)
        :param str ct0: (required)
        :param str tweet_id: (required)
        :return: ResultT
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_key', 'auth_token', 'ct0', 'tweet_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_retweet_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'api_key' is set
        if self.api_client.client_side_validation and ('api_key' not in params or
                                                       params['api_key'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `api_key` when calling `create_retweet_using_get`")  # noqa: E501
        # verify the required parameter 'auth_token' is set
        if self.api_client.client_side_validation and ('auth_token' not in params or
                                                       params['auth_token'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `auth_token` when calling `create_retweet_using_get`")  # noqa: E501
        # verify the required parameter 'ct0' is set
        if self.api_client.client_side_validation and ('ct0' not in params or
                                                       params['ct0'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `ct0` when calling `create_retweet_using_get`")  # noqa: E501
        # verify the required parameter 'tweet_id' is set
        if self.api_client.client_side_validation and ('tweet_id' not in params or
                                                       params['tweet_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `tweet_id` when calling `create_retweet_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'api_key' in params:
            query_params.append(('apiKey', params['api_key']))  # noqa: E501
        if 'auth_token' in params:
            query_params.append(('auth_token', params['auth_token']))  # noqa: E501
        if 'ct0' in params:
            query_params.append(('ct0', params['ct0']))  # noqa: E501
        if 'tweet_id' in params:
            query_params.append(('tweetId', params['tweet_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/base/apitools/createRetweet', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResultT',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_retweet_using_post(self, api_key, auth_token, ct0, tweet_id, **kwargs):  # noqa: E501
        """retweet a Tweet  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_retweet_using_post(api_key, auth_token, ct0, tweet_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: (required)
        :param str auth_token: (required)
        :param str ct0: (required)
        :param str tweet_id: (required)
        :return: ResultT
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_retweet_using_post_with_http_info(api_key, auth_token, ct0, tweet_id, **kwargs)  # noqa: E501
        else:
            (data) = self.create_retweet_using_post_with_http_info(api_key, auth_token, ct0, tweet_id, **kwargs)  # noqa: E501
            return data

    def create_retweet_using_post_with_http_info(self, api_key, auth_token, ct0, tweet_id, **kwargs):  # noqa: E501
        """retweet a Tweet  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_retweet_using_post_with_http_info(api_key, auth_token, ct0, tweet_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: (required)
        :param str auth_token: (required)
        :param str ct0: (required)
        :param str tweet_id: (required)
        :return: ResultT
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_key', 'auth_token', 'ct0', 'tweet_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_retweet_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'api_key' is set
        if self.api_client.client_side_validation and ('api_key' not in params or
                                                       params['api_key'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `api_key` when calling `create_retweet_using_post`")  # noqa: E501
        # verify the required parameter 'auth_token' is set
        if self.api_client.client_side_validation and ('auth_token' not in params or
                                                       params['auth_token'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `auth_token` when calling `create_retweet_using_post`")  # noqa: E501
        # verify the required parameter 'ct0' is set
        if self.api_client.client_side_validation and ('ct0' not in params or
                                                       params['ct0'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `ct0` when calling `create_retweet_using_post`")  # noqa: E501
        # verify the required parameter 'tweet_id' is set
        if self.api_client.client_side_validation and ('tweet_id' not in params or
                                                       params['tweet_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `tweet_id` when calling `create_retweet_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'api_key' in params:
            query_params.append(('apiKey', params['api_key']))  # noqa: E501
        if 'auth_token' in params:
            query_params.append(('auth_token', params['auth_token']))  # noqa: E501
        if 'ct0' in params:
            query_params.append(('ct0', params['ct0']))  # noqa: E501
        if 'tweet_id' in params:
            query_params.append(('tweetId', params['tweet_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/base/apitools/createRetweet', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResultT',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_tweet_using_get(self, api_key, auth_token, ct0, text, **kwargs):  # noqa: E501
        """create a Tweet  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_tweet_using_get(api_key, auth_token, ct0, text, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: (required)
        :param str auth_token: (required)
        :param str ct0: (required)
        :param str text: (required)
        :param list[str] medias: medias ids
        :return: ResultT
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_tweet_using_get_with_http_info(api_key, auth_token, ct0, text, **kwargs)  # noqa: E501
        else:
            (data) = self.create_tweet_using_get_with_http_info(api_key, auth_token, ct0, text, **kwargs)  # noqa: E501
            return data

    def create_tweet_using_get_with_http_info(self, api_key, auth_token, ct0, text, **kwargs):  # noqa: E501
        """create a Tweet  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_tweet_using_get_with_http_info(api_key, auth_token, ct0, text, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: (required)
        :param str auth_token: (required)
        :param str ct0: (required)
        :param str text: (required)
        :param list[str] medias: medias ids
        :return: ResultT
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_key', 'auth_token', 'ct0', 'text', 'medias']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_tweet_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'api_key' is set
        if self.api_client.client_side_validation and ('api_key' not in params or
                                                       params['api_key'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `api_key` when calling `create_tweet_using_get`")  # noqa: E501
        # verify the required parameter 'auth_token' is set
        if self.api_client.client_side_validation and ('auth_token' not in params or
                                                       params['auth_token'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `auth_token` when calling `create_tweet_using_get`")  # noqa: E501
        # verify the required parameter 'ct0' is set
        if self.api_client.client_side_validation and ('ct0' not in params or
                                                       params['ct0'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `ct0` when calling `create_tweet_using_get`")  # noqa: E501
        # verify the required parameter 'text' is set
        if self.api_client.client_side_validation and ('text' not in params or
                                                       params['text'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `text` when calling `create_tweet_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'api_key' in params:
            query_params.append(('apiKey', params['api_key']))  # noqa: E501
        if 'auth_token' in params:
            query_params.append(('auth_token', params['auth_token']))  # noqa: E501
        if 'ct0' in params:
            query_params.append(('ct0', params['ct0']))  # noqa: E501
        if 'medias' in params:
            query_params.append(('medias', params['medias']))  # noqa: E501
            collection_formats['medias'] = 'multi'  # noqa: E501
        if 'text' in params:
            query_params.append(('text', params['text']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/base/apitools/createTweet', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResultT',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_tweet_using_post(self, api_key, auth_token, ct0, text, **kwargs):  # noqa: E501
        """create a Tweet  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_tweet_using_post(api_key, auth_token, ct0, text, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: (required)
        :param str auth_token: (required)
        :param str ct0: (required)
        :param str text: (required)
        :param list[str] medias: medias ids
        :return: ResultT
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_tweet_using_post_with_http_info(api_key, auth_token, ct0, text, **kwargs)  # noqa: E501
        else:
            (data) = self.create_tweet_using_post_with_http_info(api_key, auth_token, ct0, text, **kwargs)  # noqa: E501
            return data

    def create_tweet_using_post_with_http_info(self, api_key, auth_token, ct0, text, **kwargs):  # noqa: E501
        """create a Tweet  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_tweet_using_post_with_http_info(api_key, auth_token, ct0, text, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: (required)
        :param str auth_token: (required)
        :param str ct0: (required)
        :param str text: (required)
        :param list[str] medias: medias ids
        :return: ResultT
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_key', 'auth_token', 'ct0', 'text', 'medias']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_tweet_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'api_key' is set
        if self.api_client.client_side_validation and ('api_key' not in params or
                                                       params['api_key'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `api_key` when calling `create_tweet_using_post`")  # noqa: E501
        # verify the required parameter 'auth_token' is set
        if self.api_client.client_side_validation and ('auth_token' not in params or
                                                       params['auth_token'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `auth_token` when calling `create_tweet_using_post`")  # noqa: E501
        # verify the required parameter 'ct0' is set
        if self.api_client.client_side_validation and ('ct0' not in params or
                                                       params['ct0'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `ct0` when calling `create_tweet_using_post`")  # noqa: E501
        # verify the required parameter 'text' is set
        if self.api_client.client_side_validation and ('text' not in params or
                                                       params['text'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `text` when calling `create_tweet_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'api_key' in params:
            query_params.append(('apiKey', params['api_key']))  # noqa: E501
        if 'auth_token' in params:
            query_params.append(('auth_token', params['auth_token']))  # noqa: E501
        if 'ct0' in params:
            query_params.append(('ct0', params['ct0']))  # noqa: E501
        if 'medias' in params:
            query_params.append(('medias', params['medias']))  # noqa: E501
            collection_formats['medias'] = 'multi'  # noqa: E501
        if 'text' in params:
            query_params.append(('text', params['text']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/base/apitools/createTweet', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResultT',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def like_tweet_using_get(self, api_key, auth_token, ct0, id, **kwargs):  # noqa: E501
        """like(favorites) Tweet  # noqa: E501

        see details https://developer.twitter.com/en/docs/twitter-api/v1/tweets/post-and-engage/api-reference/post-favorites-create  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.like_tweet_using_get(api_key, auth_token, ct0, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: (required)
        :param str auth_token: (required)
        :param str ct0: (required)
        :param str id: (required)
        :return: ResultT
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.like_tweet_using_get_with_http_info(api_key, auth_token, ct0, id, **kwargs)  # noqa: E501
        else:
            (data) = self.like_tweet_using_get_with_http_info(api_key, auth_token, ct0, id, **kwargs)  # noqa: E501
            return data

    def like_tweet_using_get_with_http_info(self, api_key, auth_token, ct0, id, **kwargs):  # noqa: E501
        """like(favorites) Tweet  # noqa: E501

        see details https://developer.twitter.com/en/docs/twitter-api/v1/tweets/post-and-engage/api-reference/post-favorites-create  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.like_tweet_using_get_with_http_info(api_key, auth_token, ct0, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: (required)
        :param str auth_token: (required)
        :param str ct0: (required)
        :param str id: (required)
        :return: ResultT
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_key', 'auth_token', 'ct0', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method like_tweet_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'api_key' is set
        if self.api_client.client_side_validation and ('api_key' not in params or
                                                       params['api_key'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `api_key` when calling `like_tweet_using_get`")  # noqa: E501
        # verify the required parameter 'auth_token' is set
        if self.api_client.client_side_validation and ('auth_token' not in params or
                                                       params['auth_token'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `auth_token` when calling `like_tweet_using_get`")  # noqa: E501
        # verify the required parameter 'ct0' is set
        if self.api_client.client_side_validation and ('ct0' not in params or
                                                       params['ct0'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `ct0` when calling `like_tweet_using_get`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `like_tweet_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'api_key' in params:
            query_params.append(('apiKey', params['api_key']))  # noqa: E501
        if 'auth_token' in params:
            query_params.append(('auth_token', params['auth_token']))  # noqa: E501
        if 'ct0' in params:
            query_params.append(('ct0', params['ct0']))  # noqa: E501
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/base/apitools/likeTweet', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResultT',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def like_tweet_using_post(self, api_key, auth_token, ct0, id, **kwargs):  # noqa: E501
        """like(favorites) Tweet  # noqa: E501

        see details https://developer.twitter.com/en/docs/twitter-api/v1/tweets/post-and-engage/api-reference/post-favorites-create  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.like_tweet_using_post(api_key, auth_token, ct0, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: (required)
        :param str auth_token: (required)
        :param str ct0: (required)
        :param str id: (required)
        :return: ResultT
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.like_tweet_using_post_with_http_info(api_key, auth_token, ct0, id, **kwargs)  # noqa: E501
        else:
            (data) = self.like_tweet_using_post_with_http_info(api_key, auth_token, ct0, id, **kwargs)  # noqa: E501
            return data

    def like_tweet_using_post_with_http_info(self, api_key, auth_token, ct0, id, **kwargs):  # noqa: E501
        """like(favorites) Tweet  # noqa: E501

        see details https://developer.twitter.com/en/docs/twitter-api/v1/tweets/post-and-engage/api-reference/post-favorites-create  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.like_tweet_using_post_with_http_info(api_key, auth_token, ct0, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: (required)
        :param str auth_token: (required)
        :param str ct0: (required)
        :param str id: (required)
        :return: ResultT
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_key', 'auth_token', 'ct0', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method like_tweet_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'api_key' is set
        if self.api_client.client_side_validation and ('api_key' not in params or
                                                       params['api_key'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `api_key` when calling `like_tweet_using_post`")  # noqa: E501
        # verify the required parameter 'auth_token' is set
        if self.api_client.client_side_validation and ('auth_token' not in params or
                                                       params['auth_token'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `auth_token` when calling `like_tweet_using_post`")  # noqa: E501
        # verify the required parameter 'ct0' is set
        if self.api_client.client_side_validation and ('ct0' not in params or
                                                       params['ct0'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `ct0` when calling `like_tweet_using_post`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `like_tweet_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'api_key' in params:
            query_params.append(('apiKey', params['api_key']))  # noqa: E501
        if 'auth_token' in params:
            query_params.append(('auth_token', params['auth_token']))  # noqa: E501
        if 'ct0' in params:
            query_params.append(('ct0', params['ct0']))  # noqa: E501
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/base/apitools/likeTweet', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResultT',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def tweet_reply_using_get(self, api_key, auth_token, ct0, text, tweet_id, **kwargs):  # noqa: E501
        """reply to tweet   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tweet_reply_using_get(api_key, auth_token, ct0, text, tweet_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: (required)
        :param str auth_token: (required)
        :param str ct0: (required)
        :param str text: (required)
        :param str tweet_id: (required)
        :param list[str] medias: medias ids
        :return: ResultT
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.tweet_reply_using_get_with_http_info(api_key, auth_token, ct0, text, tweet_id, **kwargs)  # noqa: E501
        else:
            (data) = self.tweet_reply_using_get_with_http_info(api_key, auth_token, ct0, text, tweet_id, **kwargs)  # noqa: E501
            return data

    def tweet_reply_using_get_with_http_info(self, api_key, auth_token, ct0, text, tweet_id, **kwargs):  # noqa: E501
        """reply to tweet   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tweet_reply_using_get_with_http_info(api_key, auth_token, ct0, text, tweet_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: (required)
        :param str auth_token: (required)
        :param str ct0: (required)
        :param str text: (required)
        :param str tweet_id: (required)
        :param list[str] medias: medias ids
        :return: ResultT
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_key', 'auth_token', 'ct0', 'text', 'tweet_id', 'medias']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method tweet_reply_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'api_key' is set
        if self.api_client.client_side_validation and ('api_key' not in params or
                                                       params['api_key'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `api_key` when calling `tweet_reply_using_get`")  # noqa: E501
        # verify the required parameter 'auth_token' is set
        if self.api_client.client_side_validation and ('auth_token' not in params or
                                                       params['auth_token'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `auth_token` when calling `tweet_reply_using_get`")  # noqa: E501
        # verify the required parameter 'ct0' is set
        if self.api_client.client_side_validation and ('ct0' not in params or
                                                       params['ct0'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `ct0` when calling `tweet_reply_using_get`")  # noqa: E501
        # verify the required parameter 'text' is set
        if self.api_client.client_side_validation and ('text' not in params or
                                                       params['text'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `text` when calling `tweet_reply_using_get`")  # noqa: E501
        # verify the required parameter 'tweet_id' is set
        if self.api_client.client_side_validation and ('tweet_id' not in params or
                                                       params['tweet_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `tweet_id` when calling `tweet_reply_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'api_key' in params:
            query_params.append(('apiKey', params['api_key']))  # noqa: E501
        if 'auth_token' in params:
            query_params.append(('auth_token', params['auth_token']))  # noqa: E501
        if 'ct0' in params:
            query_params.append(('ct0', params['ct0']))  # noqa: E501
        if 'medias' in params:
            query_params.append(('medias', params['medias']))  # noqa: E501
            collection_formats['medias'] = 'multi'  # noqa: E501
        if 'text' in params:
            query_params.append(('text', params['text']))  # noqa: E501
        if 'tweet_id' in params:
            query_params.append(('tweetId', params['tweet_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/base/apitools/tweetReply', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResultT',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def tweet_reply_using_post(self, api_key, auth_token, ct0, text, tweet_id, **kwargs):  # noqa: E501
        """reply to tweet   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tweet_reply_using_post(api_key, auth_token, ct0, text, tweet_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: (required)
        :param str auth_token: (required)
        :param str ct0: (required)
        :param str text: (required)
        :param str tweet_id: (required)
        :param list[str] medias: medias ids
        :return: ResultT
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.tweet_reply_using_post_with_http_info(api_key, auth_token, ct0, text, tweet_id, **kwargs)  # noqa: E501
        else:
            (data) = self.tweet_reply_using_post_with_http_info(api_key, auth_token, ct0, text, tweet_id, **kwargs)  # noqa: E501
            return data

    def tweet_reply_using_post_with_http_info(self, api_key, auth_token, ct0, text, tweet_id, **kwargs):  # noqa: E501
        """reply to tweet   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.tweet_reply_using_post_with_http_info(api_key, auth_token, ct0, text, tweet_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: (required)
        :param str auth_token: (required)
        :param str ct0: (required)
        :param str text: (required)
        :param str tweet_id: (required)
        :param list[str] medias: medias ids
        :return: ResultT
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_key', 'auth_token', 'ct0', 'text', 'tweet_id', 'medias']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method tweet_reply_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'api_key' is set
        if self.api_client.client_side_validation and ('api_key' not in params or
                                                       params['api_key'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `api_key` when calling `tweet_reply_using_post`")  # noqa: E501
        # verify the required parameter 'auth_token' is set
        if self.api_client.client_side_validation and ('auth_token' not in params or
                                                       params['auth_token'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `auth_token` when calling `tweet_reply_using_post`")  # noqa: E501
        # verify the required parameter 'ct0' is set
        if self.api_client.client_side_validation and ('ct0' not in params or
                                                       params['ct0'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `ct0` when calling `tweet_reply_using_post`")  # noqa: E501
        # verify the required parameter 'text' is set
        if self.api_client.client_side_validation and ('text' not in params or
                                                       params['text'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `text` when calling `tweet_reply_using_post`")  # noqa: E501
        # verify the required parameter 'tweet_id' is set
        if self.api_client.client_side_validation and ('tweet_id' not in params or
                                                       params['tweet_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `tweet_id` when calling `tweet_reply_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'api_key' in params:
            query_params.append(('apiKey', params['api_key']))  # noqa: E501
        if 'auth_token' in params:
            query_params.append(('auth_token', params['auth_token']))  # noqa: E501
        if 'ct0' in params:
            query_params.append(('ct0', params['ct0']))  # noqa: E501
        if 'medias' in params:
            query_params.append(('medias', params['medias']))  # noqa: E501
            collection_formats['medias'] = 'multi'  # noqa: E501
        if 'text' in params:
            query_params.append(('text', params['text']))  # noqa: E501
        if 'tweet_id' in params:
            query_params.append(('tweetId', params['tweet_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/base/apitools/tweetReply', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResultT',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def unlike_tweet_using_get(self, api_key, auth_token, ct0, id, **kwargs):  # noqa: E501
        """unlike(unfavorites) Tweet  # noqa: E501

        see details https://developer.twitter.com/en/docs/twitter-api/v1/tweets/post-and-engage/api-reference/post-favorites-destroy  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.unlike_tweet_using_get(api_key, auth_token, ct0, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: (required)
        :param str auth_token: (required)
        :param str ct0: (required)
        :param str id: (required)
        :return: ResultT
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.unlike_tweet_using_get_with_http_info(api_key, auth_token, ct0, id, **kwargs)  # noqa: E501
        else:
            (data) = self.unlike_tweet_using_get_with_http_info(api_key, auth_token, ct0, id, **kwargs)  # noqa: E501
            return data

    def unlike_tweet_using_get_with_http_info(self, api_key, auth_token, ct0, id, **kwargs):  # noqa: E501
        """unlike(unfavorites) Tweet  # noqa: E501

        see details https://developer.twitter.com/en/docs/twitter-api/v1/tweets/post-and-engage/api-reference/post-favorites-destroy  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.unlike_tweet_using_get_with_http_info(api_key, auth_token, ct0, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: (required)
        :param str auth_token: (required)
        :param str ct0: (required)
        :param str id: (required)
        :return: ResultT
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_key', 'auth_token', 'ct0', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method unlike_tweet_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'api_key' is set
        if self.api_client.client_side_validation and ('api_key' not in params or
                                                       params['api_key'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `api_key` when calling `unlike_tweet_using_get`")  # noqa: E501
        # verify the required parameter 'auth_token' is set
        if self.api_client.client_side_validation and ('auth_token' not in params or
                                                       params['auth_token'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `auth_token` when calling `unlike_tweet_using_get`")  # noqa: E501
        # verify the required parameter 'ct0' is set
        if self.api_client.client_side_validation and ('ct0' not in params or
                                                       params['ct0'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `ct0` when calling `unlike_tweet_using_get`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `unlike_tweet_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'api_key' in params:
            query_params.append(('apiKey', params['api_key']))  # noqa: E501
        if 'auth_token' in params:
            query_params.append(('auth_token', params['auth_token']))  # noqa: E501
        if 'ct0' in params:
            query_params.append(('ct0', params['ct0']))  # noqa: E501
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/base/apitools/unlikeTweet', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResultT',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def unlike_tweet_using_post(self, api_key, auth_token, ct0, id, **kwargs):  # noqa: E501
        """unlike(unfavorites) Tweet  # noqa: E501

        see details https://developer.twitter.com/en/docs/twitter-api/v1/tweets/post-and-engage/api-reference/post-favorites-destroy  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.unlike_tweet_using_post(api_key, auth_token, ct0, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: (required)
        :param str auth_token: (required)
        :param str ct0: (required)
        :param str id: (required)
        :return: ResultT
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.unlike_tweet_using_post_with_http_info(api_key, auth_token, ct0, id, **kwargs)  # noqa: E501
        else:
            (data) = self.unlike_tweet_using_post_with_http_info(api_key, auth_token, ct0, id, **kwargs)  # noqa: E501
            return data

    def unlike_tweet_using_post_with_http_info(self, api_key, auth_token, ct0, id, **kwargs):  # noqa: E501
        """unlike(unfavorites) Tweet  # noqa: E501

        see details https://developer.twitter.com/en/docs/twitter-api/v1/tweets/post-and-engage/api-reference/post-favorites-destroy  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.unlike_tweet_using_post_with_http_info(api_key, auth_token, ct0, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: (required)
        :param str auth_token: (required)
        :param str ct0: (required)
        :param str id: (required)
        :return: ResultT
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_key', 'auth_token', 'ct0', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method unlike_tweet_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'api_key' is set
        if self.api_client.client_side_validation and ('api_key' not in params or
                                                       params['api_key'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `api_key` when calling `unlike_tweet_using_post`")  # noqa: E501
        # verify the required parameter 'auth_token' is set
        if self.api_client.client_side_validation and ('auth_token' not in params or
                                                       params['auth_token'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `auth_token` when calling `unlike_tweet_using_post`")  # noqa: E501
        # verify the required parameter 'ct0' is set
        if self.api_client.client_side_validation and ('ct0' not in params or
                                                       params['ct0'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `ct0` when calling `unlike_tweet_using_post`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `unlike_tweet_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'api_key' in params:
            query_params.append(('apiKey', params['api_key']))  # noqa: E501
        if 'auth_token' in params:
            query_params.append(('auth_token', params['auth_token']))  # noqa: E501
        if 'ct0' in params:
            query_params.append(('ct0', params['ct0']))  # noqa: E501
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/base/apitools/unlikeTweet', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResultT',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def upload_media_using_get(self, api_key, auth_token, ct0, media_url, **kwargs):  # noqa: E501
        """upload media (gif)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.upload_media_using_get(api_key, auth_token, ct0, media_url, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: (required)
        :param str auth_token: (required)
        :param str ct0: (required)
        :param str media_url: (required)
        :return: ResultT
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.upload_media_using_get_with_http_info(api_key, auth_token, ct0, media_url, **kwargs)  # noqa: E501
        else:
            (data) = self.upload_media_using_get_with_http_info(api_key, auth_token, ct0, media_url, **kwargs)  # noqa: E501
            return data

    def upload_media_using_get_with_http_info(self, api_key, auth_token, ct0, media_url, **kwargs):  # noqa: E501
        """upload media (gif)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.upload_media_using_get_with_http_info(api_key, auth_token, ct0, media_url, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: (required)
        :param str auth_token: (required)
        :param str ct0: (required)
        :param str media_url: (required)
        :return: ResultT
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_key', 'auth_token', 'ct0', 'media_url']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method upload_media_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'api_key' is set
        if self.api_client.client_side_validation and ('api_key' not in params or
                                                       params['api_key'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `api_key` when calling `upload_media_using_get`")  # noqa: E501
        # verify the required parameter 'auth_token' is set
        if self.api_client.client_side_validation and ('auth_token' not in params or
                                                       params['auth_token'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `auth_token` when calling `upload_media_using_get`")  # noqa: E501
        # verify the required parameter 'ct0' is set
        if self.api_client.client_side_validation and ('ct0' not in params or
                                                       params['ct0'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `ct0` when calling `upload_media_using_get`")  # noqa: E501
        # verify the required parameter 'media_url' is set
        if self.api_client.client_side_validation and ('media_url' not in params or
                                                       params['media_url'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `media_url` when calling `upload_media_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'api_key' in params:
            query_params.append(('apiKey', params['api_key']))  # noqa: E501
        if 'auth_token' in params:
            query_params.append(('auth_token', params['auth_token']))  # noqa: E501
        if 'ct0' in params:
            query_params.append(('ct0', params['ct0']))  # noqa: E501
        if 'media_url' in params:
            query_params.append(('media_url', params['media_url']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/base/apitools/uploadMedia', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResultT',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def upload_media_using_post(self, api_key, auth_token, ct0, media_url, **kwargs):  # noqa: E501
        """upload media (gif)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.upload_media_using_post(api_key, auth_token, ct0, media_url, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: (required)
        :param str auth_token: (required)
        :param str ct0: (required)
        :param str media_url: (required)
        :return: ResultT
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.upload_media_using_post_with_http_info(api_key, auth_token, ct0, media_url, **kwargs)  # noqa: E501
        else:
            (data) = self.upload_media_using_post_with_http_info(api_key, auth_token, ct0, media_url, **kwargs)  # noqa: E501
            return data

    def upload_media_using_post_with_http_info(self, api_key, auth_token, ct0, media_url, **kwargs):  # noqa: E501
        """upload media (gif)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.upload_media_using_post_with_http_info(api_key, auth_token, ct0, media_url, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: (required)
        :param str auth_token: (required)
        :param str ct0: (required)
        :param str media_url: (required)
        :return: ResultT
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_key', 'auth_token', 'ct0', 'media_url']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method upload_media_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'api_key' is set
        if self.api_client.client_side_validation and ('api_key' not in params or
                                                       params['api_key'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `api_key` when calling `upload_media_using_post`")  # noqa: E501
        # verify the required parameter 'auth_token' is set
        if self.api_client.client_side_validation and ('auth_token' not in params or
                                                       params['auth_token'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `auth_token` when calling `upload_media_using_post`")  # noqa: E501
        # verify the required parameter 'ct0' is set
        if self.api_client.client_side_validation and ('ct0' not in params or
                                                       params['ct0'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `ct0` when calling `upload_media_using_post`")  # noqa: E501
        # verify the required parameter 'media_url' is set
        if self.api_client.client_side_validation and ('media_url' not in params or
                                                       params['media_url'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `media_url` when calling `upload_media_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'api_key' in params:
            query_params.append(('apiKey', params['api_key']))  # noqa: E501
        if 'auth_token' in params:
            query_params.append(('auth_token', params['auth_token']))  # noqa: E501
        if 'ct0' in params:
            query_params.append(('ct0', params['ct0']))  # noqa: E501
        if 'media_url' in params:
            query_params.append(('media_url', params['media_url']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/base/apitools/uploadMedia', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResultT',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
