# coding: utf-8

"""
    Utools_twitter_tools_api

    X (Twitter) API for search, Tweets, users, followers, images, media and more. Supports some v1.1 and v2 API endpoints, with more to come in the future!  # noqa: E501

    OpenAPI spec version: 1.1
    Contact: huojiecs@gmail.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class TwitterDMSApiToolsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_dms_list_v2_using_get(self, api_key, auth_token, ct0, cursor, **kwargs):  # noqa: E501
        """get DMS List  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dms_list_v2_using_get(api_key, auth_token, ct0, cursor, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: (required)
        :param str auth_token: (required)
        :param str ct0: (required)
        :param str cursor: (required)
        :return: ResultT
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_dms_list_v2_using_get_with_http_info(api_key, auth_token, ct0, cursor, **kwargs)  # noqa: E501
        else:
            (data) = self.get_dms_list_v2_using_get_with_http_info(api_key, auth_token, ct0, cursor, **kwargs)  # noqa: E501
            return data

    def get_dms_list_v2_using_get_with_http_info(self, api_key, auth_token, ct0, cursor, **kwargs):  # noqa: E501
        """get DMS List  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dms_list_v2_using_get_with_http_info(api_key, auth_token, ct0, cursor, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: (required)
        :param str auth_token: (required)
        :param str ct0: (required)
        :param str cursor: (required)
        :return: ResultT
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_key', 'auth_token', 'ct0', 'cursor']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_dms_list_v2_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'api_key' is set
        if self.api_client.client_side_validation and ('api_key' not in params or
                                                       params['api_key'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `api_key` when calling `get_dms_list_v2_using_get`")  # noqa: E501
        # verify the required parameter 'auth_token' is set
        if self.api_client.client_side_validation and ('auth_token' not in params or
                                                       params['auth_token'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `auth_token` when calling `get_dms_list_v2_using_get`")  # noqa: E501
        # verify the required parameter 'ct0' is set
        if self.api_client.client_side_validation and ('ct0' not in params or
                                                       params['ct0'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `ct0` when calling `get_dms_list_v2_using_get`")  # noqa: E501
        # verify the required parameter 'cursor' is set
        if self.api_client.client_side_validation and ('cursor' not in params or
                                                       params['cursor'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cursor` when calling `get_dms_list_v2_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'api_key' in params:
            query_params.append(('apiKey', params['api_key']))  # noqa: E501
        if 'auth_token' in params:
            query_params.append(('auth_token', params['auth_token']))  # noqa: E501
        if 'ct0' in params:
            query_params.append(('ct0', params['ct0']))  # noqa: E501
        if 'cursor' in params:
            query_params.append(('cursor', params['cursor']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/base/apitools/getDMSListV2', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResultT',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_dms_list_v2_using_post(self, api_key, auth_token, ct0, cursor, **kwargs):  # noqa: E501
        """get DMS List  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dms_list_v2_using_post(api_key, auth_token, ct0, cursor, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: (required)
        :param str auth_token: (required)
        :param str ct0: (required)
        :param str cursor: (required)
        :return: ResultT
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_dms_list_v2_using_post_with_http_info(api_key, auth_token, ct0, cursor, **kwargs)  # noqa: E501
        else:
            (data) = self.get_dms_list_v2_using_post_with_http_info(api_key, auth_token, ct0, cursor, **kwargs)  # noqa: E501
            return data

    def get_dms_list_v2_using_post_with_http_info(self, api_key, auth_token, ct0, cursor, **kwargs):  # noqa: E501
        """get DMS List  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dms_list_v2_using_post_with_http_info(api_key, auth_token, ct0, cursor, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: (required)
        :param str auth_token: (required)
        :param str ct0: (required)
        :param str cursor: (required)
        :return: ResultT
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_key', 'auth_token', 'ct0', 'cursor']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_dms_list_v2_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'api_key' is set
        if self.api_client.client_side_validation and ('api_key' not in params or
                                                       params['api_key'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `api_key` when calling `get_dms_list_v2_using_post`")  # noqa: E501
        # verify the required parameter 'auth_token' is set
        if self.api_client.client_side_validation and ('auth_token' not in params or
                                                       params['auth_token'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `auth_token` when calling `get_dms_list_v2_using_post`")  # noqa: E501
        # verify the required parameter 'ct0' is set
        if self.api_client.client_side_validation and ('ct0' not in params or
                                                       params['ct0'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `ct0` when calling `get_dms_list_v2_using_post`")  # noqa: E501
        # verify the required parameter 'cursor' is set
        if self.api_client.client_side_validation and ('cursor' not in params or
                                                       params['cursor'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `cursor` when calling `get_dms_list_v2_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'api_key' in params:
            query_params.append(('apiKey', params['api_key']))  # noqa: E501
        if 'auth_token' in params:
            query_params.append(('auth_token', params['auth_token']))  # noqa: E501
        if 'ct0' in params:
            query_params.append(('ct0', params['ct0']))  # noqa: E501
        if 'cursor' in params:
            query_params.append(('cursor', params['cursor']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/base/apitools/getDMSListV2', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResultT',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_dms_using_get(self, api_key, auth_token, ct0, id, **kwargs):  # noqa: E501
        """receiving events  # noqa: E501

        See details https://developer.twitter.com/en/docs/twitter-api/v1/direct-messages/sending-and-receiving/api-reference/get-event<br>  how to get <b>auth_token and ct0</b>? <br> https://twitter.com/chen22218/status/1722138510680043555   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dms_using_get(api_key, auth_token, ct0, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: (required)
        :param str auth_token: (required)
        :param str ct0: (required)
        :param str id: (required)
        :return: ResultT
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_dms_using_get_with_http_info(api_key, auth_token, ct0, id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_dms_using_get_with_http_info(api_key, auth_token, ct0, id, **kwargs)  # noqa: E501
            return data

    def get_dms_using_get_with_http_info(self, api_key, auth_token, ct0, id, **kwargs):  # noqa: E501
        """receiving events  # noqa: E501

        See details https://developer.twitter.com/en/docs/twitter-api/v1/direct-messages/sending-and-receiving/api-reference/get-event<br>  how to get <b>auth_token and ct0</b>? <br> https://twitter.com/chen22218/status/1722138510680043555   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dms_using_get_with_http_info(api_key, auth_token, ct0, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: (required)
        :param str auth_token: (required)
        :param str ct0: (required)
        :param str id: (required)
        :return: ResultT
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_key', 'auth_token', 'ct0', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_dms_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'api_key' is set
        if self.api_client.client_side_validation and ('api_key' not in params or
                                                       params['api_key'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `api_key` when calling `get_dms_using_get`")  # noqa: E501
        # verify the required parameter 'auth_token' is set
        if self.api_client.client_side_validation and ('auth_token' not in params or
                                                       params['auth_token'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `auth_token` when calling `get_dms_using_get`")  # noqa: E501
        # verify the required parameter 'ct0' is set
        if self.api_client.client_side_validation and ('ct0' not in params or
                                                       params['ct0'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `ct0` when calling `get_dms_using_get`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `get_dms_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'api_key' in params:
            query_params.append(('apiKey', params['api_key']))  # noqa: E501
        if 'auth_token' in params:
            query_params.append(('auth_token', params['auth_token']))  # noqa: E501
        if 'ct0' in params:
            query_params.append(('ct0', params['ct0']))  # noqa: E501
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/base/apitools/getDMS', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResultT',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_dms_using_post(self, api_key, auth_token, ct0, id, **kwargs):  # noqa: E501
        """receiving events  # noqa: E501

        See details https://developer.twitter.com/en/docs/twitter-api/v1/direct-messages/sending-and-receiving/api-reference/get-event<br>  how to get <b>auth_token and ct0</b>? <br> https://twitter.com/chen22218/status/1722138510680043555   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dms_using_post(api_key, auth_token, ct0, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: (required)
        :param str auth_token: (required)
        :param str ct0: (required)
        :param str id: (required)
        :return: ResultT
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_dms_using_post_with_http_info(api_key, auth_token, ct0, id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_dms_using_post_with_http_info(api_key, auth_token, ct0, id, **kwargs)  # noqa: E501
            return data

    def get_dms_using_post_with_http_info(self, api_key, auth_token, ct0, id, **kwargs):  # noqa: E501
        """receiving events  # noqa: E501

        See details https://developer.twitter.com/en/docs/twitter-api/v1/direct-messages/sending-and-receiving/api-reference/get-event<br>  how to get <b>auth_token and ct0</b>? <br> https://twitter.com/chen22218/status/1722138510680043555   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dms_using_post_with_http_info(api_key, auth_token, ct0, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: (required)
        :param str auth_token: (required)
        :param str ct0: (required)
        :param str id: (required)
        :return: ResultT
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_key', 'auth_token', 'ct0', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_dms_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'api_key' is set
        if self.api_client.client_side_validation and ('api_key' not in params or
                                                       params['api_key'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `api_key` when calling `get_dms_using_post`")  # noqa: E501
        # verify the required parameter 'auth_token' is set
        if self.api_client.client_side_validation and ('auth_token' not in params or
                                                       params['auth_token'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `auth_token` when calling `get_dms_using_post`")  # noqa: E501
        # verify the required parameter 'ct0' is set
        if self.api_client.client_side_validation and ('ct0' not in params or
                                                       params['ct0'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `ct0` when calling `get_dms_using_post`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `get_dms_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'api_key' in params:
            query_params.append(('apiKey', params['api_key']))  # noqa: E501
        if 'auth_token' in params:
            query_params.append(('auth_token', params['auth_token']))  # noqa: E501
        if 'ct0' in params:
            query_params.append(('ct0', params['ct0']))  # noqa: E501
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/base/apitools/getDMS', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResultT',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def send_dms_media_using_get(self, api_key, attachment_media_id, attachment_type, auth_token, ct0, recipient_id, text, type, **kwargs):  # noqa: E501
        """sendDMSMedia events.  # noqa: E501

        See details https://developer.twitter.com/en/docs/twitter-api/v1/direct-messages/sending-and-receiving/api-reference/new-event<br>  how to get <b>auth_token and ct0</b>? <br> https://twitter.com/chen22218/status/1722138510680043555   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.send_dms_media_using_get(api_key, attachment_media_id, attachment_type, auth_token, ct0, recipient_id, text, type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: (required)
        :param str attachment_media_id: (required)
        :param str attachment_type: (required)
        :param str auth_token: (required)
        :param str ct0: (required)
        :param str recipient_id: (required)
        :param str text: (required)
        :param str type: (required)
        :param str quick_reply_type: Returns results with an ID less than (that is, older than) or equal to the specified ID.
        :return: ResultT
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.send_dms_media_using_get_with_http_info(api_key, attachment_media_id, attachment_type, auth_token, ct0, recipient_id, text, type, **kwargs)  # noqa: E501
        else:
            (data) = self.send_dms_media_using_get_with_http_info(api_key, attachment_media_id, attachment_type, auth_token, ct0, recipient_id, text, type, **kwargs)  # noqa: E501
            return data

    def send_dms_media_using_get_with_http_info(self, api_key, attachment_media_id, attachment_type, auth_token, ct0, recipient_id, text, type, **kwargs):  # noqa: E501
        """sendDMSMedia events.  # noqa: E501

        See details https://developer.twitter.com/en/docs/twitter-api/v1/direct-messages/sending-and-receiving/api-reference/new-event<br>  how to get <b>auth_token and ct0</b>? <br> https://twitter.com/chen22218/status/1722138510680043555   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.send_dms_media_using_get_with_http_info(api_key, attachment_media_id, attachment_type, auth_token, ct0, recipient_id, text, type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: (required)
        :param str attachment_media_id: (required)
        :param str attachment_type: (required)
        :param str auth_token: (required)
        :param str ct0: (required)
        :param str recipient_id: (required)
        :param str text: (required)
        :param str type: (required)
        :param str quick_reply_type: Returns results with an ID less than (that is, older than) or equal to the specified ID.
        :return: ResultT
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_key', 'attachment_media_id', 'attachment_type', 'auth_token', 'ct0', 'recipient_id', 'text', 'type', 'quick_reply_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method send_dms_media_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'api_key' is set
        if self.api_client.client_side_validation and ('api_key' not in params or
                                                       params['api_key'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `api_key` when calling `send_dms_media_using_get`")  # noqa: E501
        # verify the required parameter 'attachment_media_id' is set
        if self.api_client.client_side_validation and ('attachment_media_id' not in params or
                                                       params['attachment_media_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `attachment_media_id` when calling `send_dms_media_using_get`")  # noqa: E501
        # verify the required parameter 'attachment_type' is set
        if self.api_client.client_side_validation and ('attachment_type' not in params or
                                                       params['attachment_type'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `attachment_type` when calling `send_dms_media_using_get`")  # noqa: E501
        # verify the required parameter 'auth_token' is set
        if self.api_client.client_side_validation and ('auth_token' not in params or
                                                       params['auth_token'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `auth_token` when calling `send_dms_media_using_get`")  # noqa: E501
        # verify the required parameter 'ct0' is set
        if self.api_client.client_side_validation and ('ct0' not in params or
                                                       params['ct0'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `ct0` when calling `send_dms_media_using_get`")  # noqa: E501
        # verify the required parameter 'recipient_id' is set
        if self.api_client.client_side_validation and ('recipient_id' not in params or
                                                       params['recipient_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `recipient_id` when calling `send_dms_media_using_get`")  # noqa: E501
        # verify the required parameter 'text' is set
        if self.api_client.client_side_validation and ('text' not in params or
                                                       params['text'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `text` when calling `send_dms_media_using_get`")  # noqa: E501
        # verify the required parameter 'type' is set
        if self.api_client.client_side_validation and ('type' not in params or
                                                       params['type'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `type` when calling `send_dms_media_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'api_key' in params:
            query_params.append(('apiKey', params['api_key']))  # noqa: E501
        if 'attachment_media_id' in params:
            query_params.append(('attachment_media_id', params['attachment_media_id']))  # noqa: E501
        if 'attachment_type' in params:
            query_params.append(('attachment_type', params['attachment_type']))  # noqa: E501
        if 'auth_token' in params:
            query_params.append(('auth_token', params['auth_token']))  # noqa: E501
        if 'ct0' in params:
            query_params.append(('ct0', params['ct0']))  # noqa: E501
        if 'quick_reply_type' in params:
            query_params.append(('quick_reply_type', params['quick_reply_type']))  # noqa: E501
        if 'recipient_id' in params:
            query_params.append(('recipient_id', params['recipient_id']))  # noqa: E501
        if 'text' in params:
            query_params.append(('text', params['text']))  # noqa: E501
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/base/apitools/sendDMSMedia', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResultT',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def send_dms_media_using_post(self, api_key, attachment_media_id, attachment_type, auth_token, ct0, recipient_id, text, type, **kwargs):  # noqa: E501
        """sendDMSMedia events.  # noqa: E501

        See details https://developer.twitter.com/en/docs/twitter-api/v1/direct-messages/sending-and-receiving/api-reference/new-event<br>  how to get <b>auth_token and ct0</b>? <br> https://twitter.com/chen22218/status/1722138510680043555   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.send_dms_media_using_post(api_key, attachment_media_id, attachment_type, auth_token, ct0, recipient_id, text, type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: (required)
        :param str attachment_media_id: (required)
        :param str attachment_type: (required)
        :param str auth_token: (required)
        :param str ct0: (required)
        :param str recipient_id: (required)
        :param str text: (required)
        :param str type: (required)
        :param str quick_reply_type: Returns results with an ID less than (that is, older than) or equal to the specified ID.
        :return: ResultT
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.send_dms_media_using_post_with_http_info(api_key, attachment_media_id, attachment_type, auth_token, ct0, recipient_id, text, type, **kwargs)  # noqa: E501
        else:
            (data) = self.send_dms_media_using_post_with_http_info(api_key, attachment_media_id, attachment_type, auth_token, ct0, recipient_id, text, type, **kwargs)  # noqa: E501
            return data

    def send_dms_media_using_post_with_http_info(self, api_key, attachment_media_id, attachment_type, auth_token, ct0, recipient_id, text, type, **kwargs):  # noqa: E501
        """sendDMSMedia events.  # noqa: E501

        See details https://developer.twitter.com/en/docs/twitter-api/v1/direct-messages/sending-and-receiving/api-reference/new-event<br>  how to get <b>auth_token and ct0</b>? <br> https://twitter.com/chen22218/status/1722138510680043555   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.send_dms_media_using_post_with_http_info(api_key, attachment_media_id, attachment_type, auth_token, ct0, recipient_id, text, type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: (required)
        :param str attachment_media_id: (required)
        :param str attachment_type: (required)
        :param str auth_token: (required)
        :param str ct0: (required)
        :param str recipient_id: (required)
        :param str text: (required)
        :param str type: (required)
        :param str quick_reply_type: Returns results with an ID less than (that is, older than) or equal to the specified ID.
        :return: ResultT
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_key', 'attachment_media_id', 'attachment_type', 'auth_token', 'ct0', 'recipient_id', 'text', 'type', 'quick_reply_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method send_dms_media_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'api_key' is set
        if self.api_client.client_side_validation and ('api_key' not in params or
                                                       params['api_key'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `api_key` when calling `send_dms_media_using_post`")  # noqa: E501
        # verify the required parameter 'attachment_media_id' is set
        if self.api_client.client_side_validation and ('attachment_media_id' not in params or
                                                       params['attachment_media_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `attachment_media_id` when calling `send_dms_media_using_post`")  # noqa: E501
        # verify the required parameter 'attachment_type' is set
        if self.api_client.client_side_validation and ('attachment_type' not in params or
                                                       params['attachment_type'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `attachment_type` when calling `send_dms_media_using_post`")  # noqa: E501
        # verify the required parameter 'auth_token' is set
        if self.api_client.client_side_validation and ('auth_token' not in params or
                                                       params['auth_token'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `auth_token` when calling `send_dms_media_using_post`")  # noqa: E501
        # verify the required parameter 'ct0' is set
        if self.api_client.client_side_validation and ('ct0' not in params or
                                                       params['ct0'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `ct0` when calling `send_dms_media_using_post`")  # noqa: E501
        # verify the required parameter 'recipient_id' is set
        if self.api_client.client_side_validation and ('recipient_id' not in params or
                                                       params['recipient_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `recipient_id` when calling `send_dms_media_using_post`")  # noqa: E501
        # verify the required parameter 'text' is set
        if self.api_client.client_side_validation and ('text' not in params or
                                                       params['text'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `text` when calling `send_dms_media_using_post`")  # noqa: E501
        # verify the required parameter 'type' is set
        if self.api_client.client_side_validation and ('type' not in params or
                                                       params['type'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `type` when calling `send_dms_media_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'api_key' in params:
            query_params.append(('apiKey', params['api_key']))  # noqa: E501
        if 'attachment_media_id' in params:
            query_params.append(('attachment_media_id', params['attachment_media_id']))  # noqa: E501
        if 'attachment_type' in params:
            query_params.append(('attachment_type', params['attachment_type']))  # noqa: E501
        if 'auth_token' in params:
            query_params.append(('auth_token', params['auth_token']))  # noqa: E501
        if 'ct0' in params:
            query_params.append(('ct0', params['ct0']))  # noqa: E501
        if 'quick_reply_type' in params:
            query_params.append(('quick_reply_type', params['quick_reply_type']))  # noqa: E501
        if 'recipient_id' in params:
            query_params.append(('recipient_id', params['recipient_id']))  # noqa: E501
        if 'text' in params:
            query_params.append(('text', params['text']))  # noqa: E501
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/base/apitools/sendDMSMedia', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResultT',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def send_dms_using_get(self, api_key, auth_token, ct0, recipient_id, text, type, **kwargs):  # noqa: E501
        """sendDMS events.  # noqa: E501

        See details https://developer.twitter.com/en/docs/twitter-api/v1/direct-messages/sending-and-receiving/api-reference/new-event<br>  how to get <b>auth_token and ct0</b>? <br> https://twitter.com/chen22218/status/1722138510680043555   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.send_dms_using_get(api_key, auth_token, ct0, recipient_id, text, type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: (required)
        :param str auth_token: (required)
        :param str ct0: (required)
        :param str recipient_id: (required)
        :param str text: (required)
        :param str type: (required)
        :return: ResultT
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.send_dms_using_get_with_http_info(api_key, auth_token, ct0, recipient_id, text, type, **kwargs)  # noqa: E501
        else:
            (data) = self.send_dms_using_get_with_http_info(api_key, auth_token, ct0, recipient_id, text, type, **kwargs)  # noqa: E501
            return data

    def send_dms_using_get_with_http_info(self, api_key, auth_token, ct0, recipient_id, text, type, **kwargs):  # noqa: E501
        """sendDMS events.  # noqa: E501

        See details https://developer.twitter.com/en/docs/twitter-api/v1/direct-messages/sending-and-receiving/api-reference/new-event<br>  how to get <b>auth_token and ct0</b>? <br> https://twitter.com/chen22218/status/1722138510680043555   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.send_dms_using_get_with_http_info(api_key, auth_token, ct0, recipient_id, text, type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: (required)
        :param str auth_token: (required)
        :param str ct0: (required)
        :param str recipient_id: (required)
        :param str text: (required)
        :param str type: (required)
        :return: ResultT
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_key', 'auth_token', 'ct0', 'recipient_id', 'text', 'type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method send_dms_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'api_key' is set
        if self.api_client.client_side_validation and ('api_key' not in params or
                                                       params['api_key'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `api_key` when calling `send_dms_using_get`")  # noqa: E501
        # verify the required parameter 'auth_token' is set
        if self.api_client.client_side_validation and ('auth_token' not in params or
                                                       params['auth_token'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `auth_token` when calling `send_dms_using_get`")  # noqa: E501
        # verify the required parameter 'ct0' is set
        if self.api_client.client_side_validation and ('ct0' not in params or
                                                       params['ct0'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `ct0` when calling `send_dms_using_get`")  # noqa: E501
        # verify the required parameter 'recipient_id' is set
        if self.api_client.client_side_validation and ('recipient_id' not in params or
                                                       params['recipient_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `recipient_id` when calling `send_dms_using_get`")  # noqa: E501
        # verify the required parameter 'text' is set
        if self.api_client.client_side_validation and ('text' not in params or
                                                       params['text'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `text` when calling `send_dms_using_get`")  # noqa: E501
        # verify the required parameter 'type' is set
        if self.api_client.client_side_validation and ('type' not in params or
                                                       params['type'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `type` when calling `send_dms_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'api_key' in params:
            query_params.append(('apiKey', params['api_key']))  # noqa: E501
        if 'auth_token' in params:
            query_params.append(('auth_token', params['auth_token']))  # noqa: E501
        if 'ct0' in params:
            query_params.append(('ct0', params['ct0']))  # noqa: E501
        if 'recipient_id' in params:
            query_params.append(('recipient_id', params['recipient_id']))  # noqa: E501
        if 'text' in params:
            query_params.append(('text', params['text']))  # noqa: E501
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/base/apitools/sendDMS', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResultT',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def send_dms_using_post(self, api_key, auth_token, ct0, recipient_id, text, type, **kwargs):  # noqa: E501
        """sendDMS events.  # noqa: E501

        See details https://developer.twitter.com/en/docs/twitter-api/v1/direct-messages/sending-and-receiving/api-reference/new-event<br>  how to get <b>auth_token and ct0</b>? <br> https://twitter.com/chen22218/status/1722138510680043555   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.send_dms_using_post(api_key, auth_token, ct0, recipient_id, text, type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: (required)
        :param str auth_token: (required)
        :param str ct0: (required)
        :param str recipient_id: (required)
        :param str text: (required)
        :param str type: (required)
        :return: ResultT
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.send_dms_using_post_with_http_info(api_key, auth_token, ct0, recipient_id, text, type, **kwargs)  # noqa: E501
        else:
            (data) = self.send_dms_using_post_with_http_info(api_key, auth_token, ct0, recipient_id, text, type, **kwargs)  # noqa: E501
            return data

    def send_dms_using_post_with_http_info(self, api_key, auth_token, ct0, recipient_id, text, type, **kwargs):  # noqa: E501
        """sendDMS events.  # noqa: E501

        See details https://developer.twitter.com/en/docs/twitter-api/v1/direct-messages/sending-and-receiving/api-reference/new-event<br>  how to get <b>auth_token and ct0</b>? <br> https://twitter.com/chen22218/status/1722138510680043555   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.send_dms_using_post_with_http_info(api_key, auth_token, ct0, recipient_id, text, type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: (required)
        :param str auth_token: (required)
        :param str ct0: (required)
        :param str recipient_id: (required)
        :param str text: (required)
        :param str type: (required)
        :return: ResultT
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_key', 'auth_token', 'ct0', 'recipient_id', 'text', 'type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method send_dms_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'api_key' is set
        if self.api_client.client_side_validation and ('api_key' not in params or
                                                       params['api_key'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `api_key` when calling `send_dms_using_post`")  # noqa: E501
        # verify the required parameter 'auth_token' is set
        if self.api_client.client_side_validation and ('auth_token' not in params or
                                                       params['auth_token'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `auth_token` when calling `send_dms_using_post`")  # noqa: E501
        # verify the required parameter 'ct0' is set
        if self.api_client.client_side_validation and ('ct0' not in params or
                                                       params['ct0'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `ct0` when calling `send_dms_using_post`")  # noqa: E501
        # verify the required parameter 'recipient_id' is set
        if self.api_client.client_side_validation and ('recipient_id' not in params or
                                                       params['recipient_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `recipient_id` when calling `send_dms_using_post`")  # noqa: E501
        # verify the required parameter 'text' is set
        if self.api_client.client_side_validation and ('text' not in params or
                                                       params['text'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `text` when calling `send_dms_using_post`")  # noqa: E501
        # verify the required parameter 'type' is set
        if self.api_client.client_side_validation and ('type' not in params or
                                                       params['type'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `type` when calling `send_dms_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'api_key' in params:
            query_params.append(('apiKey', params['api_key']))  # noqa: E501
        if 'auth_token' in params:
            query_params.append(('auth_token', params['auth_token']))  # noqa: E501
        if 'ct0' in params:
            query_params.append(('ct0', params['ct0']))  # noqa: E501
        if 'recipient_id' in params:
            query_params.append(('recipient_id', params['recipient_id']))  # noqa: E501
        if 'text' in params:
            query_params.append(('text', params['text']))  # noqa: E501
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/base/apitools/sendDMS', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResultT',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def upload_media_dm_using_get(self, api_key, auth_token, ct0, file, **kwargs):  # noqa: E501
        """upload media for DM   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.upload_media_dm_using_get(api_key, auth_token, ct0, file, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: (required)
        :param str auth_token: (required)
        :param str ct0: (required)
        :param file file: file (required)
        :return: ResultT
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.upload_media_dm_using_get_with_http_info(api_key, auth_token, ct0, file, **kwargs)  # noqa: E501
        else:
            (data) = self.upload_media_dm_using_get_with_http_info(api_key, auth_token, ct0, file, **kwargs)  # noqa: E501
            return data

    def upload_media_dm_using_get_with_http_info(self, api_key, auth_token, ct0, file, **kwargs):  # noqa: E501
        """upload media for DM   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.upload_media_dm_using_get_with_http_info(api_key, auth_token, ct0, file, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: (required)
        :param str auth_token: (required)
        :param str ct0: (required)
        :param file file: file (required)
        :return: ResultT
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_key', 'auth_token', 'ct0', 'file']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method upload_media_dm_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'api_key' is set
        if self.api_client.client_side_validation and ('api_key' not in params or
                                                       params['api_key'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `api_key` when calling `upload_media_dm_using_get`")  # noqa: E501
        # verify the required parameter 'auth_token' is set
        if self.api_client.client_side_validation and ('auth_token' not in params or
                                                       params['auth_token'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `auth_token` when calling `upload_media_dm_using_get`")  # noqa: E501
        # verify the required parameter 'ct0' is set
        if self.api_client.client_side_validation and ('ct0' not in params or
                                                       params['ct0'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `ct0` when calling `upload_media_dm_using_get`")  # noqa: E501
        # verify the required parameter 'file' is set
        if self.api_client.client_side_validation and ('file' not in params or
                                                       params['file'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `file` when calling `upload_media_dm_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'api_key' in params:
            query_params.append(('apiKey', params['api_key']))  # noqa: E501
        if 'auth_token' in params:
            query_params.append(('auth_token', params['auth_token']))  # noqa: E501
        if 'ct0' in params:
            query_params.append(('ct0', params['ct0']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'file' in params:
            local_var_files['file'] = params['file']  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/base/apitools/uploadMediaDM', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResultT',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def upload_media_dm_using_post(self, api_key, auth_token, ct0, file, **kwargs):  # noqa: E501
        """upload media for DM   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.upload_media_dm_using_post(api_key, auth_token, ct0, file, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: (required)
        :param str auth_token: (required)
        :param str ct0: (required)
        :param file file: file (required)
        :return: ResultT
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.upload_media_dm_using_post_with_http_info(api_key, auth_token, ct0, file, **kwargs)  # noqa: E501
        else:
            (data) = self.upload_media_dm_using_post_with_http_info(api_key, auth_token, ct0, file, **kwargs)  # noqa: E501
            return data

    def upload_media_dm_using_post_with_http_info(self, api_key, auth_token, ct0, file, **kwargs):  # noqa: E501
        """upload media for DM   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.upload_media_dm_using_post_with_http_info(api_key, auth_token, ct0, file, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: (required)
        :param str auth_token: (required)
        :param str ct0: (required)
        :param file file: file (required)
        :return: ResultT
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_key', 'auth_token', 'ct0', 'file']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method upload_media_dm_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'api_key' is set
        if self.api_client.client_side_validation and ('api_key' not in params or
                                                       params['api_key'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `api_key` when calling `upload_media_dm_using_post`")  # noqa: E501
        # verify the required parameter 'auth_token' is set
        if self.api_client.client_side_validation and ('auth_token' not in params or
                                                       params['auth_token'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `auth_token` when calling `upload_media_dm_using_post`")  # noqa: E501
        # verify the required parameter 'ct0' is set
        if self.api_client.client_side_validation and ('ct0' not in params or
                                                       params['ct0'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `ct0` when calling `upload_media_dm_using_post`")  # noqa: E501
        # verify the required parameter 'file' is set
        if self.api_client.client_side_validation and ('file' not in params or
                                                       params['file'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `file` when calling `upload_media_dm_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'api_key' in params:
            query_params.append(('apiKey', params['api_key']))  # noqa: E501
        if 'auth_token' in params:
            query_params.append(('auth_token', params['auth_token']))  # noqa: E501
        if 'ct0' in params:
            query_params.append(('ct0', params['ct0']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'file' in params:
            local_var_files['file'] = params['file']  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/base/apitools/uploadMediaDM', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResultT',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
