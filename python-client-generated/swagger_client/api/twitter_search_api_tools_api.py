# coding: utf-8

"""
    Utools_twitter_tools_api

    X (Twitter) API for search, Tweets, users, followers, images, media and more. Supports some v1.1 and v2 API endpoints, with more to come in the future!  # noqa: E501

    OpenAPI spec version: 1.1
    Contact: huojiecs@gmail.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class TwitterSearchApiToolsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def search_using_get(self, api_key, words, **kwargs):  # noqa: E501
        """Advanced Search  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_using_get(api_key, words, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: (required)
        :param str words: (required)
        :param str any: Any of these words (Example: cats dogs �� contains either ��cats�� or ��dogs�� (or both))
        :param str cursor: cursor (Example: AACCgACF91iNpzAJxAKAAMX3WI2nL-x4AgABAAAAA )
        :param str _from: From these accounts (Example: @Twitter �� sent from @Twitter)
        :param str likes: Minimum likes (Example: 280 �� Tweets with at least 280 likes))
        :param str mentioning: Mentioning these accounts (Example: @SFBART @Caltrain �� mentions @SFBART or mentions @Caltrain)
        :param str _none: None of these words (Example: cats dogs �� does not contain ��cats�� and does not contain ��dogs��)
        :param str phrase: This exact phrase (Example: happy hour �� contains the exact phrase ��happy hour��)
        :param str replies: Minimum replies (Example: 280 �� Tweets with at least 280 replies)
        :param str retweets: Minimum retweets (Example: 280 �� Tweets with at least 280 likes)
        :param str since: start time (Example: 2020-01-01 )
        :param str tag: These hashtags (Example: #ThrowbackThursday �� contains the hashtag #ThrowbackThursday)
        :param str to: To these accounts (Example: @Twitter �� sent in reply to @Twitter)
        :param str until: end time (Example: 2021-02-02)
        :return: ResultT
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.search_using_get_with_http_info(api_key, words, **kwargs)  # noqa: E501
        else:
            (data) = self.search_using_get_with_http_info(api_key, words, **kwargs)  # noqa: E501
            return data

    def search_using_get_with_http_info(self, api_key, words, **kwargs):  # noqa: E501
        """Advanced Search  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_using_get_with_http_info(api_key, words, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: (required)
        :param str words: (required)
        :param str any: Any of these words (Example: cats dogs �� contains either ��cats�� or ��dogs�� (or both))
        :param str cursor: cursor (Example: AACCgACF91iNpzAJxAKAAMX3WI2nL-x4AgABAAAAA )
        :param str _from: From these accounts (Example: @Twitter �� sent from @Twitter)
        :param str likes: Minimum likes (Example: 280 �� Tweets with at least 280 likes))
        :param str mentioning: Mentioning these accounts (Example: @SFBART @Caltrain �� mentions @SFBART or mentions @Caltrain)
        :param str _none: None of these words (Example: cats dogs �� does not contain ��cats�� and does not contain ��dogs��)
        :param str phrase: This exact phrase (Example: happy hour �� contains the exact phrase ��happy hour��)
        :param str replies: Minimum replies (Example: 280 �� Tweets with at least 280 replies)
        :param str retweets: Minimum retweets (Example: 280 �� Tweets with at least 280 likes)
        :param str since: start time (Example: 2020-01-01 )
        :param str tag: These hashtags (Example: #ThrowbackThursday �� contains the hashtag #ThrowbackThursday)
        :param str to: To these accounts (Example: @Twitter �� sent in reply to @Twitter)
        :param str until: end time (Example: 2021-02-02)
        :return: ResultT
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_key', 'words', 'any', 'cursor', '_from', 'likes', 'mentioning', '_none', 'phrase', 'replies', 'retweets', 'since', 'tag', 'to', 'until']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method search_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'api_key' is set
        if self.api_client.client_side_validation and ('api_key' not in params or
                                                       params['api_key'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `api_key` when calling `search_using_get`")  # noqa: E501
        # verify the required parameter 'words' is set
        if self.api_client.client_side_validation and ('words' not in params or
                                                       params['words'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `words` when calling `search_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'any' in params:
            query_params.append(('any', params['any']))  # noqa: E501
        if 'api_key' in params:
            query_params.append(('apiKey', params['api_key']))  # noqa: E501
        if 'cursor' in params:
            query_params.append(('cursor', params['cursor']))  # noqa: E501
        if '_from' in params:
            query_params.append(('from', params['_from']))  # noqa: E501
        if 'likes' in params:
            query_params.append(('likes', params['likes']))  # noqa: E501
        if 'mentioning' in params:
            query_params.append(('mentioning', params['mentioning']))  # noqa: E501
        if '_none' in params:
            query_params.append(('none', params['_none']))  # noqa: E501
        if 'phrase' in params:
            query_params.append(('phrase', params['phrase']))  # noqa: E501
        if 'replies' in params:
            query_params.append(('replies', params['replies']))  # noqa: E501
        if 'retweets' in params:
            query_params.append(('retweets', params['retweets']))  # noqa: E501
        if 'since' in params:
            query_params.append(('since', params['since']))  # noqa: E501
        if 'tag' in params:
            query_params.append(('tag', params['tag']))  # noqa: E501
        if 'to' in params:
            query_params.append(('to', params['to']))  # noqa: E501
        if 'until' in params:
            query_params.append(('until', params['until']))  # noqa: E501
        if 'words' in params:
            query_params.append(('words', params['words']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/base/apitools/search', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResultT',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def search_using_post(self, api_key, words, **kwargs):  # noqa: E501
        """Advanced Search  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_using_post(api_key, words, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: (required)
        :param str words: (required)
        :param str any: Any of these words (Example: cats dogs �� contains either ��cats�� or ��dogs�� (or both))
        :param str cursor: cursor (Example: AACCgACF91iNpzAJxAKAAMX3WI2nL-x4AgABAAAAA )
        :param str _from: From these accounts (Example: @Twitter �� sent from @Twitter)
        :param str likes: Minimum likes (Example: 280 �� Tweets with at least 280 likes))
        :param str mentioning: Mentioning these accounts (Example: @SFBART @Caltrain �� mentions @SFBART or mentions @Caltrain)
        :param str _none: None of these words (Example: cats dogs �� does not contain ��cats�� and does not contain ��dogs��)
        :param str phrase: This exact phrase (Example: happy hour �� contains the exact phrase ��happy hour��)
        :param str replies: Minimum replies (Example: 280 �� Tweets with at least 280 replies)
        :param str retweets: Minimum retweets (Example: 280 �� Tweets with at least 280 likes)
        :param str since: start time (Example: 2020-01-01 )
        :param str tag: These hashtags (Example: #ThrowbackThursday �� contains the hashtag #ThrowbackThursday)
        :param str to: To these accounts (Example: @Twitter �� sent in reply to @Twitter)
        :param str until: end time (Example: 2021-02-02)
        :return: ResultT
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.search_using_post_with_http_info(api_key, words, **kwargs)  # noqa: E501
        else:
            (data) = self.search_using_post_with_http_info(api_key, words, **kwargs)  # noqa: E501
            return data

    def search_using_post_with_http_info(self, api_key, words, **kwargs):  # noqa: E501
        """Advanced Search  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_using_post_with_http_info(api_key, words, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: (required)
        :param str words: (required)
        :param str any: Any of these words (Example: cats dogs �� contains either ��cats�� or ��dogs�� (or both))
        :param str cursor: cursor (Example: AACCgACF91iNpzAJxAKAAMX3WI2nL-x4AgABAAAAA )
        :param str _from: From these accounts (Example: @Twitter �� sent from @Twitter)
        :param str likes: Minimum likes (Example: 280 �� Tweets with at least 280 likes))
        :param str mentioning: Mentioning these accounts (Example: @SFBART @Caltrain �� mentions @SFBART or mentions @Caltrain)
        :param str _none: None of these words (Example: cats dogs �� does not contain ��cats�� and does not contain ��dogs��)
        :param str phrase: This exact phrase (Example: happy hour �� contains the exact phrase ��happy hour��)
        :param str replies: Minimum replies (Example: 280 �� Tweets with at least 280 replies)
        :param str retweets: Minimum retweets (Example: 280 �� Tweets with at least 280 likes)
        :param str since: start time (Example: 2020-01-01 )
        :param str tag: These hashtags (Example: #ThrowbackThursday �� contains the hashtag #ThrowbackThursday)
        :param str to: To these accounts (Example: @Twitter �� sent in reply to @Twitter)
        :param str until: end time (Example: 2021-02-02)
        :return: ResultT
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_key', 'words', 'any', 'cursor', '_from', 'likes', 'mentioning', '_none', 'phrase', 'replies', 'retweets', 'since', 'tag', 'to', 'until']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method search_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'api_key' is set
        if self.api_client.client_side_validation and ('api_key' not in params or
                                                       params['api_key'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `api_key` when calling `search_using_post`")  # noqa: E501
        # verify the required parameter 'words' is set
        if self.api_client.client_side_validation and ('words' not in params or
                                                       params['words'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `words` when calling `search_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'any' in params:
            query_params.append(('any', params['any']))  # noqa: E501
        if 'api_key' in params:
            query_params.append(('apiKey', params['api_key']))  # noqa: E501
        if 'cursor' in params:
            query_params.append(('cursor', params['cursor']))  # noqa: E501
        if '_from' in params:
            query_params.append(('from', params['_from']))  # noqa: E501
        if 'likes' in params:
            query_params.append(('likes', params['likes']))  # noqa: E501
        if 'mentioning' in params:
            query_params.append(('mentioning', params['mentioning']))  # noqa: E501
        if '_none' in params:
            query_params.append(('none', params['_none']))  # noqa: E501
        if 'phrase' in params:
            query_params.append(('phrase', params['phrase']))  # noqa: E501
        if 'replies' in params:
            query_params.append(('replies', params['replies']))  # noqa: E501
        if 'retweets' in params:
            query_params.append(('retweets', params['retweets']))  # noqa: E501
        if 'since' in params:
            query_params.append(('since', params['since']))  # noqa: E501
        if 'tag' in params:
            query_params.append(('tag', params['tag']))  # noqa: E501
        if 'to' in params:
            query_params.append(('to', params['to']))  # noqa: E501
        if 'until' in params:
            query_params.append(('until', params['until']))  # noqa: E501
        if 'words' in params:
            query_params.append(('words', params['words']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/base/apitools/search', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResultT',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def trends_using_get(self, api_key, id, **kwargs):  # noqa: E501
        """trends Search  # noqa: E501

        see details https://developer.twitter.com/en/docs/twitter-api/v1/trends/trends-for-location/api-reference/get-trends-place  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.trends_using_get(api_key, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: (required)
        :param str id: (required)
        :return: ResultT
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.trends_using_get_with_http_info(api_key, id, **kwargs)  # noqa: E501
        else:
            (data) = self.trends_using_get_with_http_info(api_key, id, **kwargs)  # noqa: E501
            return data

    def trends_using_get_with_http_info(self, api_key, id, **kwargs):  # noqa: E501
        """trends Search  # noqa: E501

        see details https://developer.twitter.com/en/docs/twitter-api/v1/trends/trends-for-location/api-reference/get-trends-place  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.trends_using_get_with_http_info(api_key, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: (required)
        :param str id: (required)
        :return: ResultT
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_key', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method trends_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'api_key' is set
        if self.api_client.client_side_validation and ('api_key' not in params or
                                                       params['api_key'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `api_key` when calling `trends_using_get`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `trends_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'api_key' in params:
            query_params.append(('apiKey', params['api_key']))  # noqa: E501
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/base/apitools/trends', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResultT',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def trends_using_post(self, api_key, id, **kwargs):  # noqa: E501
        """trends Search  # noqa: E501

        see details https://developer.twitter.com/en/docs/twitter-api/v1/trends/trends-for-location/api-reference/get-trends-place  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.trends_using_post(api_key, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: (required)
        :param str id: (required)
        :return: ResultT
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.trends_using_post_with_http_info(api_key, id, **kwargs)  # noqa: E501
        else:
            (data) = self.trends_using_post_with_http_info(api_key, id, **kwargs)  # noqa: E501
            return data

    def trends_using_post_with_http_info(self, api_key, id, **kwargs):  # noqa: E501
        """trends Search  # noqa: E501

        see details https://developer.twitter.com/en/docs/twitter-api/v1/trends/trends-for-location/api-reference/get-trends-place  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.trends_using_post_with_http_info(api_key, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: (required)
        :param str id: (required)
        :return: ResultT
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_key', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method trends_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'api_key' is set
        if self.api_client.client_side_validation and ('api_key' not in params or
                                                       params['api_key'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `api_key` when calling `trends_using_post`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `trends_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'api_key' in params:
            query_params.append(('apiKey', params['api_key']))  # noqa: E501
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/base/apitools/trends', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResultT',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
