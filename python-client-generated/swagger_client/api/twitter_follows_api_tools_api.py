# coding: utf-8

"""
    Utools_twitter_tools_api

    X (Twitter) API for search, Tweets, users, followers, images, media and more. Supports some v1.1 and v2 API endpoints, with more to come in the future!  # noqa: E501

    OpenAPI spec version: 1.1
    Contact: huojiecs@gmail.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class TwitterFollowsApiToolsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def blue_verified_followers_v2_using_get(self, api_key, user_id, **kwargs):  # noqa: E501
        """get blueVerifiedFollowers by V2   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.blue_verified_followers_v2_using_get(api_key, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: (required)
        :param str user_id: (required)
        :param str cursor:
        :return: ResultT
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.blue_verified_followers_v2_using_get_with_http_info(api_key, user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.blue_verified_followers_v2_using_get_with_http_info(api_key, user_id, **kwargs)  # noqa: E501
            return data

    def blue_verified_followers_v2_using_get_with_http_info(self, api_key, user_id, **kwargs):  # noqa: E501
        """get blueVerifiedFollowers by V2   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.blue_verified_followers_v2_using_get_with_http_info(api_key, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: (required)
        :param str user_id: (required)
        :param str cursor:
        :return: ResultT
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_key', 'user_id', 'cursor']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method blue_verified_followers_v2_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'api_key' is set
        if self.api_client.client_side_validation and ('api_key' not in params or
                                                       params['api_key'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `api_key` when calling `blue_verified_followers_v2_using_get`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if self.api_client.client_side_validation and ('user_id' not in params or
                                                       params['user_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `user_id` when calling `blue_verified_followers_v2_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'api_key' in params:
            query_params.append(('apiKey', params['api_key']))  # noqa: E501
        if 'cursor' in params:
            query_params.append(('cursor', params['cursor']))  # noqa: E501
        if 'user_id' in params:
            query_params.append(('userId', params['user_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/base/apitools/blueVerifiedFollowersV2', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResultT',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def blue_verified_followers_v2_using_post(self, api_key, user_id, **kwargs):  # noqa: E501
        """get blueVerifiedFollowers by V2   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.blue_verified_followers_v2_using_post(api_key, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: (required)
        :param str user_id: (required)
        :param str cursor:
        :return: ResultT
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.blue_verified_followers_v2_using_post_with_http_info(api_key, user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.blue_verified_followers_v2_using_post_with_http_info(api_key, user_id, **kwargs)  # noqa: E501
            return data

    def blue_verified_followers_v2_using_post_with_http_info(self, api_key, user_id, **kwargs):  # noqa: E501
        """get blueVerifiedFollowers by V2   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.blue_verified_followers_v2_using_post_with_http_info(api_key, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: (required)
        :param str user_id: (required)
        :param str cursor:
        :return: ResultT
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_key', 'user_id', 'cursor']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method blue_verified_followers_v2_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'api_key' is set
        if self.api_client.client_side_validation and ('api_key' not in params or
                                                       params['api_key'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `api_key` when calling `blue_verified_followers_v2_using_post`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if self.api_client.client_side_validation and ('user_id' not in params or
                                                       params['user_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `user_id` when calling `blue_verified_followers_v2_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'api_key' in params:
            query_params.append(('apiKey', params['api_key']))  # noqa: E501
        if 'cursor' in params:
            query_params.append(('cursor', params['cursor']))  # noqa: E501
        if 'user_id' in params:
            query_params.append(('userId', params['user_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/base/apitools/blueVerifiedFollowersV2', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResultT',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def follow_using_get(self, api_key, auth_token, ct0, **kwargs):  # noqa: E501
        """to follow   # noqa: E501

        See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/post-friendships-create  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.follow_using_get(api_key, auth_token, ct0, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: (required)
        :param str auth_token: (required)
        :param str ct0: (required)
        :param str screen_name:
        :param str user_id:
        :return: ResultT
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.follow_using_get_with_http_info(api_key, auth_token, ct0, **kwargs)  # noqa: E501
        else:
            (data) = self.follow_using_get_with_http_info(api_key, auth_token, ct0, **kwargs)  # noqa: E501
            return data

    def follow_using_get_with_http_info(self, api_key, auth_token, ct0, **kwargs):  # noqa: E501
        """to follow   # noqa: E501

        See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/post-friendships-create  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.follow_using_get_with_http_info(api_key, auth_token, ct0, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: (required)
        :param str auth_token: (required)
        :param str ct0: (required)
        :param str screen_name:
        :param str user_id:
        :return: ResultT
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_key', 'auth_token', 'ct0', 'screen_name', 'user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method follow_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'api_key' is set
        if self.api_client.client_side_validation and ('api_key' not in params or
                                                       params['api_key'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `api_key` when calling `follow_using_get`")  # noqa: E501
        # verify the required parameter 'auth_token' is set
        if self.api_client.client_side_validation and ('auth_token' not in params or
                                                       params['auth_token'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `auth_token` when calling `follow_using_get`")  # noqa: E501
        # verify the required parameter 'ct0' is set
        if self.api_client.client_side_validation and ('ct0' not in params or
                                                       params['ct0'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `ct0` when calling `follow_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'api_key' in params:
            query_params.append(('apiKey', params['api_key']))  # noqa: E501
        if 'auth_token' in params:
            query_params.append(('auth_token', params['auth_token']))  # noqa: E501
        if 'ct0' in params:
            query_params.append(('ct0', params['ct0']))  # noqa: E501
        if 'screen_name' in params:
            query_params.append(('screenName', params['screen_name']))  # noqa: E501
        if 'user_id' in params:
            query_params.append(('userId', params['user_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/base/apitools/follow', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResultT',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def follow_using_post(self, api_key, auth_token, ct0, **kwargs):  # noqa: E501
        """to follow   # noqa: E501

        See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/post-friendships-create  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.follow_using_post(api_key, auth_token, ct0, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: (required)
        :param str auth_token: (required)
        :param str ct0: (required)
        :param str screen_name:
        :param str user_id:
        :return: ResultT
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.follow_using_post_with_http_info(api_key, auth_token, ct0, **kwargs)  # noqa: E501
        else:
            (data) = self.follow_using_post_with_http_info(api_key, auth_token, ct0, **kwargs)  # noqa: E501
            return data

    def follow_using_post_with_http_info(self, api_key, auth_token, ct0, **kwargs):  # noqa: E501
        """to follow   # noqa: E501

        See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/post-friendships-create  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.follow_using_post_with_http_info(api_key, auth_token, ct0, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: (required)
        :param str auth_token: (required)
        :param str ct0: (required)
        :param str screen_name:
        :param str user_id:
        :return: ResultT
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_key', 'auth_token', 'ct0', 'screen_name', 'user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method follow_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'api_key' is set
        if self.api_client.client_side_validation and ('api_key' not in params or
                                                       params['api_key'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `api_key` when calling `follow_using_post`")  # noqa: E501
        # verify the required parameter 'auth_token' is set
        if self.api_client.client_side_validation and ('auth_token' not in params or
                                                       params['auth_token'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `auth_token` when calling `follow_using_post`")  # noqa: E501
        # verify the required parameter 'ct0' is set
        if self.api_client.client_side_validation and ('ct0' not in params or
                                                       params['ct0'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `ct0` when calling `follow_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'api_key' in params:
            query_params.append(('apiKey', params['api_key']))  # noqa: E501
        if 'auth_token' in params:
            query_params.append(('auth_token', params['auth_token']))  # noqa: E501
        if 'ct0' in params:
            query_params.append(('ct0', params['ct0']))  # noqa: E501
        if 'screen_name' in params:
            query_params.append(('screenName', params['screen_name']))  # noqa: E501
        if 'user_id' in params:
            query_params.append(('userId', params['user_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/base/apitools/follow', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResultT',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def followers_ids_using_get(self, api_key, **kwargs):  # noqa: E501
        """Get Followers Ids  # noqa: E501

        See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-followers-ids  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.followers_ids_using_get(api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: (required)
        :param str cursor:
        :param str screen_name:
        :param str user_id:
        :return: ResultT
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.followers_ids_using_get_with_http_info(api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.followers_ids_using_get_with_http_info(api_key, **kwargs)  # noqa: E501
            return data

    def followers_ids_using_get_with_http_info(self, api_key, **kwargs):  # noqa: E501
        """Get Followers Ids  # noqa: E501

        See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-followers-ids  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.followers_ids_using_get_with_http_info(api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: (required)
        :param str cursor:
        :param str screen_name:
        :param str user_id:
        :return: ResultT
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_key', 'cursor', 'screen_name', 'user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method followers_ids_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'api_key' is set
        if self.api_client.client_side_validation and ('api_key' not in params or
                                                       params['api_key'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `api_key` when calling `followers_ids_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'api_key' in params:
            query_params.append(('apiKey', params['api_key']))  # noqa: E501
        if 'cursor' in params:
            query_params.append(('cursor', params['cursor']))  # noqa: E501
        if 'screen_name' in params:
            query_params.append(('screenName', params['screen_name']))  # noqa: E501
        if 'user_id' in params:
            query_params.append(('userId', params['user_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/base/apitools/followersIds', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResultT',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def followers_ids_using_post(self, api_key, **kwargs):  # noqa: E501
        """Get Followers Ids  # noqa: E501

        See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-followers-ids  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.followers_ids_using_post(api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: (required)
        :param str cursor:
        :param str screen_name:
        :param str user_id:
        :return: ResultT
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.followers_ids_using_post_with_http_info(api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.followers_ids_using_post_with_http_info(api_key, **kwargs)  # noqa: E501
            return data

    def followers_ids_using_post_with_http_info(self, api_key, **kwargs):  # noqa: E501
        """Get Followers Ids  # noqa: E501

        See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-followers-ids  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.followers_ids_using_post_with_http_info(api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: (required)
        :param str cursor:
        :param str screen_name:
        :param str user_id:
        :return: ResultT
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_key', 'cursor', 'screen_name', 'user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method followers_ids_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'api_key' is set
        if self.api_client.client_side_validation and ('api_key' not in params or
                                                       params['api_key'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `api_key` when calling `followers_ids_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'api_key' in params:
            query_params.append(('apiKey', params['api_key']))  # noqa: E501
        if 'cursor' in params:
            query_params.append(('cursor', params['cursor']))  # noqa: E501
        if 'screen_name' in params:
            query_params.append(('screenName', params['screen_name']))  # noqa: E501
        if 'user_id' in params:
            query_params.append(('userId', params['user_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/base/apitools/followersIds', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResultT',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def followers_list_using_get(self, api_key, **kwargs):  # noqa: E501
        """Get Followers User Collection  # noqa: E501

        See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-followers-list  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.followers_list_using_get(api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: (required)
        :param str cursor:
        :param str screen_name:
        :param str user_id:
        :return: ResultT
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.followers_list_using_get_with_http_info(api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.followers_list_using_get_with_http_info(api_key, **kwargs)  # noqa: E501
            return data

    def followers_list_using_get_with_http_info(self, api_key, **kwargs):  # noqa: E501
        """Get Followers User Collection  # noqa: E501

        See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-followers-list  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.followers_list_using_get_with_http_info(api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: (required)
        :param str cursor:
        :param str screen_name:
        :param str user_id:
        :return: ResultT
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_key', 'cursor', 'screen_name', 'user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method followers_list_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'api_key' is set
        if self.api_client.client_side_validation and ('api_key' not in params or
                                                       params['api_key'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `api_key` when calling `followers_list_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'api_key' in params:
            query_params.append(('apiKey', params['api_key']))  # noqa: E501
        if 'cursor' in params:
            query_params.append(('cursor', params['cursor']))  # noqa: E501
        if 'screen_name' in params:
            query_params.append(('screenName', params['screen_name']))  # noqa: E501
        if 'user_id' in params:
            query_params.append(('userId', params['user_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/base/apitools/followersList', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResultT',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def followers_list_using_post(self, api_key, **kwargs):  # noqa: E501
        """Get Followers User Collection  # noqa: E501

        See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-followers-list  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.followers_list_using_post(api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: (required)
        :param str cursor:
        :param str screen_name:
        :param str user_id:
        :return: ResultT
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.followers_list_using_post_with_http_info(api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.followers_list_using_post_with_http_info(api_key, **kwargs)  # noqa: E501
            return data

    def followers_list_using_post_with_http_info(self, api_key, **kwargs):  # noqa: E501
        """Get Followers User Collection  # noqa: E501

        See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-followers-list  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.followers_list_using_post_with_http_info(api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: (required)
        :param str cursor:
        :param str screen_name:
        :param str user_id:
        :return: ResultT
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_key', 'cursor', 'screen_name', 'user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method followers_list_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'api_key' is set
        if self.api_client.client_side_validation and ('api_key' not in params or
                                                       params['api_key'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `api_key` when calling `followers_list_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'api_key' in params:
            query_params.append(('apiKey', params['api_key']))  # noqa: E501
        if 'cursor' in params:
            query_params.append(('cursor', params['cursor']))  # noqa: E501
        if 'screen_name' in params:
            query_params.append(('screenName', params['screen_name']))  # noqa: E501
        if 'user_id' in params:
            query_params.append(('userId', params['user_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/base/apitools/followersList', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResultT',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def followers_list_v2_using_get(self, api_key, user_id, **kwargs):  # noqa: E501
        """get followersList by V2   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.followers_list_v2_using_get(api_key, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: (required)
        :param str user_id: (required)
        :param str cursor:
        :return: ResultT
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.followers_list_v2_using_get_with_http_info(api_key, user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.followers_list_v2_using_get_with_http_info(api_key, user_id, **kwargs)  # noqa: E501
            return data

    def followers_list_v2_using_get_with_http_info(self, api_key, user_id, **kwargs):  # noqa: E501
        """get followersList by V2   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.followers_list_v2_using_get_with_http_info(api_key, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: (required)
        :param str user_id: (required)
        :param str cursor:
        :return: ResultT
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_key', 'user_id', 'cursor']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method followers_list_v2_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'api_key' is set
        if self.api_client.client_side_validation and ('api_key' not in params or
                                                       params['api_key'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `api_key` when calling `followers_list_v2_using_get`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if self.api_client.client_side_validation and ('user_id' not in params or
                                                       params['user_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `user_id` when calling `followers_list_v2_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'api_key' in params:
            query_params.append(('apiKey', params['api_key']))  # noqa: E501
        if 'cursor' in params:
            query_params.append(('cursor', params['cursor']))  # noqa: E501
        if 'user_id' in params:
            query_params.append(('userId', params['user_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/base/apitools/followersListV2', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResultT',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def followers_list_v2_using_post(self, api_key, user_id, **kwargs):  # noqa: E501
        """get followersList by V2   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.followers_list_v2_using_post(api_key, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: (required)
        :param str user_id: (required)
        :param str cursor:
        :return: ResultT
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.followers_list_v2_using_post_with_http_info(api_key, user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.followers_list_v2_using_post_with_http_info(api_key, user_id, **kwargs)  # noqa: E501
            return data

    def followers_list_v2_using_post_with_http_info(self, api_key, user_id, **kwargs):  # noqa: E501
        """get followersList by V2   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.followers_list_v2_using_post_with_http_info(api_key, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: (required)
        :param str user_id: (required)
        :param str cursor:
        :return: ResultT
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_key', 'user_id', 'cursor']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method followers_list_v2_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'api_key' is set
        if self.api_client.client_side_validation and ('api_key' not in params or
                                                       params['api_key'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `api_key` when calling `followers_list_v2_using_post`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if self.api_client.client_side_validation and ('user_id' not in params or
                                                       params['user_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `user_id` when calling `followers_list_v2_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'api_key' in params:
            query_params.append(('apiKey', params['api_key']))  # noqa: E501
        if 'cursor' in params:
            query_params.append(('cursor', params['cursor']))  # noqa: E501
        if 'user_id' in params:
            query_params.append(('userId', params['user_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/base/apitools/followersListV2', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResultT',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def followings_ids_using_get(self, api_key, **kwargs):  # noqa: E501
        """Get Followings Ids  # noqa: E501

        See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-friends-ids  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.followings_ids_using_get(api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: (required)
        :param str cursor:
        :param str screen_name:
        :param str user_id:
        :return: ResultT
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.followings_ids_using_get_with_http_info(api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.followings_ids_using_get_with_http_info(api_key, **kwargs)  # noqa: E501
            return data

    def followings_ids_using_get_with_http_info(self, api_key, **kwargs):  # noqa: E501
        """Get Followings Ids  # noqa: E501

        See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-friends-ids  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.followings_ids_using_get_with_http_info(api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: (required)
        :param str cursor:
        :param str screen_name:
        :param str user_id:
        :return: ResultT
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_key', 'cursor', 'screen_name', 'user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method followings_ids_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'api_key' is set
        if self.api_client.client_side_validation and ('api_key' not in params or
                                                       params['api_key'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `api_key` when calling `followings_ids_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'api_key' in params:
            query_params.append(('apiKey', params['api_key']))  # noqa: E501
        if 'cursor' in params:
            query_params.append(('cursor', params['cursor']))  # noqa: E501
        if 'screen_name' in params:
            query_params.append(('screenName', params['screen_name']))  # noqa: E501
        if 'user_id' in params:
            query_params.append(('userId', params['user_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/base/apitools/followingsIds', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResultT',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def followings_ids_using_post(self, api_key, **kwargs):  # noqa: E501
        """Get Followings Ids  # noqa: E501

        See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-friends-ids  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.followings_ids_using_post(api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: (required)
        :param str cursor:
        :param str screen_name:
        :param str user_id:
        :return: ResultT
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.followings_ids_using_post_with_http_info(api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.followings_ids_using_post_with_http_info(api_key, **kwargs)  # noqa: E501
            return data

    def followings_ids_using_post_with_http_info(self, api_key, **kwargs):  # noqa: E501
        """Get Followings Ids  # noqa: E501

        See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-friends-ids  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.followings_ids_using_post_with_http_info(api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: (required)
        :param str cursor:
        :param str screen_name:
        :param str user_id:
        :return: ResultT
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_key', 'cursor', 'screen_name', 'user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method followings_ids_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'api_key' is set
        if self.api_client.client_side_validation and ('api_key' not in params or
                                                       params['api_key'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `api_key` when calling `followings_ids_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'api_key' in params:
            query_params.append(('apiKey', params['api_key']))  # noqa: E501
        if 'cursor' in params:
            query_params.append(('cursor', params['cursor']))  # noqa: E501
        if 'screen_name' in params:
            query_params.append(('screenName', params['screen_name']))  # noqa: E501
        if 'user_id' in params:
            query_params.append(('userId', params['user_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/base/apitools/followingsIds', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResultT',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def followings_list_using_get(self, api_key, **kwargs):  # noqa: E501
        """Get Followings User Collection  # noqa: E501

        See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-friends-list  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.followings_list_using_get(api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: (required)
        :param str cursor:
        :param str screen_name:
        :param str user_id:
        :return: ResultT
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.followings_list_using_get_with_http_info(api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.followings_list_using_get_with_http_info(api_key, **kwargs)  # noqa: E501
            return data

    def followings_list_using_get_with_http_info(self, api_key, **kwargs):  # noqa: E501
        """Get Followings User Collection  # noqa: E501

        See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-friends-list  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.followings_list_using_get_with_http_info(api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: (required)
        :param str cursor:
        :param str screen_name:
        :param str user_id:
        :return: ResultT
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_key', 'cursor', 'screen_name', 'user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method followings_list_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'api_key' is set
        if self.api_client.client_side_validation and ('api_key' not in params or
                                                       params['api_key'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `api_key` when calling `followings_list_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'api_key' in params:
            query_params.append(('apiKey', params['api_key']))  # noqa: E501
        if 'cursor' in params:
            query_params.append(('cursor', params['cursor']))  # noqa: E501
        if 'screen_name' in params:
            query_params.append(('screenName', params['screen_name']))  # noqa: E501
        if 'user_id' in params:
            query_params.append(('userId', params['user_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/base/apitools/followingsList', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResultT',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def followings_list_using_post(self, api_key, **kwargs):  # noqa: E501
        """Get Followings User Collection  # noqa: E501

        See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-friends-list  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.followings_list_using_post(api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: (required)
        :param str cursor:
        :param str screen_name:
        :param str user_id:
        :return: ResultT
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.followings_list_using_post_with_http_info(api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.followings_list_using_post_with_http_info(api_key, **kwargs)  # noqa: E501
            return data

    def followings_list_using_post_with_http_info(self, api_key, **kwargs):  # noqa: E501
        """Get Followings User Collection  # noqa: E501

        See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-friends-list  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.followings_list_using_post_with_http_info(api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: (required)
        :param str cursor:
        :param str screen_name:
        :param str user_id:
        :return: ResultT
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_key', 'cursor', 'screen_name', 'user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method followings_list_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'api_key' is set
        if self.api_client.client_side_validation and ('api_key' not in params or
                                                       params['api_key'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `api_key` when calling `followings_list_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'api_key' in params:
            query_params.append(('apiKey', params['api_key']))  # noqa: E501
        if 'cursor' in params:
            query_params.append(('cursor', params['cursor']))  # noqa: E501
        if 'screen_name' in params:
            query_params.append(('screenName', params['screen_name']))  # noqa: E501
        if 'user_id' in params:
            query_params.append(('userId', params['user_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/base/apitools/followingsList', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResultT',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def followings_list_v2_using_get(self, api_key, user_id, **kwargs):  # noqa: E501
        """get followingsList by V2   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.followings_list_v2_using_get(api_key, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: (required)
        :param str user_id: (required)
        :param str cursor:
        :return: ResultT
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.followings_list_v2_using_get_with_http_info(api_key, user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.followings_list_v2_using_get_with_http_info(api_key, user_id, **kwargs)  # noqa: E501
            return data

    def followings_list_v2_using_get_with_http_info(self, api_key, user_id, **kwargs):  # noqa: E501
        """get followingsList by V2   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.followings_list_v2_using_get_with_http_info(api_key, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: (required)
        :param str user_id: (required)
        :param str cursor:
        :return: ResultT
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_key', 'user_id', 'cursor']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method followings_list_v2_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'api_key' is set
        if self.api_client.client_side_validation and ('api_key' not in params or
                                                       params['api_key'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `api_key` when calling `followings_list_v2_using_get`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if self.api_client.client_side_validation and ('user_id' not in params or
                                                       params['user_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `user_id` when calling `followings_list_v2_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'api_key' in params:
            query_params.append(('apiKey', params['api_key']))  # noqa: E501
        if 'cursor' in params:
            query_params.append(('cursor', params['cursor']))  # noqa: E501
        if 'user_id' in params:
            query_params.append(('userId', params['user_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/base/apitools/followingsListV2', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResultT',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def followings_list_v2_using_post(self, api_key, user_id, **kwargs):  # noqa: E501
        """get followingsList by V2   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.followings_list_v2_using_post(api_key, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: (required)
        :param str user_id: (required)
        :param str cursor:
        :return: ResultT
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.followings_list_v2_using_post_with_http_info(api_key, user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.followings_list_v2_using_post_with_http_info(api_key, user_id, **kwargs)  # noqa: E501
            return data

    def followings_list_v2_using_post_with_http_info(self, api_key, user_id, **kwargs):  # noqa: E501
        """get followingsList by V2   # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.followings_list_v2_using_post_with_http_info(api_key, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: (required)
        :param str user_id: (required)
        :param str cursor:
        :return: ResultT
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_key', 'user_id', 'cursor']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method followings_list_v2_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'api_key' is set
        if self.api_client.client_side_validation and ('api_key' not in params or
                                                       params['api_key'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `api_key` when calling `followings_list_v2_using_post`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if self.api_client.client_side_validation and ('user_id' not in params or
                                                       params['user_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `user_id` when calling `followings_list_v2_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'api_key' in params:
            query_params.append(('apiKey', params['api_key']))  # noqa: E501
        if 'cursor' in params:
            query_params.append(('cursor', params['cursor']))  # noqa: E501
        if 'user_id' in params:
            query_params.append(('userId', params['user_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/base/apitools/followingsListV2', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResultT',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_friendships_show_using_get(self, api_key, **kwargs):  # noqa: E501
        """Get relationship information between two users  # noqa: E501

        See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-friendships-show  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_friendships_show_using_get(api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: (required)
        :param str source_id:
        :param str source_screen_name:
        :param str target_id:
        :param str target_screen_name:
        :return: ResultT
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_friendships_show_using_get_with_http_info(api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.get_friendships_show_using_get_with_http_info(api_key, **kwargs)  # noqa: E501
            return data

    def get_friendships_show_using_get_with_http_info(self, api_key, **kwargs):  # noqa: E501
        """Get relationship information between two users  # noqa: E501

        See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-friendships-show  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_friendships_show_using_get_with_http_info(api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: (required)
        :param str source_id:
        :param str source_screen_name:
        :param str target_id:
        :param str target_screen_name:
        :return: ResultT
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_key', 'source_id', 'source_screen_name', 'target_id', 'target_screen_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_friendships_show_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'api_key' is set
        if self.api_client.client_side_validation and ('api_key' not in params or
                                                       params['api_key'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `api_key` when calling `get_friendships_show_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'api_key' in params:
            query_params.append(('apiKey', params['api_key']))  # noqa: E501
        if 'source_id' in params:
            query_params.append(('source_id', params['source_id']))  # noqa: E501
        if 'source_screen_name' in params:
            query_params.append(('source_screen_name', params['source_screen_name']))  # noqa: E501
        if 'target_id' in params:
            query_params.append(('target_id', params['target_id']))  # noqa: E501
        if 'target_screen_name' in params:
            query_params.append(('target_screen_name', params['target_screen_name']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/base/apitools/friendshipsShow', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResultT',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_friendships_show_using_post(self, api_key, **kwargs):  # noqa: E501
        """Get relationship information between two users  # noqa: E501

        See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-friendships-show  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_friendships_show_using_post(api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: (required)
        :param str source_id:
        :param str source_screen_name:
        :param str target_id:
        :param str target_screen_name:
        :return: ResultT
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_friendships_show_using_post_with_http_info(api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.get_friendships_show_using_post_with_http_info(api_key, **kwargs)  # noqa: E501
            return data

    def get_friendships_show_using_post_with_http_info(self, api_key, **kwargs):  # noqa: E501
        """Get relationship information between two users  # noqa: E501

        See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-friendships-show  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_friendships_show_using_post_with_http_info(api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: (required)
        :param str source_id:
        :param str source_screen_name:
        :param str target_id:
        :param str target_screen_name:
        :return: ResultT
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_key', 'source_id', 'source_screen_name', 'target_id', 'target_screen_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_friendships_show_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'api_key' is set
        if self.api_client.client_side_validation and ('api_key' not in params or
                                                       params['api_key'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `api_key` when calling `get_friendships_show_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'api_key' in params:
            query_params.append(('apiKey', params['api_key']))  # noqa: E501
        if 'source_id' in params:
            query_params.append(('source_id', params['source_id']))  # noqa: E501
        if 'source_screen_name' in params:
            query_params.append(('source_screen_name', params['source_screen_name']))  # noqa: E501
        if 'target_id' in params:
            query_params.append(('target_id', params['target_id']))  # noqa: E501
        if 'target_screen_name' in params:
            query_params.append(('target_screen_name', params['target_screen_name']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/base/apitools/friendshipsShow', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResultT',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def unfollow_using_get(self, api_key, auth_token, ct0, **kwargs):  # noqa: E501
        """to unfollow   # noqa: E501

        See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/post-friendships-destroy  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.unfollow_using_get(api_key, auth_token, ct0, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: (required)
        :param str auth_token: (required)
        :param str ct0: (required)
        :param str screen_name:
        :param str user_id:
        :return: ResultT
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.unfollow_using_get_with_http_info(api_key, auth_token, ct0, **kwargs)  # noqa: E501
        else:
            (data) = self.unfollow_using_get_with_http_info(api_key, auth_token, ct0, **kwargs)  # noqa: E501
            return data

    def unfollow_using_get_with_http_info(self, api_key, auth_token, ct0, **kwargs):  # noqa: E501
        """to unfollow   # noqa: E501

        See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/post-friendships-destroy  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.unfollow_using_get_with_http_info(api_key, auth_token, ct0, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: (required)
        :param str auth_token: (required)
        :param str ct0: (required)
        :param str screen_name:
        :param str user_id:
        :return: ResultT
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_key', 'auth_token', 'ct0', 'screen_name', 'user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method unfollow_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'api_key' is set
        if self.api_client.client_side_validation and ('api_key' not in params or
                                                       params['api_key'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `api_key` when calling `unfollow_using_get`")  # noqa: E501
        # verify the required parameter 'auth_token' is set
        if self.api_client.client_side_validation and ('auth_token' not in params or
                                                       params['auth_token'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `auth_token` when calling `unfollow_using_get`")  # noqa: E501
        # verify the required parameter 'ct0' is set
        if self.api_client.client_side_validation and ('ct0' not in params or
                                                       params['ct0'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `ct0` when calling `unfollow_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'api_key' in params:
            query_params.append(('apiKey', params['api_key']))  # noqa: E501
        if 'auth_token' in params:
            query_params.append(('auth_token', params['auth_token']))  # noqa: E501
        if 'ct0' in params:
            query_params.append(('ct0', params['ct0']))  # noqa: E501
        if 'screen_name' in params:
            query_params.append(('screenName', params['screen_name']))  # noqa: E501
        if 'user_id' in params:
            query_params.append(('userId', params['user_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/base/apitools/unfollow', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResultT',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def unfollow_using_post(self, api_key, auth_token, ct0, **kwargs):  # noqa: E501
        """to unfollow   # noqa: E501

        See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/post-friendships-destroy  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.unfollow_using_post(api_key, auth_token, ct0, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: (required)
        :param str auth_token: (required)
        :param str ct0: (required)
        :param str screen_name:
        :param str user_id:
        :return: ResultT
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.unfollow_using_post_with_http_info(api_key, auth_token, ct0, **kwargs)  # noqa: E501
        else:
            (data) = self.unfollow_using_post_with_http_info(api_key, auth_token, ct0, **kwargs)  # noqa: E501
            return data

    def unfollow_using_post_with_http_info(self, api_key, auth_token, ct0, **kwargs):  # noqa: E501
        """to unfollow   # noqa: E501

        See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/post-friendships-destroy  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.unfollow_using_post_with_http_info(api_key, auth_token, ct0, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_key: (required)
        :param str auth_token: (required)
        :param str ct0: (required)
        :param str screen_name:
        :param str user_id:
        :return: ResultT
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_key', 'auth_token', 'ct0', 'screen_name', 'user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method unfollow_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'api_key' is set
        if self.api_client.client_side_validation and ('api_key' not in params or
                                                       params['api_key'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `api_key` when calling `unfollow_using_post`")  # noqa: E501
        # verify the required parameter 'auth_token' is set
        if self.api_client.client_side_validation and ('auth_token' not in params or
                                                       params['auth_token'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `auth_token` when calling `unfollow_using_post`")  # noqa: E501
        # verify the required parameter 'ct0' is set
        if self.api_client.client_side_validation and ('ct0' not in params or
                                                       params['ct0'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `ct0` when calling `unfollow_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'api_key' in params:
            query_params.append(('apiKey', params['api_key']))  # noqa: E501
        if 'auth_token' in params:
            query_params.append(('auth_token', params['auth_token']))  # noqa: E501
        if 'ct0' in params:
            query_params.append(('ct0', params['ct0']))  # noqa: E501
        if 'screen_name' in params:
            query_params.append(('screenName', params['screen_name']))  # noqa: E501
        if 'user_id' in params:
            query_params.append(('userId', params['user_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/base/apitools/unfollow', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResultT',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
