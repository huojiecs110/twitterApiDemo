/* 
 * Utools_twitter_tools_api
 *
 * X (Twitter) API for search, Tweets, users, followers, images, media and more. Supports some v1.1 and v2 API endpoints, with more to come in the future!
 *
 * OpenAPI spec version: 1.1
 * Contact: huojiecs@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITwitterFollowsApiToolsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// get blueVerifiedFollowers by V2 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="userId"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>ResultT</returns>
        ResultT BlueVerifiedFollowersV2UsingGET (string apiKey, string userId, string cursor = null);

        /// <summary>
        /// get blueVerifiedFollowers by V2 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="userId"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>ApiResponse of ResultT</returns>
        ApiResponse<ResultT> BlueVerifiedFollowersV2UsingGETWithHttpInfo (string apiKey, string userId, string cursor = null);
        /// <summary>
        /// get blueVerifiedFollowers by V2 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="userId"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>ResultT</returns>
        ResultT BlueVerifiedFollowersV2UsingPOST (string apiKey, string userId, string cursor = null);

        /// <summary>
        /// get blueVerifiedFollowers by V2 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="userId"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>ApiResponse of ResultT</returns>
        ApiResponse<ResultT> BlueVerifiedFollowersV2UsingPOSTWithHttpInfo (string apiKey, string userId, string cursor = null);
        /// <summary>
        /// to follow 
        /// </summary>
        /// <remarks>
        /// See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/post-friendships-create
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="screenName"> (optional)</param>
        /// <param name="userId"> (optional, default to 1574242047661207552)</param>
        /// <returns>ResultT</returns>
        ResultT FollowUsingGET (string apiKey, string authToken, string ct0, string screenName = null, string userId = null);

        /// <summary>
        /// to follow 
        /// </summary>
        /// <remarks>
        /// See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/post-friendships-create
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="screenName"> (optional)</param>
        /// <param name="userId"> (optional, default to 1574242047661207552)</param>
        /// <returns>ApiResponse of ResultT</returns>
        ApiResponse<ResultT> FollowUsingGETWithHttpInfo (string apiKey, string authToken, string ct0, string screenName = null, string userId = null);
        /// <summary>
        /// to follow 
        /// </summary>
        /// <remarks>
        /// See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/post-friendships-create
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="screenName"> (optional)</param>
        /// <param name="userId"> (optional, default to 1574242047661207552)</param>
        /// <returns>ResultT</returns>
        ResultT FollowUsingPOST (string apiKey, string authToken, string ct0, string screenName = null, string userId = null);

        /// <summary>
        /// to follow 
        /// </summary>
        /// <remarks>
        /// See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/post-friendships-create
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="screenName"> (optional)</param>
        /// <param name="userId"> (optional, default to 1574242047661207552)</param>
        /// <returns>ApiResponse of ResultT</returns>
        ApiResponse<ResultT> FollowUsingPOSTWithHttpInfo (string apiKey, string authToken, string ct0, string screenName = null, string userId = null);
        /// <summary>
        /// Get Followers Ids
        /// </summary>
        /// <remarks>
        /// See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-followers-ids
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <param name="screenName"> (optional, default to elonmusk)</param>
        /// <param name="userId"> (optional, default to 1574242047661207552)</param>
        /// <returns>ResultT</returns>
        ResultT FollowersIdsUsingGET (string apiKey, string cursor = null, string screenName = null, string userId = null);

        /// <summary>
        /// Get Followers Ids
        /// </summary>
        /// <remarks>
        /// See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-followers-ids
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <param name="screenName"> (optional, default to elonmusk)</param>
        /// <param name="userId"> (optional, default to 1574242047661207552)</param>
        /// <returns>ApiResponse of ResultT</returns>
        ApiResponse<ResultT> FollowersIdsUsingGETWithHttpInfo (string apiKey, string cursor = null, string screenName = null, string userId = null);
        /// <summary>
        /// Get Followers Ids
        /// </summary>
        /// <remarks>
        /// See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-followers-ids
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <param name="screenName"> (optional, default to elonmusk)</param>
        /// <param name="userId"> (optional, default to 1574242047661207552)</param>
        /// <returns>ResultT</returns>
        ResultT FollowersIdsUsingPOST (string apiKey, string cursor = null, string screenName = null, string userId = null);

        /// <summary>
        /// Get Followers Ids
        /// </summary>
        /// <remarks>
        /// See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-followers-ids
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <param name="screenName"> (optional, default to elonmusk)</param>
        /// <param name="userId"> (optional, default to 1574242047661207552)</param>
        /// <returns>ApiResponse of ResultT</returns>
        ApiResponse<ResultT> FollowersIdsUsingPOSTWithHttpInfo (string apiKey, string cursor = null, string screenName = null, string userId = null);
        /// <summary>
        /// Get Followers User Collection
        /// </summary>
        /// <remarks>
        /// See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-followers-list
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <param name="screenName"> (optional, default to elonmusk)</param>
        /// <param name="userId"> (optional, default to 1574242047661207552)</param>
        /// <returns>ResultT</returns>
        ResultT FollowersListUsingGET (string apiKey, string cursor = null, string screenName = null, string userId = null);

        /// <summary>
        /// Get Followers User Collection
        /// </summary>
        /// <remarks>
        /// See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-followers-list
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <param name="screenName"> (optional, default to elonmusk)</param>
        /// <param name="userId"> (optional, default to 1574242047661207552)</param>
        /// <returns>ApiResponse of ResultT</returns>
        ApiResponse<ResultT> FollowersListUsingGETWithHttpInfo (string apiKey, string cursor = null, string screenName = null, string userId = null);
        /// <summary>
        /// Get Followers User Collection
        /// </summary>
        /// <remarks>
        /// See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-followers-list
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <param name="screenName"> (optional, default to elonmusk)</param>
        /// <param name="userId"> (optional, default to 1574242047661207552)</param>
        /// <returns>ResultT</returns>
        ResultT FollowersListUsingPOST (string apiKey, string cursor = null, string screenName = null, string userId = null);

        /// <summary>
        /// Get Followers User Collection
        /// </summary>
        /// <remarks>
        /// See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-followers-list
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <param name="screenName"> (optional, default to elonmusk)</param>
        /// <param name="userId"> (optional, default to 1574242047661207552)</param>
        /// <returns>ApiResponse of ResultT</returns>
        ApiResponse<ResultT> FollowersListUsingPOSTWithHttpInfo (string apiKey, string cursor = null, string screenName = null, string userId = null);
        /// <summary>
        /// get followersList by V2 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="userId"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>ResultT</returns>
        ResultT FollowersListV2UsingGET (string apiKey, string userId, string cursor = null);

        /// <summary>
        /// get followersList by V2 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="userId"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>ApiResponse of ResultT</returns>
        ApiResponse<ResultT> FollowersListV2UsingGETWithHttpInfo (string apiKey, string userId, string cursor = null);
        /// <summary>
        /// get followersList by V2 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="userId"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>ResultT</returns>
        ResultT FollowersListV2UsingPOST (string apiKey, string userId, string cursor = null);

        /// <summary>
        /// get followersList by V2 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="userId"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>ApiResponse of ResultT</returns>
        ApiResponse<ResultT> FollowersListV2UsingPOSTWithHttpInfo (string apiKey, string userId, string cursor = null);
        /// <summary>
        /// Get Followings Ids
        /// </summary>
        /// <remarks>
        /// See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-friends-ids
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <param name="screenName"> (optional, default to elonmusk)</param>
        /// <param name="userId"> (optional, default to 1574242047661207552)</param>
        /// <returns>ResultT</returns>
        ResultT FollowingsIdsUsingGET (string apiKey, string cursor = null, string screenName = null, string userId = null);

        /// <summary>
        /// Get Followings Ids
        /// </summary>
        /// <remarks>
        /// See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-friends-ids
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <param name="screenName"> (optional, default to elonmusk)</param>
        /// <param name="userId"> (optional, default to 1574242047661207552)</param>
        /// <returns>ApiResponse of ResultT</returns>
        ApiResponse<ResultT> FollowingsIdsUsingGETWithHttpInfo (string apiKey, string cursor = null, string screenName = null, string userId = null);
        /// <summary>
        /// Get Followings Ids
        /// </summary>
        /// <remarks>
        /// See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-friends-ids
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <param name="screenName"> (optional, default to elonmusk)</param>
        /// <param name="userId"> (optional, default to 1574242047661207552)</param>
        /// <returns>ResultT</returns>
        ResultT FollowingsIdsUsingPOST (string apiKey, string cursor = null, string screenName = null, string userId = null);

        /// <summary>
        /// Get Followings Ids
        /// </summary>
        /// <remarks>
        /// See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-friends-ids
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <param name="screenName"> (optional, default to elonmusk)</param>
        /// <param name="userId"> (optional, default to 1574242047661207552)</param>
        /// <returns>ApiResponse of ResultT</returns>
        ApiResponse<ResultT> FollowingsIdsUsingPOSTWithHttpInfo (string apiKey, string cursor = null, string screenName = null, string userId = null);
        /// <summary>
        /// Get Followings User Collection
        /// </summary>
        /// <remarks>
        /// See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-friends-list
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <param name="screenName"> (optional, default to elonmusk)</param>
        /// <param name="userId"> (optional, default to 1574242047661207552)</param>
        /// <returns>ResultT</returns>
        ResultT FollowingsListUsingGET (string apiKey, string cursor = null, string screenName = null, string userId = null);

        /// <summary>
        /// Get Followings User Collection
        /// </summary>
        /// <remarks>
        /// See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-friends-list
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <param name="screenName"> (optional, default to elonmusk)</param>
        /// <param name="userId"> (optional, default to 1574242047661207552)</param>
        /// <returns>ApiResponse of ResultT</returns>
        ApiResponse<ResultT> FollowingsListUsingGETWithHttpInfo (string apiKey, string cursor = null, string screenName = null, string userId = null);
        /// <summary>
        /// Get Followings User Collection
        /// </summary>
        /// <remarks>
        /// See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-friends-list
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <param name="screenName"> (optional, default to elonmusk)</param>
        /// <param name="userId"> (optional, default to 1574242047661207552)</param>
        /// <returns>ResultT</returns>
        ResultT FollowingsListUsingPOST (string apiKey, string cursor = null, string screenName = null, string userId = null);

        /// <summary>
        /// Get Followings User Collection
        /// </summary>
        /// <remarks>
        /// See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-friends-list
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <param name="screenName"> (optional, default to elonmusk)</param>
        /// <param name="userId"> (optional, default to 1574242047661207552)</param>
        /// <returns>ApiResponse of ResultT</returns>
        ApiResponse<ResultT> FollowingsListUsingPOSTWithHttpInfo (string apiKey, string cursor = null, string screenName = null, string userId = null);
        /// <summary>
        /// get followingsList by V2 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="userId"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>ResultT</returns>
        ResultT FollowingsListV2UsingGET (string apiKey, string userId, string cursor = null);

        /// <summary>
        /// get followingsList by V2 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="userId"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>ApiResponse of ResultT</returns>
        ApiResponse<ResultT> FollowingsListV2UsingGETWithHttpInfo (string apiKey, string userId, string cursor = null);
        /// <summary>
        /// get followingsList by V2 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="userId"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>ResultT</returns>
        ResultT FollowingsListV2UsingPOST (string apiKey, string userId, string cursor = null);

        /// <summary>
        /// get followingsList by V2 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="userId"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>ApiResponse of ResultT</returns>
        ApiResponse<ResultT> FollowingsListV2UsingPOSTWithHttpInfo (string apiKey, string userId, string cursor = null);
        /// <summary>
        /// Get relationship information between two users
        /// </summary>
        /// <remarks>
        /// See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-friendships-show
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="sourceId"> (optional, default to 1574242047661207552)</param>
        /// <param name="sourceScreenName"> (optional)</param>
        /// <param name="targetId"> (optional, default to 1620357967962058752)</param>
        /// <param name="targetScreenName"> (optional)</param>
        /// <returns>ResultT</returns>
        ResultT GetFriendshipsShowUsingGET (string apiKey, string sourceId = null, string sourceScreenName = null, string targetId = null, string targetScreenName = null);

        /// <summary>
        /// Get relationship information between two users
        /// </summary>
        /// <remarks>
        /// See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-friendships-show
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="sourceId"> (optional, default to 1574242047661207552)</param>
        /// <param name="sourceScreenName"> (optional)</param>
        /// <param name="targetId"> (optional, default to 1620357967962058752)</param>
        /// <param name="targetScreenName"> (optional)</param>
        /// <returns>ApiResponse of ResultT</returns>
        ApiResponse<ResultT> GetFriendshipsShowUsingGETWithHttpInfo (string apiKey, string sourceId = null, string sourceScreenName = null, string targetId = null, string targetScreenName = null);
        /// <summary>
        /// Get relationship information between two users
        /// </summary>
        /// <remarks>
        /// See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-friendships-show
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="sourceId"> (optional, default to 1574242047661207552)</param>
        /// <param name="sourceScreenName"> (optional)</param>
        /// <param name="targetId"> (optional, default to 1620357967962058752)</param>
        /// <param name="targetScreenName"> (optional)</param>
        /// <returns>ResultT</returns>
        ResultT GetFriendshipsShowUsingPOST (string apiKey, string sourceId = null, string sourceScreenName = null, string targetId = null, string targetScreenName = null);

        /// <summary>
        /// Get relationship information between two users
        /// </summary>
        /// <remarks>
        /// See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-friendships-show
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="sourceId"> (optional, default to 1574242047661207552)</param>
        /// <param name="sourceScreenName"> (optional)</param>
        /// <param name="targetId"> (optional, default to 1620357967962058752)</param>
        /// <param name="targetScreenName"> (optional)</param>
        /// <returns>ApiResponse of ResultT</returns>
        ApiResponse<ResultT> GetFriendshipsShowUsingPOSTWithHttpInfo (string apiKey, string sourceId = null, string sourceScreenName = null, string targetId = null, string targetScreenName = null);
        /// <summary>
        /// to unfollow 
        /// </summary>
        /// <remarks>
        /// See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/post-friendships-destroy
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="screenName"> (optional)</param>
        /// <param name="userId"> (optional, default to 44196397)</param>
        /// <returns>ResultT</returns>
        ResultT UnfollowUsingGET (string apiKey, string authToken, string ct0, string screenName = null, string userId = null);

        /// <summary>
        /// to unfollow 
        /// </summary>
        /// <remarks>
        /// See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/post-friendships-destroy
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="screenName"> (optional)</param>
        /// <param name="userId"> (optional, default to 44196397)</param>
        /// <returns>ApiResponse of ResultT</returns>
        ApiResponse<ResultT> UnfollowUsingGETWithHttpInfo (string apiKey, string authToken, string ct0, string screenName = null, string userId = null);
        /// <summary>
        /// to unfollow 
        /// </summary>
        /// <remarks>
        /// See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/post-friendships-destroy
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="screenName"> (optional)</param>
        /// <param name="userId"> (optional, default to 44196397)</param>
        /// <returns>ResultT</returns>
        ResultT UnfollowUsingPOST (string apiKey, string authToken, string ct0, string screenName = null, string userId = null);

        /// <summary>
        /// to unfollow 
        /// </summary>
        /// <remarks>
        /// See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/post-friendships-destroy
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="screenName"> (optional)</param>
        /// <param name="userId"> (optional, default to 44196397)</param>
        /// <returns>ApiResponse of ResultT</returns>
        ApiResponse<ResultT> UnfollowUsingPOSTWithHttpInfo (string apiKey, string authToken, string ct0, string screenName = null, string userId = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// get blueVerifiedFollowers by V2 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="userId"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>Task of ResultT</returns>
        System.Threading.Tasks.Task<ResultT> BlueVerifiedFollowersV2UsingGETAsync (string apiKey, string userId, string cursor = null);

        /// <summary>
        /// get blueVerifiedFollowers by V2 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="userId"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>Task of ApiResponse (ResultT)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResultT>> BlueVerifiedFollowersV2UsingGETAsyncWithHttpInfo (string apiKey, string userId, string cursor = null);
        /// <summary>
        /// get blueVerifiedFollowers by V2 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="userId"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>Task of ResultT</returns>
        System.Threading.Tasks.Task<ResultT> BlueVerifiedFollowersV2UsingPOSTAsync (string apiKey, string userId, string cursor = null);

        /// <summary>
        /// get blueVerifiedFollowers by V2 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="userId"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>Task of ApiResponse (ResultT)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResultT>> BlueVerifiedFollowersV2UsingPOSTAsyncWithHttpInfo (string apiKey, string userId, string cursor = null);
        /// <summary>
        /// to follow 
        /// </summary>
        /// <remarks>
        /// See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/post-friendships-create
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="screenName"> (optional)</param>
        /// <param name="userId"> (optional, default to 1574242047661207552)</param>
        /// <returns>Task of ResultT</returns>
        System.Threading.Tasks.Task<ResultT> FollowUsingGETAsync (string apiKey, string authToken, string ct0, string screenName = null, string userId = null);

        /// <summary>
        /// to follow 
        /// </summary>
        /// <remarks>
        /// See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/post-friendships-create
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="screenName"> (optional)</param>
        /// <param name="userId"> (optional, default to 1574242047661207552)</param>
        /// <returns>Task of ApiResponse (ResultT)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResultT>> FollowUsingGETAsyncWithHttpInfo (string apiKey, string authToken, string ct0, string screenName = null, string userId = null);
        /// <summary>
        /// to follow 
        /// </summary>
        /// <remarks>
        /// See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/post-friendships-create
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="screenName"> (optional)</param>
        /// <param name="userId"> (optional, default to 1574242047661207552)</param>
        /// <returns>Task of ResultT</returns>
        System.Threading.Tasks.Task<ResultT> FollowUsingPOSTAsync (string apiKey, string authToken, string ct0, string screenName = null, string userId = null);

        /// <summary>
        /// to follow 
        /// </summary>
        /// <remarks>
        /// See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/post-friendships-create
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="screenName"> (optional)</param>
        /// <param name="userId"> (optional, default to 1574242047661207552)</param>
        /// <returns>Task of ApiResponse (ResultT)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResultT>> FollowUsingPOSTAsyncWithHttpInfo (string apiKey, string authToken, string ct0, string screenName = null, string userId = null);
        /// <summary>
        /// Get Followers Ids
        /// </summary>
        /// <remarks>
        /// See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-followers-ids
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <param name="screenName"> (optional, default to elonmusk)</param>
        /// <param name="userId"> (optional, default to 1574242047661207552)</param>
        /// <returns>Task of ResultT</returns>
        System.Threading.Tasks.Task<ResultT> FollowersIdsUsingGETAsync (string apiKey, string cursor = null, string screenName = null, string userId = null);

        /// <summary>
        /// Get Followers Ids
        /// </summary>
        /// <remarks>
        /// See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-followers-ids
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <param name="screenName"> (optional, default to elonmusk)</param>
        /// <param name="userId"> (optional, default to 1574242047661207552)</param>
        /// <returns>Task of ApiResponse (ResultT)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResultT>> FollowersIdsUsingGETAsyncWithHttpInfo (string apiKey, string cursor = null, string screenName = null, string userId = null);
        /// <summary>
        /// Get Followers Ids
        /// </summary>
        /// <remarks>
        /// See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-followers-ids
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <param name="screenName"> (optional, default to elonmusk)</param>
        /// <param name="userId"> (optional, default to 1574242047661207552)</param>
        /// <returns>Task of ResultT</returns>
        System.Threading.Tasks.Task<ResultT> FollowersIdsUsingPOSTAsync (string apiKey, string cursor = null, string screenName = null, string userId = null);

        /// <summary>
        /// Get Followers Ids
        /// </summary>
        /// <remarks>
        /// See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-followers-ids
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <param name="screenName"> (optional, default to elonmusk)</param>
        /// <param name="userId"> (optional, default to 1574242047661207552)</param>
        /// <returns>Task of ApiResponse (ResultT)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResultT>> FollowersIdsUsingPOSTAsyncWithHttpInfo (string apiKey, string cursor = null, string screenName = null, string userId = null);
        /// <summary>
        /// Get Followers User Collection
        /// </summary>
        /// <remarks>
        /// See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-followers-list
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <param name="screenName"> (optional, default to elonmusk)</param>
        /// <param name="userId"> (optional, default to 1574242047661207552)</param>
        /// <returns>Task of ResultT</returns>
        System.Threading.Tasks.Task<ResultT> FollowersListUsingGETAsync (string apiKey, string cursor = null, string screenName = null, string userId = null);

        /// <summary>
        /// Get Followers User Collection
        /// </summary>
        /// <remarks>
        /// See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-followers-list
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <param name="screenName"> (optional, default to elonmusk)</param>
        /// <param name="userId"> (optional, default to 1574242047661207552)</param>
        /// <returns>Task of ApiResponse (ResultT)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResultT>> FollowersListUsingGETAsyncWithHttpInfo (string apiKey, string cursor = null, string screenName = null, string userId = null);
        /// <summary>
        /// Get Followers User Collection
        /// </summary>
        /// <remarks>
        /// See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-followers-list
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <param name="screenName"> (optional, default to elonmusk)</param>
        /// <param name="userId"> (optional, default to 1574242047661207552)</param>
        /// <returns>Task of ResultT</returns>
        System.Threading.Tasks.Task<ResultT> FollowersListUsingPOSTAsync (string apiKey, string cursor = null, string screenName = null, string userId = null);

        /// <summary>
        /// Get Followers User Collection
        /// </summary>
        /// <remarks>
        /// See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-followers-list
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <param name="screenName"> (optional, default to elonmusk)</param>
        /// <param name="userId"> (optional, default to 1574242047661207552)</param>
        /// <returns>Task of ApiResponse (ResultT)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResultT>> FollowersListUsingPOSTAsyncWithHttpInfo (string apiKey, string cursor = null, string screenName = null, string userId = null);
        /// <summary>
        /// get followersList by V2 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="userId"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>Task of ResultT</returns>
        System.Threading.Tasks.Task<ResultT> FollowersListV2UsingGETAsync (string apiKey, string userId, string cursor = null);

        /// <summary>
        /// get followersList by V2 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="userId"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>Task of ApiResponse (ResultT)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResultT>> FollowersListV2UsingGETAsyncWithHttpInfo (string apiKey, string userId, string cursor = null);
        /// <summary>
        /// get followersList by V2 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="userId"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>Task of ResultT</returns>
        System.Threading.Tasks.Task<ResultT> FollowersListV2UsingPOSTAsync (string apiKey, string userId, string cursor = null);

        /// <summary>
        /// get followersList by V2 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="userId"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>Task of ApiResponse (ResultT)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResultT>> FollowersListV2UsingPOSTAsyncWithHttpInfo (string apiKey, string userId, string cursor = null);
        /// <summary>
        /// Get Followings Ids
        /// </summary>
        /// <remarks>
        /// See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-friends-ids
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <param name="screenName"> (optional, default to elonmusk)</param>
        /// <param name="userId"> (optional, default to 1574242047661207552)</param>
        /// <returns>Task of ResultT</returns>
        System.Threading.Tasks.Task<ResultT> FollowingsIdsUsingGETAsync (string apiKey, string cursor = null, string screenName = null, string userId = null);

        /// <summary>
        /// Get Followings Ids
        /// </summary>
        /// <remarks>
        /// See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-friends-ids
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <param name="screenName"> (optional, default to elonmusk)</param>
        /// <param name="userId"> (optional, default to 1574242047661207552)</param>
        /// <returns>Task of ApiResponse (ResultT)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResultT>> FollowingsIdsUsingGETAsyncWithHttpInfo (string apiKey, string cursor = null, string screenName = null, string userId = null);
        /// <summary>
        /// Get Followings Ids
        /// </summary>
        /// <remarks>
        /// See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-friends-ids
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <param name="screenName"> (optional, default to elonmusk)</param>
        /// <param name="userId"> (optional, default to 1574242047661207552)</param>
        /// <returns>Task of ResultT</returns>
        System.Threading.Tasks.Task<ResultT> FollowingsIdsUsingPOSTAsync (string apiKey, string cursor = null, string screenName = null, string userId = null);

        /// <summary>
        /// Get Followings Ids
        /// </summary>
        /// <remarks>
        /// See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-friends-ids
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <param name="screenName"> (optional, default to elonmusk)</param>
        /// <param name="userId"> (optional, default to 1574242047661207552)</param>
        /// <returns>Task of ApiResponse (ResultT)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResultT>> FollowingsIdsUsingPOSTAsyncWithHttpInfo (string apiKey, string cursor = null, string screenName = null, string userId = null);
        /// <summary>
        /// Get Followings User Collection
        /// </summary>
        /// <remarks>
        /// See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-friends-list
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <param name="screenName"> (optional, default to elonmusk)</param>
        /// <param name="userId"> (optional, default to 1574242047661207552)</param>
        /// <returns>Task of ResultT</returns>
        System.Threading.Tasks.Task<ResultT> FollowingsListUsingGETAsync (string apiKey, string cursor = null, string screenName = null, string userId = null);

        /// <summary>
        /// Get Followings User Collection
        /// </summary>
        /// <remarks>
        /// See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-friends-list
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <param name="screenName"> (optional, default to elonmusk)</param>
        /// <param name="userId"> (optional, default to 1574242047661207552)</param>
        /// <returns>Task of ApiResponse (ResultT)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResultT>> FollowingsListUsingGETAsyncWithHttpInfo (string apiKey, string cursor = null, string screenName = null, string userId = null);
        /// <summary>
        /// Get Followings User Collection
        /// </summary>
        /// <remarks>
        /// See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-friends-list
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <param name="screenName"> (optional, default to elonmusk)</param>
        /// <param name="userId"> (optional, default to 1574242047661207552)</param>
        /// <returns>Task of ResultT</returns>
        System.Threading.Tasks.Task<ResultT> FollowingsListUsingPOSTAsync (string apiKey, string cursor = null, string screenName = null, string userId = null);

        /// <summary>
        /// Get Followings User Collection
        /// </summary>
        /// <remarks>
        /// See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-friends-list
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <param name="screenName"> (optional, default to elonmusk)</param>
        /// <param name="userId"> (optional, default to 1574242047661207552)</param>
        /// <returns>Task of ApiResponse (ResultT)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResultT>> FollowingsListUsingPOSTAsyncWithHttpInfo (string apiKey, string cursor = null, string screenName = null, string userId = null);
        /// <summary>
        /// get followingsList by V2 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="userId"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>Task of ResultT</returns>
        System.Threading.Tasks.Task<ResultT> FollowingsListV2UsingGETAsync (string apiKey, string userId, string cursor = null);

        /// <summary>
        /// get followingsList by V2 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="userId"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>Task of ApiResponse (ResultT)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResultT>> FollowingsListV2UsingGETAsyncWithHttpInfo (string apiKey, string userId, string cursor = null);
        /// <summary>
        /// get followingsList by V2 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="userId"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>Task of ResultT</returns>
        System.Threading.Tasks.Task<ResultT> FollowingsListV2UsingPOSTAsync (string apiKey, string userId, string cursor = null);

        /// <summary>
        /// get followingsList by V2 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="userId"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>Task of ApiResponse (ResultT)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResultT>> FollowingsListV2UsingPOSTAsyncWithHttpInfo (string apiKey, string userId, string cursor = null);
        /// <summary>
        /// Get relationship information between two users
        /// </summary>
        /// <remarks>
        /// See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-friendships-show
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="sourceId"> (optional, default to 1574242047661207552)</param>
        /// <param name="sourceScreenName"> (optional)</param>
        /// <param name="targetId"> (optional, default to 1620357967962058752)</param>
        /// <param name="targetScreenName"> (optional)</param>
        /// <returns>Task of ResultT</returns>
        System.Threading.Tasks.Task<ResultT> GetFriendshipsShowUsingGETAsync (string apiKey, string sourceId = null, string sourceScreenName = null, string targetId = null, string targetScreenName = null);

        /// <summary>
        /// Get relationship information between two users
        /// </summary>
        /// <remarks>
        /// See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-friendships-show
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="sourceId"> (optional, default to 1574242047661207552)</param>
        /// <param name="sourceScreenName"> (optional)</param>
        /// <param name="targetId"> (optional, default to 1620357967962058752)</param>
        /// <param name="targetScreenName"> (optional)</param>
        /// <returns>Task of ApiResponse (ResultT)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResultT>> GetFriendshipsShowUsingGETAsyncWithHttpInfo (string apiKey, string sourceId = null, string sourceScreenName = null, string targetId = null, string targetScreenName = null);
        /// <summary>
        /// Get relationship information between two users
        /// </summary>
        /// <remarks>
        /// See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-friendships-show
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="sourceId"> (optional, default to 1574242047661207552)</param>
        /// <param name="sourceScreenName"> (optional)</param>
        /// <param name="targetId"> (optional, default to 1620357967962058752)</param>
        /// <param name="targetScreenName"> (optional)</param>
        /// <returns>Task of ResultT</returns>
        System.Threading.Tasks.Task<ResultT> GetFriendshipsShowUsingPOSTAsync (string apiKey, string sourceId = null, string sourceScreenName = null, string targetId = null, string targetScreenName = null);

        /// <summary>
        /// Get relationship information between two users
        /// </summary>
        /// <remarks>
        /// See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-friendships-show
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="sourceId"> (optional, default to 1574242047661207552)</param>
        /// <param name="sourceScreenName"> (optional)</param>
        /// <param name="targetId"> (optional, default to 1620357967962058752)</param>
        /// <param name="targetScreenName"> (optional)</param>
        /// <returns>Task of ApiResponse (ResultT)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResultT>> GetFriendshipsShowUsingPOSTAsyncWithHttpInfo (string apiKey, string sourceId = null, string sourceScreenName = null, string targetId = null, string targetScreenName = null);
        /// <summary>
        /// to unfollow 
        /// </summary>
        /// <remarks>
        /// See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/post-friendships-destroy
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="screenName"> (optional)</param>
        /// <param name="userId"> (optional, default to 44196397)</param>
        /// <returns>Task of ResultT</returns>
        System.Threading.Tasks.Task<ResultT> UnfollowUsingGETAsync (string apiKey, string authToken, string ct0, string screenName = null, string userId = null);

        /// <summary>
        /// to unfollow 
        /// </summary>
        /// <remarks>
        /// See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/post-friendships-destroy
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="screenName"> (optional)</param>
        /// <param name="userId"> (optional, default to 44196397)</param>
        /// <returns>Task of ApiResponse (ResultT)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResultT>> UnfollowUsingGETAsyncWithHttpInfo (string apiKey, string authToken, string ct0, string screenName = null, string userId = null);
        /// <summary>
        /// to unfollow 
        /// </summary>
        /// <remarks>
        /// See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/post-friendships-destroy
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="screenName"> (optional)</param>
        /// <param name="userId"> (optional, default to 44196397)</param>
        /// <returns>Task of ResultT</returns>
        System.Threading.Tasks.Task<ResultT> UnfollowUsingPOSTAsync (string apiKey, string authToken, string ct0, string screenName = null, string userId = null);

        /// <summary>
        /// to unfollow 
        /// </summary>
        /// <remarks>
        /// See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/post-friendships-destroy
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="screenName"> (optional)</param>
        /// <param name="userId"> (optional, default to 44196397)</param>
        /// <returns>Task of ApiResponse (ResultT)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResultT>> UnfollowUsingPOSTAsyncWithHttpInfo (string apiKey, string authToken, string ct0, string screenName = null, string userId = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TwitterFollowsApiToolsApi : ITwitterFollowsApiToolsApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TwitterFollowsApiToolsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TwitterFollowsApiToolsApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TwitterFollowsApiToolsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TwitterFollowsApiToolsApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// get blueVerifiedFollowers by V2  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="userId"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>ResultT</returns>
        public ResultT BlueVerifiedFollowersV2UsingGET (string apiKey, string userId, string cursor = null)
        {
             ApiResponse<ResultT> localVarResponse = BlueVerifiedFollowersV2UsingGETWithHttpInfo(apiKey, userId, cursor);
             return localVarResponse.Data;
        }

        /// <summary>
        /// get blueVerifiedFollowers by V2  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="userId"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>ApiResponse of ResultT</returns>
        public ApiResponse< ResultT > BlueVerifiedFollowersV2UsingGETWithHttpInfo (string apiKey, string userId, string cursor = null)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling TwitterFollowsApiToolsApi->BlueVerifiedFollowersV2UsingGET");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling TwitterFollowsApiToolsApi->BlueVerifiedFollowersV2UsingGET");

            var localVarPath = "/base/apitools/blueVerifiedFollowersV2";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", apiKey)); // query parameter
            if (cursor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cursor", cursor)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BlueVerifiedFollowersV2UsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultT>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultT) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultT)));
        }

        /// <summary>
        /// get blueVerifiedFollowers by V2  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="userId"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>Task of ResultT</returns>
        public async System.Threading.Tasks.Task<ResultT> BlueVerifiedFollowersV2UsingGETAsync (string apiKey, string userId, string cursor = null)
        {
             ApiResponse<ResultT> localVarResponse = await BlueVerifiedFollowersV2UsingGETAsyncWithHttpInfo(apiKey, userId, cursor);
             return localVarResponse.Data;

        }

        /// <summary>
        /// get blueVerifiedFollowers by V2  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="userId"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>Task of ApiResponse (ResultT)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResultT>> BlueVerifiedFollowersV2UsingGETAsyncWithHttpInfo (string apiKey, string userId, string cursor = null)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling TwitterFollowsApiToolsApi->BlueVerifiedFollowersV2UsingGET");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling TwitterFollowsApiToolsApi->BlueVerifiedFollowersV2UsingGET");

            var localVarPath = "/base/apitools/blueVerifiedFollowersV2";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", apiKey)); // query parameter
            if (cursor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cursor", cursor)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BlueVerifiedFollowersV2UsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultT>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultT) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultT)));
        }

        /// <summary>
        /// get blueVerifiedFollowers by V2  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="userId"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>ResultT</returns>
        public ResultT BlueVerifiedFollowersV2UsingPOST (string apiKey, string userId, string cursor = null)
        {
             ApiResponse<ResultT> localVarResponse = BlueVerifiedFollowersV2UsingPOSTWithHttpInfo(apiKey, userId, cursor);
             return localVarResponse.Data;
        }

        /// <summary>
        /// get blueVerifiedFollowers by V2  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="userId"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>ApiResponse of ResultT</returns>
        public ApiResponse< ResultT > BlueVerifiedFollowersV2UsingPOSTWithHttpInfo (string apiKey, string userId, string cursor = null)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling TwitterFollowsApiToolsApi->BlueVerifiedFollowersV2UsingPOST");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling TwitterFollowsApiToolsApi->BlueVerifiedFollowersV2UsingPOST");

            var localVarPath = "/base/apitools/blueVerifiedFollowersV2";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", apiKey)); // query parameter
            if (cursor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cursor", cursor)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BlueVerifiedFollowersV2UsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultT>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultT) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultT)));
        }

        /// <summary>
        /// get blueVerifiedFollowers by V2  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="userId"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>Task of ResultT</returns>
        public async System.Threading.Tasks.Task<ResultT> BlueVerifiedFollowersV2UsingPOSTAsync (string apiKey, string userId, string cursor = null)
        {
             ApiResponse<ResultT> localVarResponse = await BlueVerifiedFollowersV2UsingPOSTAsyncWithHttpInfo(apiKey, userId, cursor);
             return localVarResponse.Data;

        }

        /// <summary>
        /// get blueVerifiedFollowers by V2  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="userId"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>Task of ApiResponse (ResultT)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResultT>> BlueVerifiedFollowersV2UsingPOSTAsyncWithHttpInfo (string apiKey, string userId, string cursor = null)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling TwitterFollowsApiToolsApi->BlueVerifiedFollowersV2UsingPOST");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling TwitterFollowsApiToolsApi->BlueVerifiedFollowersV2UsingPOST");

            var localVarPath = "/base/apitools/blueVerifiedFollowersV2";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", apiKey)); // query parameter
            if (cursor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cursor", cursor)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BlueVerifiedFollowersV2UsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultT>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultT) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultT)));
        }

        /// <summary>
        /// to follow  See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/post-friendships-create
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="screenName"> (optional)</param>
        /// <param name="userId"> (optional, default to 1574242047661207552)</param>
        /// <returns>ResultT</returns>
        public ResultT FollowUsingGET (string apiKey, string authToken, string ct0, string screenName = null, string userId = null)
        {
             ApiResponse<ResultT> localVarResponse = FollowUsingGETWithHttpInfo(apiKey, authToken, ct0, screenName, userId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// to follow  See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/post-friendships-create
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="screenName"> (optional)</param>
        /// <param name="userId"> (optional, default to 1574242047661207552)</param>
        /// <returns>ApiResponse of ResultT</returns>
        public ApiResponse< ResultT > FollowUsingGETWithHttpInfo (string apiKey, string authToken, string ct0, string screenName = null, string userId = null)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling TwitterFollowsApiToolsApi->FollowUsingGET");
            // verify the required parameter 'authToken' is set
            if (authToken == null)
                throw new ApiException(400, "Missing required parameter 'authToken' when calling TwitterFollowsApiToolsApi->FollowUsingGET");
            // verify the required parameter 'ct0' is set
            if (ct0 == null)
                throw new ApiException(400, "Missing required parameter 'ct0' when calling TwitterFollowsApiToolsApi->FollowUsingGET");

            var localVarPath = "/base/apitools/follow";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", apiKey)); // query parameter
            if (authToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "auth_token", authToken)); // query parameter
            if (ct0 != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ct0", ct0)); // query parameter
            if (screenName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "screenName", screenName)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FollowUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultT>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultT) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultT)));
        }

        /// <summary>
        /// to follow  See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/post-friendships-create
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="screenName"> (optional)</param>
        /// <param name="userId"> (optional, default to 1574242047661207552)</param>
        /// <returns>Task of ResultT</returns>
        public async System.Threading.Tasks.Task<ResultT> FollowUsingGETAsync (string apiKey, string authToken, string ct0, string screenName = null, string userId = null)
        {
             ApiResponse<ResultT> localVarResponse = await FollowUsingGETAsyncWithHttpInfo(apiKey, authToken, ct0, screenName, userId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// to follow  See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/post-friendships-create
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="screenName"> (optional)</param>
        /// <param name="userId"> (optional, default to 1574242047661207552)</param>
        /// <returns>Task of ApiResponse (ResultT)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResultT>> FollowUsingGETAsyncWithHttpInfo (string apiKey, string authToken, string ct0, string screenName = null, string userId = null)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling TwitterFollowsApiToolsApi->FollowUsingGET");
            // verify the required parameter 'authToken' is set
            if (authToken == null)
                throw new ApiException(400, "Missing required parameter 'authToken' when calling TwitterFollowsApiToolsApi->FollowUsingGET");
            // verify the required parameter 'ct0' is set
            if (ct0 == null)
                throw new ApiException(400, "Missing required parameter 'ct0' when calling TwitterFollowsApiToolsApi->FollowUsingGET");

            var localVarPath = "/base/apitools/follow";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", apiKey)); // query parameter
            if (authToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "auth_token", authToken)); // query parameter
            if (ct0 != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ct0", ct0)); // query parameter
            if (screenName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "screenName", screenName)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FollowUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultT>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultT) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultT)));
        }

        /// <summary>
        /// to follow  See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/post-friendships-create
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="screenName"> (optional)</param>
        /// <param name="userId"> (optional, default to 1574242047661207552)</param>
        /// <returns>ResultT</returns>
        public ResultT FollowUsingPOST (string apiKey, string authToken, string ct0, string screenName = null, string userId = null)
        {
             ApiResponse<ResultT> localVarResponse = FollowUsingPOSTWithHttpInfo(apiKey, authToken, ct0, screenName, userId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// to follow  See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/post-friendships-create
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="screenName"> (optional)</param>
        /// <param name="userId"> (optional, default to 1574242047661207552)</param>
        /// <returns>ApiResponse of ResultT</returns>
        public ApiResponse< ResultT > FollowUsingPOSTWithHttpInfo (string apiKey, string authToken, string ct0, string screenName = null, string userId = null)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling TwitterFollowsApiToolsApi->FollowUsingPOST");
            // verify the required parameter 'authToken' is set
            if (authToken == null)
                throw new ApiException(400, "Missing required parameter 'authToken' when calling TwitterFollowsApiToolsApi->FollowUsingPOST");
            // verify the required parameter 'ct0' is set
            if (ct0 == null)
                throw new ApiException(400, "Missing required parameter 'ct0' when calling TwitterFollowsApiToolsApi->FollowUsingPOST");

            var localVarPath = "/base/apitools/follow";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", apiKey)); // query parameter
            if (authToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "auth_token", authToken)); // query parameter
            if (ct0 != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ct0", ct0)); // query parameter
            if (screenName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "screenName", screenName)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FollowUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultT>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultT) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultT)));
        }

        /// <summary>
        /// to follow  See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/post-friendships-create
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="screenName"> (optional)</param>
        /// <param name="userId"> (optional, default to 1574242047661207552)</param>
        /// <returns>Task of ResultT</returns>
        public async System.Threading.Tasks.Task<ResultT> FollowUsingPOSTAsync (string apiKey, string authToken, string ct0, string screenName = null, string userId = null)
        {
             ApiResponse<ResultT> localVarResponse = await FollowUsingPOSTAsyncWithHttpInfo(apiKey, authToken, ct0, screenName, userId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// to follow  See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/post-friendships-create
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="screenName"> (optional)</param>
        /// <param name="userId"> (optional, default to 1574242047661207552)</param>
        /// <returns>Task of ApiResponse (ResultT)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResultT>> FollowUsingPOSTAsyncWithHttpInfo (string apiKey, string authToken, string ct0, string screenName = null, string userId = null)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling TwitterFollowsApiToolsApi->FollowUsingPOST");
            // verify the required parameter 'authToken' is set
            if (authToken == null)
                throw new ApiException(400, "Missing required parameter 'authToken' when calling TwitterFollowsApiToolsApi->FollowUsingPOST");
            // verify the required parameter 'ct0' is set
            if (ct0 == null)
                throw new ApiException(400, "Missing required parameter 'ct0' when calling TwitterFollowsApiToolsApi->FollowUsingPOST");

            var localVarPath = "/base/apitools/follow";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", apiKey)); // query parameter
            if (authToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "auth_token", authToken)); // query parameter
            if (ct0 != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ct0", ct0)); // query parameter
            if (screenName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "screenName", screenName)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FollowUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultT>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultT) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultT)));
        }

        /// <summary>
        /// Get Followers Ids See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-followers-ids
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <param name="screenName"> (optional, default to elonmusk)</param>
        /// <param name="userId"> (optional, default to 1574242047661207552)</param>
        /// <returns>ResultT</returns>
        public ResultT FollowersIdsUsingGET (string apiKey, string cursor = null, string screenName = null, string userId = null)
        {
             ApiResponse<ResultT> localVarResponse = FollowersIdsUsingGETWithHttpInfo(apiKey, cursor, screenName, userId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Followers Ids See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-followers-ids
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <param name="screenName"> (optional, default to elonmusk)</param>
        /// <param name="userId"> (optional, default to 1574242047661207552)</param>
        /// <returns>ApiResponse of ResultT</returns>
        public ApiResponse< ResultT > FollowersIdsUsingGETWithHttpInfo (string apiKey, string cursor = null, string screenName = null, string userId = null)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling TwitterFollowsApiToolsApi->FollowersIdsUsingGET");

            var localVarPath = "/base/apitools/followersIds";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", apiKey)); // query parameter
            if (cursor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cursor", cursor)); // query parameter
            if (screenName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "screenName", screenName)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FollowersIdsUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultT>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultT) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultT)));
        }

        /// <summary>
        /// Get Followers Ids See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-followers-ids
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <param name="screenName"> (optional, default to elonmusk)</param>
        /// <param name="userId"> (optional, default to 1574242047661207552)</param>
        /// <returns>Task of ResultT</returns>
        public async System.Threading.Tasks.Task<ResultT> FollowersIdsUsingGETAsync (string apiKey, string cursor = null, string screenName = null, string userId = null)
        {
             ApiResponse<ResultT> localVarResponse = await FollowersIdsUsingGETAsyncWithHttpInfo(apiKey, cursor, screenName, userId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Followers Ids See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-followers-ids
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <param name="screenName"> (optional, default to elonmusk)</param>
        /// <param name="userId"> (optional, default to 1574242047661207552)</param>
        /// <returns>Task of ApiResponse (ResultT)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResultT>> FollowersIdsUsingGETAsyncWithHttpInfo (string apiKey, string cursor = null, string screenName = null, string userId = null)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling TwitterFollowsApiToolsApi->FollowersIdsUsingGET");

            var localVarPath = "/base/apitools/followersIds";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", apiKey)); // query parameter
            if (cursor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cursor", cursor)); // query parameter
            if (screenName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "screenName", screenName)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FollowersIdsUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultT>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultT) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultT)));
        }

        /// <summary>
        /// Get Followers Ids See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-followers-ids
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <param name="screenName"> (optional, default to elonmusk)</param>
        /// <param name="userId"> (optional, default to 1574242047661207552)</param>
        /// <returns>ResultT</returns>
        public ResultT FollowersIdsUsingPOST (string apiKey, string cursor = null, string screenName = null, string userId = null)
        {
             ApiResponse<ResultT> localVarResponse = FollowersIdsUsingPOSTWithHttpInfo(apiKey, cursor, screenName, userId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Followers Ids See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-followers-ids
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <param name="screenName"> (optional, default to elonmusk)</param>
        /// <param name="userId"> (optional, default to 1574242047661207552)</param>
        /// <returns>ApiResponse of ResultT</returns>
        public ApiResponse< ResultT > FollowersIdsUsingPOSTWithHttpInfo (string apiKey, string cursor = null, string screenName = null, string userId = null)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling TwitterFollowsApiToolsApi->FollowersIdsUsingPOST");

            var localVarPath = "/base/apitools/followersIds";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", apiKey)); // query parameter
            if (cursor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cursor", cursor)); // query parameter
            if (screenName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "screenName", screenName)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FollowersIdsUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultT>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultT) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultT)));
        }

        /// <summary>
        /// Get Followers Ids See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-followers-ids
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <param name="screenName"> (optional, default to elonmusk)</param>
        /// <param name="userId"> (optional, default to 1574242047661207552)</param>
        /// <returns>Task of ResultT</returns>
        public async System.Threading.Tasks.Task<ResultT> FollowersIdsUsingPOSTAsync (string apiKey, string cursor = null, string screenName = null, string userId = null)
        {
             ApiResponse<ResultT> localVarResponse = await FollowersIdsUsingPOSTAsyncWithHttpInfo(apiKey, cursor, screenName, userId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Followers Ids See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-followers-ids
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <param name="screenName"> (optional, default to elonmusk)</param>
        /// <param name="userId"> (optional, default to 1574242047661207552)</param>
        /// <returns>Task of ApiResponse (ResultT)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResultT>> FollowersIdsUsingPOSTAsyncWithHttpInfo (string apiKey, string cursor = null, string screenName = null, string userId = null)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling TwitterFollowsApiToolsApi->FollowersIdsUsingPOST");

            var localVarPath = "/base/apitools/followersIds";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", apiKey)); // query parameter
            if (cursor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cursor", cursor)); // query parameter
            if (screenName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "screenName", screenName)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FollowersIdsUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultT>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultT) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultT)));
        }

        /// <summary>
        /// Get Followers User Collection See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-followers-list
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <param name="screenName"> (optional, default to elonmusk)</param>
        /// <param name="userId"> (optional, default to 1574242047661207552)</param>
        /// <returns>ResultT</returns>
        public ResultT FollowersListUsingGET (string apiKey, string cursor = null, string screenName = null, string userId = null)
        {
             ApiResponse<ResultT> localVarResponse = FollowersListUsingGETWithHttpInfo(apiKey, cursor, screenName, userId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Followers User Collection See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-followers-list
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <param name="screenName"> (optional, default to elonmusk)</param>
        /// <param name="userId"> (optional, default to 1574242047661207552)</param>
        /// <returns>ApiResponse of ResultT</returns>
        public ApiResponse< ResultT > FollowersListUsingGETWithHttpInfo (string apiKey, string cursor = null, string screenName = null, string userId = null)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling TwitterFollowsApiToolsApi->FollowersListUsingGET");

            var localVarPath = "/base/apitools/followersList";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", apiKey)); // query parameter
            if (cursor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cursor", cursor)); // query parameter
            if (screenName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "screenName", screenName)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FollowersListUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultT>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultT) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultT)));
        }

        /// <summary>
        /// Get Followers User Collection See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-followers-list
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <param name="screenName"> (optional, default to elonmusk)</param>
        /// <param name="userId"> (optional, default to 1574242047661207552)</param>
        /// <returns>Task of ResultT</returns>
        public async System.Threading.Tasks.Task<ResultT> FollowersListUsingGETAsync (string apiKey, string cursor = null, string screenName = null, string userId = null)
        {
             ApiResponse<ResultT> localVarResponse = await FollowersListUsingGETAsyncWithHttpInfo(apiKey, cursor, screenName, userId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Followers User Collection See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-followers-list
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <param name="screenName"> (optional, default to elonmusk)</param>
        /// <param name="userId"> (optional, default to 1574242047661207552)</param>
        /// <returns>Task of ApiResponse (ResultT)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResultT>> FollowersListUsingGETAsyncWithHttpInfo (string apiKey, string cursor = null, string screenName = null, string userId = null)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling TwitterFollowsApiToolsApi->FollowersListUsingGET");

            var localVarPath = "/base/apitools/followersList";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", apiKey)); // query parameter
            if (cursor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cursor", cursor)); // query parameter
            if (screenName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "screenName", screenName)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FollowersListUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultT>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultT) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultT)));
        }

        /// <summary>
        /// Get Followers User Collection See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-followers-list
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <param name="screenName"> (optional, default to elonmusk)</param>
        /// <param name="userId"> (optional, default to 1574242047661207552)</param>
        /// <returns>ResultT</returns>
        public ResultT FollowersListUsingPOST (string apiKey, string cursor = null, string screenName = null, string userId = null)
        {
             ApiResponse<ResultT> localVarResponse = FollowersListUsingPOSTWithHttpInfo(apiKey, cursor, screenName, userId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Followers User Collection See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-followers-list
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <param name="screenName"> (optional, default to elonmusk)</param>
        /// <param name="userId"> (optional, default to 1574242047661207552)</param>
        /// <returns>ApiResponse of ResultT</returns>
        public ApiResponse< ResultT > FollowersListUsingPOSTWithHttpInfo (string apiKey, string cursor = null, string screenName = null, string userId = null)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling TwitterFollowsApiToolsApi->FollowersListUsingPOST");

            var localVarPath = "/base/apitools/followersList";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", apiKey)); // query parameter
            if (cursor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cursor", cursor)); // query parameter
            if (screenName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "screenName", screenName)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FollowersListUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultT>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultT) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultT)));
        }

        /// <summary>
        /// Get Followers User Collection See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-followers-list
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <param name="screenName"> (optional, default to elonmusk)</param>
        /// <param name="userId"> (optional, default to 1574242047661207552)</param>
        /// <returns>Task of ResultT</returns>
        public async System.Threading.Tasks.Task<ResultT> FollowersListUsingPOSTAsync (string apiKey, string cursor = null, string screenName = null, string userId = null)
        {
             ApiResponse<ResultT> localVarResponse = await FollowersListUsingPOSTAsyncWithHttpInfo(apiKey, cursor, screenName, userId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Followers User Collection See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-followers-list
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <param name="screenName"> (optional, default to elonmusk)</param>
        /// <param name="userId"> (optional, default to 1574242047661207552)</param>
        /// <returns>Task of ApiResponse (ResultT)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResultT>> FollowersListUsingPOSTAsyncWithHttpInfo (string apiKey, string cursor = null, string screenName = null, string userId = null)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling TwitterFollowsApiToolsApi->FollowersListUsingPOST");

            var localVarPath = "/base/apitools/followersList";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", apiKey)); // query parameter
            if (cursor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cursor", cursor)); // query parameter
            if (screenName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "screenName", screenName)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FollowersListUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultT>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultT) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultT)));
        }

        /// <summary>
        /// get followersList by V2  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="userId"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>ResultT</returns>
        public ResultT FollowersListV2UsingGET (string apiKey, string userId, string cursor = null)
        {
             ApiResponse<ResultT> localVarResponse = FollowersListV2UsingGETWithHttpInfo(apiKey, userId, cursor);
             return localVarResponse.Data;
        }

        /// <summary>
        /// get followersList by V2  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="userId"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>ApiResponse of ResultT</returns>
        public ApiResponse< ResultT > FollowersListV2UsingGETWithHttpInfo (string apiKey, string userId, string cursor = null)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling TwitterFollowsApiToolsApi->FollowersListV2UsingGET");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling TwitterFollowsApiToolsApi->FollowersListV2UsingGET");

            var localVarPath = "/base/apitools/followersListV2";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", apiKey)); // query parameter
            if (cursor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cursor", cursor)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FollowersListV2UsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultT>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultT) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultT)));
        }

        /// <summary>
        /// get followersList by V2  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="userId"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>Task of ResultT</returns>
        public async System.Threading.Tasks.Task<ResultT> FollowersListV2UsingGETAsync (string apiKey, string userId, string cursor = null)
        {
             ApiResponse<ResultT> localVarResponse = await FollowersListV2UsingGETAsyncWithHttpInfo(apiKey, userId, cursor);
             return localVarResponse.Data;

        }

        /// <summary>
        /// get followersList by V2  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="userId"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>Task of ApiResponse (ResultT)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResultT>> FollowersListV2UsingGETAsyncWithHttpInfo (string apiKey, string userId, string cursor = null)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling TwitterFollowsApiToolsApi->FollowersListV2UsingGET");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling TwitterFollowsApiToolsApi->FollowersListV2UsingGET");

            var localVarPath = "/base/apitools/followersListV2";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", apiKey)); // query parameter
            if (cursor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cursor", cursor)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FollowersListV2UsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultT>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultT) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultT)));
        }

        /// <summary>
        /// get followersList by V2  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="userId"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>ResultT</returns>
        public ResultT FollowersListV2UsingPOST (string apiKey, string userId, string cursor = null)
        {
             ApiResponse<ResultT> localVarResponse = FollowersListV2UsingPOSTWithHttpInfo(apiKey, userId, cursor);
             return localVarResponse.Data;
        }

        /// <summary>
        /// get followersList by V2  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="userId"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>ApiResponse of ResultT</returns>
        public ApiResponse< ResultT > FollowersListV2UsingPOSTWithHttpInfo (string apiKey, string userId, string cursor = null)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling TwitterFollowsApiToolsApi->FollowersListV2UsingPOST");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling TwitterFollowsApiToolsApi->FollowersListV2UsingPOST");

            var localVarPath = "/base/apitools/followersListV2";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", apiKey)); // query parameter
            if (cursor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cursor", cursor)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FollowersListV2UsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultT>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultT) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultT)));
        }

        /// <summary>
        /// get followersList by V2  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="userId"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>Task of ResultT</returns>
        public async System.Threading.Tasks.Task<ResultT> FollowersListV2UsingPOSTAsync (string apiKey, string userId, string cursor = null)
        {
             ApiResponse<ResultT> localVarResponse = await FollowersListV2UsingPOSTAsyncWithHttpInfo(apiKey, userId, cursor);
             return localVarResponse.Data;

        }

        /// <summary>
        /// get followersList by V2  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="userId"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>Task of ApiResponse (ResultT)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResultT>> FollowersListV2UsingPOSTAsyncWithHttpInfo (string apiKey, string userId, string cursor = null)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling TwitterFollowsApiToolsApi->FollowersListV2UsingPOST");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling TwitterFollowsApiToolsApi->FollowersListV2UsingPOST");

            var localVarPath = "/base/apitools/followersListV2";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", apiKey)); // query parameter
            if (cursor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cursor", cursor)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FollowersListV2UsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultT>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultT) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultT)));
        }

        /// <summary>
        /// Get Followings Ids See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-friends-ids
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <param name="screenName"> (optional, default to elonmusk)</param>
        /// <param name="userId"> (optional, default to 1574242047661207552)</param>
        /// <returns>ResultT</returns>
        public ResultT FollowingsIdsUsingGET (string apiKey, string cursor = null, string screenName = null, string userId = null)
        {
             ApiResponse<ResultT> localVarResponse = FollowingsIdsUsingGETWithHttpInfo(apiKey, cursor, screenName, userId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Followings Ids See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-friends-ids
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <param name="screenName"> (optional, default to elonmusk)</param>
        /// <param name="userId"> (optional, default to 1574242047661207552)</param>
        /// <returns>ApiResponse of ResultT</returns>
        public ApiResponse< ResultT > FollowingsIdsUsingGETWithHttpInfo (string apiKey, string cursor = null, string screenName = null, string userId = null)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling TwitterFollowsApiToolsApi->FollowingsIdsUsingGET");

            var localVarPath = "/base/apitools/followingsIds";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", apiKey)); // query parameter
            if (cursor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cursor", cursor)); // query parameter
            if (screenName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "screenName", screenName)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FollowingsIdsUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultT>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultT) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultT)));
        }

        /// <summary>
        /// Get Followings Ids See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-friends-ids
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <param name="screenName"> (optional, default to elonmusk)</param>
        /// <param name="userId"> (optional, default to 1574242047661207552)</param>
        /// <returns>Task of ResultT</returns>
        public async System.Threading.Tasks.Task<ResultT> FollowingsIdsUsingGETAsync (string apiKey, string cursor = null, string screenName = null, string userId = null)
        {
             ApiResponse<ResultT> localVarResponse = await FollowingsIdsUsingGETAsyncWithHttpInfo(apiKey, cursor, screenName, userId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Followings Ids See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-friends-ids
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <param name="screenName"> (optional, default to elonmusk)</param>
        /// <param name="userId"> (optional, default to 1574242047661207552)</param>
        /// <returns>Task of ApiResponse (ResultT)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResultT>> FollowingsIdsUsingGETAsyncWithHttpInfo (string apiKey, string cursor = null, string screenName = null, string userId = null)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling TwitterFollowsApiToolsApi->FollowingsIdsUsingGET");

            var localVarPath = "/base/apitools/followingsIds";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", apiKey)); // query parameter
            if (cursor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cursor", cursor)); // query parameter
            if (screenName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "screenName", screenName)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FollowingsIdsUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultT>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultT) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultT)));
        }

        /// <summary>
        /// Get Followings Ids See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-friends-ids
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <param name="screenName"> (optional, default to elonmusk)</param>
        /// <param name="userId"> (optional, default to 1574242047661207552)</param>
        /// <returns>ResultT</returns>
        public ResultT FollowingsIdsUsingPOST (string apiKey, string cursor = null, string screenName = null, string userId = null)
        {
             ApiResponse<ResultT> localVarResponse = FollowingsIdsUsingPOSTWithHttpInfo(apiKey, cursor, screenName, userId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Followings Ids See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-friends-ids
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <param name="screenName"> (optional, default to elonmusk)</param>
        /// <param name="userId"> (optional, default to 1574242047661207552)</param>
        /// <returns>ApiResponse of ResultT</returns>
        public ApiResponse< ResultT > FollowingsIdsUsingPOSTWithHttpInfo (string apiKey, string cursor = null, string screenName = null, string userId = null)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling TwitterFollowsApiToolsApi->FollowingsIdsUsingPOST");

            var localVarPath = "/base/apitools/followingsIds";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", apiKey)); // query parameter
            if (cursor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cursor", cursor)); // query parameter
            if (screenName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "screenName", screenName)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FollowingsIdsUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultT>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultT) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultT)));
        }

        /// <summary>
        /// Get Followings Ids See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-friends-ids
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <param name="screenName"> (optional, default to elonmusk)</param>
        /// <param name="userId"> (optional, default to 1574242047661207552)</param>
        /// <returns>Task of ResultT</returns>
        public async System.Threading.Tasks.Task<ResultT> FollowingsIdsUsingPOSTAsync (string apiKey, string cursor = null, string screenName = null, string userId = null)
        {
             ApiResponse<ResultT> localVarResponse = await FollowingsIdsUsingPOSTAsyncWithHttpInfo(apiKey, cursor, screenName, userId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Followings Ids See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-friends-ids
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <param name="screenName"> (optional, default to elonmusk)</param>
        /// <param name="userId"> (optional, default to 1574242047661207552)</param>
        /// <returns>Task of ApiResponse (ResultT)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResultT>> FollowingsIdsUsingPOSTAsyncWithHttpInfo (string apiKey, string cursor = null, string screenName = null, string userId = null)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling TwitterFollowsApiToolsApi->FollowingsIdsUsingPOST");

            var localVarPath = "/base/apitools/followingsIds";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", apiKey)); // query parameter
            if (cursor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cursor", cursor)); // query parameter
            if (screenName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "screenName", screenName)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FollowingsIdsUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultT>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultT) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultT)));
        }

        /// <summary>
        /// Get Followings User Collection See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-friends-list
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <param name="screenName"> (optional, default to elonmusk)</param>
        /// <param name="userId"> (optional, default to 1574242047661207552)</param>
        /// <returns>ResultT</returns>
        public ResultT FollowingsListUsingGET (string apiKey, string cursor = null, string screenName = null, string userId = null)
        {
             ApiResponse<ResultT> localVarResponse = FollowingsListUsingGETWithHttpInfo(apiKey, cursor, screenName, userId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Followings User Collection See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-friends-list
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <param name="screenName"> (optional, default to elonmusk)</param>
        /// <param name="userId"> (optional, default to 1574242047661207552)</param>
        /// <returns>ApiResponse of ResultT</returns>
        public ApiResponse< ResultT > FollowingsListUsingGETWithHttpInfo (string apiKey, string cursor = null, string screenName = null, string userId = null)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling TwitterFollowsApiToolsApi->FollowingsListUsingGET");

            var localVarPath = "/base/apitools/followingsList";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", apiKey)); // query parameter
            if (cursor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cursor", cursor)); // query parameter
            if (screenName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "screenName", screenName)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FollowingsListUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultT>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultT) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultT)));
        }

        /// <summary>
        /// Get Followings User Collection See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-friends-list
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <param name="screenName"> (optional, default to elonmusk)</param>
        /// <param name="userId"> (optional, default to 1574242047661207552)</param>
        /// <returns>Task of ResultT</returns>
        public async System.Threading.Tasks.Task<ResultT> FollowingsListUsingGETAsync (string apiKey, string cursor = null, string screenName = null, string userId = null)
        {
             ApiResponse<ResultT> localVarResponse = await FollowingsListUsingGETAsyncWithHttpInfo(apiKey, cursor, screenName, userId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Followings User Collection See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-friends-list
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <param name="screenName"> (optional, default to elonmusk)</param>
        /// <param name="userId"> (optional, default to 1574242047661207552)</param>
        /// <returns>Task of ApiResponse (ResultT)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResultT>> FollowingsListUsingGETAsyncWithHttpInfo (string apiKey, string cursor = null, string screenName = null, string userId = null)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling TwitterFollowsApiToolsApi->FollowingsListUsingGET");

            var localVarPath = "/base/apitools/followingsList";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", apiKey)); // query parameter
            if (cursor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cursor", cursor)); // query parameter
            if (screenName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "screenName", screenName)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FollowingsListUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultT>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultT) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultT)));
        }

        /// <summary>
        /// Get Followings User Collection See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-friends-list
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <param name="screenName"> (optional, default to elonmusk)</param>
        /// <param name="userId"> (optional, default to 1574242047661207552)</param>
        /// <returns>ResultT</returns>
        public ResultT FollowingsListUsingPOST (string apiKey, string cursor = null, string screenName = null, string userId = null)
        {
             ApiResponse<ResultT> localVarResponse = FollowingsListUsingPOSTWithHttpInfo(apiKey, cursor, screenName, userId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Followings User Collection See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-friends-list
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <param name="screenName"> (optional, default to elonmusk)</param>
        /// <param name="userId"> (optional, default to 1574242047661207552)</param>
        /// <returns>ApiResponse of ResultT</returns>
        public ApiResponse< ResultT > FollowingsListUsingPOSTWithHttpInfo (string apiKey, string cursor = null, string screenName = null, string userId = null)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling TwitterFollowsApiToolsApi->FollowingsListUsingPOST");

            var localVarPath = "/base/apitools/followingsList";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", apiKey)); // query parameter
            if (cursor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cursor", cursor)); // query parameter
            if (screenName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "screenName", screenName)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FollowingsListUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultT>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultT) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultT)));
        }

        /// <summary>
        /// Get Followings User Collection See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-friends-list
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <param name="screenName"> (optional, default to elonmusk)</param>
        /// <param name="userId"> (optional, default to 1574242047661207552)</param>
        /// <returns>Task of ResultT</returns>
        public async System.Threading.Tasks.Task<ResultT> FollowingsListUsingPOSTAsync (string apiKey, string cursor = null, string screenName = null, string userId = null)
        {
             ApiResponse<ResultT> localVarResponse = await FollowingsListUsingPOSTAsyncWithHttpInfo(apiKey, cursor, screenName, userId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Followings User Collection See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-friends-list
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <param name="screenName"> (optional, default to elonmusk)</param>
        /// <param name="userId"> (optional, default to 1574242047661207552)</param>
        /// <returns>Task of ApiResponse (ResultT)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResultT>> FollowingsListUsingPOSTAsyncWithHttpInfo (string apiKey, string cursor = null, string screenName = null, string userId = null)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling TwitterFollowsApiToolsApi->FollowingsListUsingPOST");

            var localVarPath = "/base/apitools/followingsList";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", apiKey)); // query parameter
            if (cursor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cursor", cursor)); // query parameter
            if (screenName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "screenName", screenName)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FollowingsListUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultT>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultT) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultT)));
        }

        /// <summary>
        /// get followingsList by V2  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="userId"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>ResultT</returns>
        public ResultT FollowingsListV2UsingGET (string apiKey, string userId, string cursor = null)
        {
             ApiResponse<ResultT> localVarResponse = FollowingsListV2UsingGETWithHttpInfo(apiKey, userId, cursor);
             return localVarResponse.Data;
        }

        /// <summary>
        /// get followingsList by V2  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="userId"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>ApiResponse of ResultT</returns>
        public ApiResponse< ResultT > FollowingsListV2UsingGETWithHttpInfo (string apiKey, string userId, string cursor = null)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling TwitterFollowsApiToolsApi->FollowingsListV2UsingGET");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling TwitterFollowsApiToolsApi->FollowingsListV2UsingGET");

            var localVarPath = "/base/apitools/followingsListV2";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", apiKey)); // query parameter
            if (cursor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cursor", cursor)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FollowingsListV2UsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultT>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultT) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultT)));
        }

        /// <summary>
        /// get followingsList by V2  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="userId"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>Task of ResultT</returns>
        public async System.Threading.Tasks.Task<ResultT> FollowingsListV2UsingGETAsync (string apiKey, string userId, string cursor = null)
        {
             ApiResponse<ResultT> localVarResponse = await FollowingsListV2UsingGETAsyncWithHttpInfo(apiKey, userId, cursor);
             return localVarResponse.Data;

        }

        /// <summary>
        /// get followingsList by V2  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="userId"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>Task of ApiResponse (ResultT)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResultT>> FollowingsListV2UsingGETAsyncWithHttpInfo (string apiKey, string userId, string cursor = null)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling TwitterFollowsApiToolsApi->FollowingsListV2UsingGET");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling TwitterFollowsApiToolsApi->FollowingsListV2UsingGET");

            var localVarPath = "/base/apitools/followingsListV2";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", apiKey)); // query parameter
            if (cursor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cursor", cursor)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FollowingsListV2UsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultT>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultT) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultT)));
        }

        /// <summary>
        /// get followingsList by V2  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="userId"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>ResultT</returns>
        public ResultT FollowingsListV2UsingPOST (string apiKey, string userId, string cursor = null)
        {
             ApiResponse<ResultT> localVarResponse = FollowingsListV2UsingPOSTWithHttpInfo(apiKey, userId, cursor);
             return localVarResponse.Data;
        }

        /// <summary>
        /// get followingsList by V2  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="userId"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>ApiResponse of ResultT</returns>
        public ApiResponse< ResultT > FollowingsListV2UsingPOSTWithHttpInfo (string apiKey, string userId, string cursor = null)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling TwitterFollowsApiToolsApi->FollowingsListV2UsingPOST");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling TwitterFollowsApiToolsApi->FollowingsListV2UsingPOST");

            var localVarPath = "/base/apitools/followingsListV2";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", apiKey)); // query parameter
            if (cursor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cursor", cursor)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FollowingsListV2UsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultT>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultT) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultT)));
        }

        /// <summary>
        /// get followingsList by V2  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="userId"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>Task of ResultT</returns>
        public async System.Threading.Tasks.Task<ResultT> FollowingsListV2UsingPOSTAsync (string apiKey, string userId, string cursor = null)
        {
             ApiResponse<ResultT> localVarResponse = await FollowingsListV2UsingPOSTAsyncWithHttpInfo(apiKey, userId, cursor);
             return localVarResponse.Data;

        }

        /// <summary>
        /// get followingsList by V2  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="userId"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>Task of ApiResponse (ResultT)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResultT>> FollowingsListV2UsingPOSTAsyncWithHttpInfo (string apiKey, string userId, string cursor = null)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling TwitterFollowsApiToolsApi->FollowingsListV2UsingPOST");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling TwitterFollowsApiToolsApi->FollowingsListV2UsingPOST");

            var localVarPath = "/base/apitools/followingsListV2";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", apiKey)); // query parameter
            if (cursor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cursor", cursor)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FollowingsListV2UsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultT>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultT) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultT)));
        }

        /// <summary>
        /// Get relationship information between two users See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-friendships-show
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="sourceId"> (optional, default to 1574242047661207552)</param>
        /// <param name="sourceScreenName"> (optional)</param>
        /// <param name="targetId"> (optional, default to 1620357967962058752)</param>
        /// <param name="targetScreenName"> (optional)</param>
        /// <returns>ResultT</returns>
        public ResultT GetFriendshipsShowUsingGET (string apiKey, string sourceId = null, string sourceScreenName = null, string targetId = null, string targetScreenName = null)
        {
             ApiResponse<ResultT> localVarResponse = GetFriendshipsShowUsingGETWithHttpInfo(apiKey, sourceId, sourceScreenName, targetId, targetScreenName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get relationship information between two users See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-friendships-show
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="sourceId"> (optional, default to 1574242047661207552)</param>
        /// <param name="sourceScreenName"> (optional)</param>
        /// <param name="targetId"> (optional, default to 1620357967962058752)</param>
        /// <param name="targetScreenName"> (optional)</param>
        /// <returns>ApiResponse of ResultT</returns>
        public ApiResponse< ResultT > GetFriendshipsShowUsingGETWithHttpInfo (string apiKey, string sourceId = null, string sourceScreenName = null, string targetId = null, string targetScreenName = null)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling TwitterFollowsApiToolsApi->GetFriendshipsShowUsingGET");

            var localVarPath = "/base/apitools/friendshipsShow";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", apiKey)); // query parameter
            if (sourceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "source_id", sourceId)); // query parameter
            if (sourceScreenName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "source_screen_name", sourceScreenName)); // query parameter
            if (targetId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "target_id", targetId)); // query parameter
            if (targetScreenName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "target_screen_name", targetScreenName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFriendshipsShowUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultT>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultT) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultT)));
        }

        /// <summary>
        /// Get relationship information between two users See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-friendships-show
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="sourceId"> (optional, default to 1574242047661207552)</param>
        /// <param name="sourceScreenName"> (optional)</param>
        /// <param name="targetId"> (optional, default to 1620357967962058752)</param>
        /// <param name="targetScreenName"> (optional)</param>
        /// <returns>Task of ResultT</returns>
        public async System.Threading.Tasks.Task<ResultT> GetFriendshipsShowUsingGETAsync (string apiKey, string sourceId = null, string sourceScreenName = null, string targetId = null, string targetScreenName = null)
        {
             ApiResponse<ResultT> localVarResponse = await GetFriendshipsShowUsingGETAsyncWithHttpInfo(apiKey, sourceId, sourceScreenName, targetId, targetScreenName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get relationship information between two users See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-friendships-show
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="sourceId"> (optional, default to 1574242047661207552)</param>
        /// <param name="sourceScreenName"> (optional)</param>
        /// <param name="targetId"> (optional, default to 1620357967962058752)</param>
        /// <param name="targetScreenName"> (optional)</param>
        /// <returns>Task of ApiResponse (ResultT)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResultT>> GetFriendshipsShowUsingGETAsyncWithHttpInfo (string apiKey, string sourceId = null, string sourceScreenName = null, string targetId = null, string targetScreenName = null)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling TwitterFollowsApiToolsApi->GetFriendshipsShowUsingGET");

            var localVarPath = "/base/apitools/friendshipsShow";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", apiKey)); // query parameter
            if (sourceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "source_id", sourceId)); // query parameter
            if (sourceScreenName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "source_screen_name", sourceScreenName)); // query parameter
            if (targetId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "target_id", targetId)); // query parameter
            if (targetScreenName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "target_screen_name", targetScreenName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFriendshipsShowUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultT>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultT) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultT)));
        }

        /// <summary>
        /// Get relationship information between two users See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-friendships-show
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="sourceId"> (optional, default to 1574242047661207552)</param>
        /// <param name="sourceScreenName"> (optional)</param>
        /// <param name="targetId"> (optional, default to 1620357967962058752)</param>
        /// <param name="targetScreenName"> (optional)</param>
        /// <returns>ResultT</returns>
        public ResultT GetFriendshipsShowUsingPOST (string apiKey, string sourceId = null, string sourceScreenName = null, string targetId = null, string targetScreenName = null)
        {
             ApiResponse<ResultT> localVarResponse = GetFriendshipsShowUsingPOSTWithHttpInfo(apiKey, sourceId, sourceScreenName, targetId, targetScreenName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get relationship information between two users See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-friendships-show
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="sourceId"> (optional, default to 1574242047661207552)</param>
        /// <param name="sourceScreenName"> (optional)</param>
        /// <param name="targetId"> (optional, default to 1620357967962058752)</param>
        /// <param name="targetScreenName"> (optional)</param>
        /// <returns>ApiResponse of ResultT</returns>
        public ApiResponse< ResultT > GetFriendshipsShowUsingPOSTWithHttpInfo (string apiKey, string sourceId = null, string sourceScreenName = null, string targetId = null, string targetScreenName = null)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling TwitterFollowsApiToolsApi->GetFriendshipsShowUsingPOST");

            var localVarPath = "/base/apitools/friendshipsShow";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", apiKey)); // query parameter
            if (sourceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "source_id", sourceId)); // query parameter
            if (sourceScreenName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "source_screen_name", sourceScreenName)); // query parameter
            if (targetId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "target_id", targetId)); // query parameter
            if (targetScreenName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "target_screen_name", targetScreenName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFriendshipsShowUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultT>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultT) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultT)));
        }

        /// <summary>
        /// Get relationship information between two users See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-friendships-show
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="sourceId"> (optional, default to 1574242047661207552)</param>
        /// <param name="sourceScreenName"> (optional)</param>
        /// <param name="targetId"> (optional, default to 1620357967962058752)</param>
        /// <param name="targetScreenName"> (optional)</param>
        /// <returns>Task of ResultT</returns>
        public async System.Threading.Tasks.Task<ResultT> GetFriendshipsShowUsingPOSTAsync (string apiKey, string sourceId = null, string sourceScreenName = null, string targetId = null, string targetScreenName = null)
        {
             ApiResponse<ResultT> localVarResponse = await GetFriendshipsShowUsingPOSTAsyncWithHttpInfo(apiKey, sourceId, sourceScreenName, targetId, targetScreenName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get relationship information between two users See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-friendships-show
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="sourceId"> (optional, default to 1574242047661207552)</param>
        /// <param name="sourceScreenName"> (optional)</param>
        /// <param name="targetId"> (optional, default to 1620357967962058752)</param>
        /// <param name="targetScreenName"> (optional)</param>
        /// <returns>Task of ApiResponse (ResultT)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResultT>> GetFriendshipsShowUsingPOSTAsyncWithHttpInfo (string apiKey, string sourceId = null, string sourceScreenName = null, string targetId = null, string targetScreenName = null)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling TwitterFollowsApiToolsApi->GetFriendshipsShowUsingPOST");

            var localVarPath = "/base/apitools/friendshipsShow";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", apiKey)); // query parameter
            if (sourceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "source_id", sourceId)); // query parameter
            if (sourceScreenName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "source_screen_name", sourceScreenName)); // query parameter
            if (targetId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "target_id", targetId)); // query parameter
            if (targetScreenName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "target_screen_name", targetScreenName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFriendshipsShowUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultT>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultT) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultT)));
        }

        /// <summary>
        /// to unfollow  See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/post-friendships-destroy
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="screenName"> (optional)</param>
        /// <param name="userId"> (optional, default to 44196397)</param>
        /// <returns>ResultT</returns>
        public ResultT UnfollowUsingGET (string apiKey, string authToken, string ct0, string screenName = null, string userId = null)
        {
             ApiResponse<ResultT> localVarResponse = UnfollowUsingGETWithHttpInfo(apiKey, authToken, ct0, screenName, userId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// to unfollow  See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/post-friendships-destroy
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="screenName"> (optional)</param>
        /// <param name="userId"> (optional, default to 44196397)</param>
        /// <returns>ApiResponse of ResultT</returns>
        public ApiResponse< ResultT > UnfollowUsingGETWithHttpInfo (string apiKey, string authToken, string ct0, string screenName = null, string userId = null)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling TwitterFollowsApiToolsApi->UnfollowUsingGET");
            // verify the required parameter 'authToken' is set
            if (authToken == null)
                throw new ApiException(400, "Missing required parameter 'authToken' when calling TwitterFollowsApiToolsApi->UnfollowUsingGET");
            // verify the required parameter 'ct0' is set
            if (ct0 == null)
                throw new ApiException(400, "Missing required parameter 'ct0' when calling TwitterFollowsApiToolsApi->UnfollowUsingGET");

            var localVarPath = "/base/apitools/unfollow";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", apiKey)); // query parameter
            if (authToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "auth_token", authToken)); // query parameter
            if (ct0 != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ct0", ct0)); // query parameter
            if (screenName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "screenName", screenName)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UnfollowUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultT>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultT) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultT)));
        }

        /// <summary>
        /// to unfollow  See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/post-friendships-destroy
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="screenName"> (optional)</param>
        /// <param name="userId"> (optional, default to 44196397)</param>
        /// <returns>Task of ResultT</returns>
        public async System.Threading.Tasks.Task<ResultT> UnfollowUsingGETAsync (string apiKey, string authToken, string ct0, string screenName = null, string userId = null)
        {
             ApiResponse<ResultT> localVarResponse = await UnfollowUsingGETAsyncWithHttpInfo(apiKey, authToken, ct0, screenName, userId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// to unfollow  See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/post-friendships-destroy
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="screenName"> (optional)</param>
        /// <param name="userId"> (optional, default to 44196397)</param>
        /// <returns>Task of ApiResponse (ResultT)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResultT>> UnfollowUsingGETAsyncWithHttpInfo (string apiKey, string authToken, string ct0, string screenName = null, string userId = null)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling TwitterFollowsApiToolsApi->UnfollowUsingGET");
            // verify the required parameter 'authToken' is set
            if (authToken == null)
                throw new ApiException(400, "Missing required parameter 'authToken' when calling TwitterFollowsApiToolsApi->UnfollowUsingGET");
            // verify the required parameter 'ct0' is set
            if (ct0 == null)
                throw new ApiException(400, "Missing required parameter 'ct0' when calling TwitterFollowsApiToolsApi->UnfollowUsingGET");

            var localVarPath = "/base/apitools/unfollow";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", apiKey)); // query parameter
            if (authToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "auth_token", authToken)); // query parameter
            if (ct0 != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ct0", ct0)); // query parameter
            if (screenName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "screenName", screenName)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UnfollowUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultT>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultT) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultT)));
        }

        /// <summary>
        /// to unfollow  See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/post-friendships-destroy
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="screenName"> (optional)</param>
        /// <param name="userId"> (optional, default to 44196397)</param>
        /// <returns>ResultT</returns>
        public ResultT UnfollowUsingPOST (string apiKey, string authToken, string ct0, string screenName = null, string userId = null)
        {
             ApiResponse<ResultT> localVarResponse = UnfollowUsingPOSTWithHttpInfo(apiKey, authToken, ct0, screenName, userId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// to unfollow  See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/post-friendships-destroy
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="screenName"> (optional)</param>
        /// <param name="userId"> (optional, default to 44196397)</param>
        /// <returns>ApiResponse of ResultT</returns>
        public ApiResponse< ResultT > UnfollowUsingPOSTWithHttpInfo (string apiKey, string authToken, string ct0, string screenName = null, string userId = null)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling TwitterFollowsApiToolsApi->UnfollowUsingPOST");
            // verify the required parameter 'authToken' is set
            if (authToken == null)
                throw new ApiException(400, "Missing required parameter 'authToken' when calling TwitterFollowsApiToolsApi->UnfollowUsingPOST");
            // verify the required parameter 'ct0' is set
            if (ct0 == null)
                throw new ApiException(400, "Missing required parameter 'ct0' when calling TwitterFollowsApiToolsApi->UnfollowUsingPOST");

            var localVarPath = "/base/apitools/unfollow";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", apiKey)); // query parameter
            if (authToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "auth_token", authToken)); // query parameter
            if (ct0 != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ct0", ct0)); // query parameter
            if (screenName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "screenName", screenName)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UnfollowUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultT>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultT) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultT)));
        }

        /// <summary>
        /// to unfollow  See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/post-friendships-destroy
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="screenName"> (optional)</param>
        /// <param name="userId"> (optional, default to 44196397)</param>
        /// <returns>Task of ResultT</returns>
        public async System.Threading.Tasks.Task<ResultT> UnfollowUsingPOSTAsync (string apiKey, string authToken, string ct0, string screenName = null, string userId = null)
        {
             ApiResponse<ResultT> localVarResponse = await UnfollowUsingPOSTAsyncWithHttpInfo(apiKey, authToken, ct0, screenName, userId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// to unfollow  See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/post-friendships-destroy
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="screenName"> (optional)</param>
        /// <param name="userId"> (optional, default to 44196397)</param>
        /// <returns>Task of ApiResponse (ResultT)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResultT>> UnfollowUsingPOSTAsyncWithHttpInfo (string apiKey, string authToken, string ct0, string screenName = null, string userId = null)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling TwitterFollowsApiToolsApi->UnfollowUsingPOST");
            // verify the required parameter 'authToken' is set
            if (authToken == null)
                throw new ApiException(400, "Missing required parameter 'authToken' when calling TwitterFollowsApiToolsApi->UnfollowUsingPOST");
            // verify the required parameter 'ct0' is set
            if (ct0 == null)
                throw new ApiException(400, "Missing required parameter 'ct0' when calling TwitterFollowsApiToolsApi->UnfollowUsingPOST");

            var localVarPath = "/base/apitools/unfollow";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", apiKey)); // query parameter
            if (authToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "auth_token", authToken)); // query parameter
            if (ct0 != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ct0", ct0)); // query parameter
            if (screenName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "screenName", screenName)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UnfollowUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultT>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultT) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultT)));
        }

    }
}
