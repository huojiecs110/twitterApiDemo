/* 
 * Utools_twitter_tools_api
 *
 * X (Twitter) API for search, Tweets, users, followers, images, media and more. Supports some v1.1 and v2 API endpoints, with more to come in the future!
 *
 * OpenAPI spec version: 1.1
 * Contact: huojiecs@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITwitterGetTweesApiToolsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Favoriters by V2
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="tweetId"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>ResultT</returns>
        ResultT FavoritersV2UsingGET (string apiKey, string tweetId, string cursor = null);

        /// <summary>
        /// Favoriters by V2
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="tweetId"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>ApiResponse of ResultT</returns>
        ApiResponse<ResultT> FavoritersV2UsingGETWithHttpInfo (string apiKey, string tweetId, string cursor = null);
        /// <summary>
        /// Favoriters by V2
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="tweetId"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>ResultT</returns>
        ResultT FavoritersV2UsingPOST (string apiKey, string tweetId, string cursor = null);

        /// <summary>
        /// Favoriters by V2
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="tweetId"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>ApiResponse of ResultT</returns>
        ApiResponse<ResultT> FavoritersV2UsingPOSTWithHttpInfo (string apiKey, string tweetId, string cursor = null);
        /// <summary>
        /// favorites are now known as likes.
        /// </summary>
        /// <remarks>
        /// See details https://developer.twitter.com/en/docs/twitter-api/v1/tweets/post-and-engage/api-reference/get-favorites-list
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="userId"></param>
        /// <param name="maxId">Returns results with an ID less than (that is, older than) or equal to the specified ID. (optional)</param>
        /// <param name="screenName"> (optional, default to elonmusk)</param>
        /// <param name="sinceId">Returns results with an ID greater than (that is, more recent than) the specified ID. There are limits to the number of Tweets which can be accessed through the API. If the limit of Tweets has occured since the since_id, the since_id will be forced to the oldest ID available. (optional)</param>
        /// <returns>ResultT</returns>
        ResultT FavoritesListUsingGET (string apiKey, string userId, string maxId = null, string screenName = null, string sinceId = null);

        /// <summary>
        /// favorites are now known as likes.
        /// </summary>
        /// <remarks>
        /// See details https://developer.twitter.com/en/docs/twitter-api/v1/tweets/post-and-engage/api-reference/get-favorites-list
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="userId"></param>
        /// <param name="maxId">Returns results with an ID less than (that is, older than) or equal to the specified ID. (optional)</param>
        /// <param name="screenName"> (optional, default to elonmusk)</param>
        /// <param name="sinceId">Returns results with an ID greater than (that is, more recent than) the specified ID. There are limits to the number of Tweets which can be accessed through the API. If the limit of Tweets has occured since the since_id, the since_id will be forced to the oldest ID available. (optional)</param>
        /// <returns>ApiResponse of ResultT</returns>
        ApiResponse<ResultT> FavoritesListUsingGETWithHttpInfo (string apiKey, string userId, string maxId = null, string screenName = null, string sinceId = null);
        /// <summary>
        /// favorites are now known as likes.
        /// </summary>
        /// <remarks>
        /// See details https://developer.twitter.com/en/docs/twitter-api/v1/tweets/post-and-engage/api-reference/get-favorites-list
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="userId"></param>
        /// <param name="maxId">Returns results with an ID less than (that is, older than) or equal to the specified ID. (optional)</param>
        /// <param name="screenName"> (optional, default to elonmusk)</param>
        /// <param name="sinceId">Returns results with an ID greater than (that is, more recent than) the specified ID. There are limits to the number of Tweets which can be accessed through the API. If the limit of Tweets has occured since the since_id, the since_id will be forced to the oldest ID available. (optional)</param>
        /// <returns>ResultT</returns>
        ResultT FavoritesListUsingPOST (string apiKey, string userId, string maxId = null, string screenName = null, string sinceId = null);

        /// <summary>
        /// favorites are now known as likes.
        /// </summary>
        /// <remarks>
        /// See details https://developer.twitter.com/en/docs/twitter-api/v1/tweets/post-and-engage/api-reference/get-favorites-list
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="userId"></param>
        /// <param name="maxId">Returns results with an ID less than (that is, older than) or equal to the specified ID. (optional)</param>
        /// <param name="screenName"> (optional, default to elonmusk)</param>
        /// <param name="sinceId">Returns results with an ID greater than (that is, more recent than) the specified ID. There are limits to the number of Tweets which can be accessed through the API. If the limit of Tweets has occured since the since_id, the since_id will be forced to the oldest ID available. (optional)</param>
        /// <returns>ApiResponse of ResultT</returns>
        ApiResponse<ResultT> FavoritesListUsingPOSTWithHttpInfo (string apiKey, string userId, string maxId = null, string screenName = null, string sinceId = null);
        /// <summary>
        /// get mentionsTimeline Detail
        /// </summary>
        /// <remarks>
        /// See details  https://developer.twitter.com/en/docs/twitter-api/v1/tweets/timelines/api-reference/get-statuses-mentions_timeline
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="includeEntities"> (optional, default to false)</param>
        /// <param name="maxId">Returns results with an ID less than (that is, older than) or equal to the specified ID. (optional)</param>
        /// <param name="sinceId">Returns results with an ID greater than (that is, more recent than) the specified ID. There are limits to the number of Tweets which can be accessed through the API. If the limit of Tweets has occured since the since_id, the since_id will be forced to the oldest ID available. (optional)</param>
        /// <param name="trimUser"> (optional, default to true)</param>
        /// <returns>ResultT</returns>
        ResultT MentionsTimelineUsingGET (string apiKey, string authToken, string ct0, string includeEntities = null, string maxId = null, string sinceId = null, string trimUser = null);

        /// <summary>
        /// get mentionsTimeline Detail
        /// </summary>
        /// <remarks>
        /// See details  https://developer.twitter.com/en/docs/twitter-api/v1/tweets/timelines/api-reference/get-statuses-mentions_timeline
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="includeEntities"> (optional, default to false)</param>
        /// <param name="maxId">Returns results with an ID less than (that is, older than) or equal to the specified ID. (optional)</param>
        /// <param name="sinceId">Returns results with an ID greater than (that is, more recent than) the specified ID. There are limits to the number of Tweets which can be accessed through the API. If the limit of Tweets has occured since the since_id, the since_id will be forced to the oldest ID available. (optional)</param>
        /// <param name="trimUser"> (optional, default to true)</param>
        /// <returns>ApiResponse of ResultT</returns>
        ApiResponse<ResultT> MentionsTimelineUsingGETWithHttpInfo (string apiKey, string authToken, string ct0, string includeEntities = null, string maxId = null, string sinceId = null, string trimUser = null);
        /// <summary>
        /// get mentionsTimeline Detail
        /// </summary>
        /// <remarks>
        /// See details  https://developer.twitter.com/en/docs/twitter-api/v1/tweets/timelines/api-reference/get-statuses-mentions_timeline
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="includeEntities"> (optional, default to false)</param>
        /// <param name="maxId">Returns results with an ID less than (that is, older than) or equal to the specified ID. (optional)</param>
        /// <param name="sinceId">Returns results with an ID greater than (that is, more recent than) the specified ID. There are limits to the number of Tweets which can be accessed through the API. If the limit of Tweets has occured since the since_id, the since_id will be forced to the oldest ID available. (optional)</param>
        /// <param name="trimUser"> (optional, default to true)</param>
        /// <returns>ResultT</returns>
        ResultT MentionsTimelineUsingPOST (string apiKey, string authToken, string ct0, string includeEntities = null, string maxId = null, string sinceId = null, string trimUser = null);

        /// <summary>
        /// get mentionsTimeline Detail
        /// </summary>
        /// <remarks>
        /// See details  https://developer.twitter.com/en/docs/twitter-api/v1/tweets/timelines/api-reference/get-statuses-mentions_timeline
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="includeEntities"> (optional, default to false)</param>
        /// <param name="maxId">Returns results with an ID less than (that is, older than) or equal to the specified ID. (optional)</param>
        /// <param name="sinceId">Returns results with an ID greater than (that is, more recent than) the specified ID. There are limits to the number of Tweets which can be accessed through the API. If the limit of Tweets has occured since the since_id, the since_id will be forced to the oldest ID available. (optional)</param>
        /// <param name="trimUser"> (optional, default to true)</param>
        /// <returns>ApiResponse of ResultT</returns>
        ApiResponse<ResultT> MentionsTimelineUsingPOSTWithHttpInfo (string apiKey, string authToken, string ct0, string includeEntities = null, string maxId = null, string sinceId = null, string trimUser = null);
        /// <summary>
        /// Quotes by V2
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="tweetId"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>ResultT</returns>
        ResultT QuotesV2UsingGET (string apiKey, string tweetId, string cursor = null);

        /// <summary>
        /// Quotes by V2
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="tweetId"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>ApiResponse of ResultT</returns>
        ApiResponse<ResultT> QuotesV2UsingGETWithHttpInfo (string apiKey, string tweetId, string cursor = null);
        /// <summary>
        /// Quotes by V2
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="tweetId"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>ResultT</returns>
        ResultT QuotesV2UsingPOST (string apiKey, string tweetId, string cursor = null);

        /// <summary>
        /// Quotes by V2
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="tweetId"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>ApiResponse of ResultT</returns>
        ApiResponse<ResultT> QuotesV2UsingPOSTWithHttpInfo (string apiKey, string tweetId, string cursor = null);
        /// <summary>
        /// get retwweeters ids by tweetId
        /// </summary>
        /// <remarks>
        /// Returns a collection of up to 100 user IDs belonging to users who have retweeted the Tweet specified by the id parameter. See details https://developer.twitter.com/en/docs/twitter-api/v1/tweets/post-and-engage/api-reference/get-statuses-retweeters-ids
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="id"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>ResultT</returns>
        ResultT RetweetersIdsUsingGET (string apiKey, string id, string cursor = null);

        /// <summary>
        /// get retwweeters ids by tweetId
        /// </summary>
        /// <remarks>
        /// Returns a collection of up to 100 user IDs belonging to users who have retweeted the Tweet specified by the id parameter. See details https://developer.twitter.com/en/docs/twitter-api/v1/tweets/post-and-engage/api-reference/get-statuses-retweeters-ids
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="id"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>ApiResponse of ResultT</returns>
        ApiResponse<ResultT> RetweetersIdsUsingGETWithHttpInfo (string apiKey, string id, string cursor = null);
        /// <summary>
        /// get retwweeters ids by tweetId
        /// </summary>
        /// <remarks>
        /// Returns a collection of up to 100 user IDs belonging to users who have retweeted the Tweet specified by the id parameter. See details https://developer.twitter.com/en/docs/twitter-api/v1/tweets/post-and-engage/api-reference/get-statuses-retweeters-ids
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="id"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>ResultT</returns>
        ResultT RetweetersIdsUsingPOST (string apiKey, string id, string cursor = null);

        /// <summary>
        /// get retwweeters ids by tweetId
        /// </summary>
        /// <remarks>
        /// Returns a collection of up to 100 user IDs belonging to users who have retweeted the Tweet specified by the id parameter. See details https://developer.twitter.com/en/docs/twitter-api/v1/tweets/post-and-engage/api-reference/get-statuses-retweeters-ids
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="id"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>ApiResponse of ResultT</returns>
        ApiResponse<ResultT> RetweetersIdsUsingPOSTWithHttpInfo (string apiKey, string id, string cursor = null);
        /// <summary>
        /// Retweeters by V2
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="tweetId"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>ResultT</returns>
        ResultT RetweetersV2UsingGET (string apiKey, string tweetId, string cursor = null);

        /// <summary>
        /// Retweeters by V2
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="tweetId"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>ApiResponse of ResultT</returns>
        ApiResponse<ResultT> RetweetersV2UsingGETWithHttpInfo (string apiKey, string tweetId, string cursor = null);
        /// <summary>
        /// Retweeters by V2
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="tweetId"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>ResultT</returns>
        ResultT RetweetersV2UsingPOST (string apiKey, string tweetId, string cursor = null);

        /// <summary>
        /// Retweeters by V2
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="tweetId"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>ApiResponse of ResultT</returns>
        ApiResponse<ResultT> RetweetersV2UsingPOSTWithHttpInfo (string apiKey, string tweetId, string cursor = null);
        /// <summary>
        /// tweet Brief information
        /// </summary>
        /// <remarks>
        /// get tweet Brief information
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="id"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>ResultT</returns>
        ResultT TweetSimpleUsingGET (string apiKey, string id, string cursor = null);

        /// <summary>
        /// tweet Brief information
        /// </summary>
        /// <remarks>
        /// get tweet Brief information
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="id"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>ApiResponse of ResultT</returns>
        ApiResponse<ResultT> TweetSimpleUsingGETWithHttpInfo (string apiKey, string id, string cursor = null);
        /// <summary>
        /// tweet Brief information
        /// </summary>
        /// <remarks>
        /// get tweet Brief information
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="id"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>ResultT</returns>
        ResultT TweetSimpleUsingPOST (string apiKey, string id, string cursor = null);

        /// <summary>
        /// tweet Brief information
        /// </summary>
        /// <remarks>
        /// get tweet Brief information
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="id"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>ApiResponse of ResultT</returns>
        ApiResponse<ResultT> TweetSimpleUsingPOSTWithHttpInfo (string apiKey, string id, string cursor = null);
        /// <summary>
        /// get TweetTimeline Detail
        /// </summary>
        /// <remarks>
        /// get tweetDetail and reply
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="id"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>ResultT</returns>
        ResultT TweetTimelineUsingGET (string apiKey, string id, string cursor = null);

        /// <summary>
        /// get TweetTimeline Detail
        /// </summary>
        /// <remarks>
        /// get tweetDetail and reply
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="id"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>ApiResponse of ResultT</returns>
        ApiResponse<ResultT> TweetTimelineUsingGETWithHttpInfo (string apiKey, string id, string cursor = null);
        /// <summary>
        /// get TweetTimeline Detail
        /// </summary>
        /// <remarks>
        /// get tweetDetail and reply
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="id"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>ResultT</returns>
        ResultT TweetTimelineUsingPOST (string apiKey, string id, string cursor = null);

        /// <summary>
        /// get TweetTimeline Detail
        /// </summary>
        /// <remarks>
        /// get tweetDetail and reply
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="id"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>ApiResponse of ResultT</returns>
        ApiResponse<ResultT> TweetTimelineUsingPOSTWithHttpInfo (string apiKey, string id, string cursor = null);
        /// <summary>
        /// get userTweetReply 
        /// </summary>
        /// <remarks>
        /// get user Tweet Reply
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="userId"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>ResultT</returns>
        ResultT UserTweetReplyUsingGET (string apiKey, string userId, string cursor = null);

        /// <summary>
        /// get userTweetReply 
        /// </summary>
        /// <remarks>
        /// get user Tweet Reply
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="userId"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>ApiResponse of ResultT</returns>
        ApiResponse<ResultT> UserTweetReplyUsingGETWithHttpInfo (string apiKey, string userId, string cursor = null);
        /// <summary>
        /// get userTweetReply 
        /// </summary>
        /// <remarks>
        /// get user Tweet Reply
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="userId"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>ResultT</returns>
        ResultT UserTweetReplyUsingPOST (string apiKey, string userId, string cursor = null);

        /// <summary>
        /// get userTweetReply 
        /// </summary>
        /// <remarks>
        /// get user Tweet Reply
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="userId"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>ApiResponse of ResultT</returns>
        ApiResponse<ResultT> UserTweetReplyUsingPOSTWithHttpInfo (string apiKey, string userId, string cursor = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Favoriters by V2
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="tweetId"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>Task of ResultT</returns>
        System.Threading.Tasks.Task<ResultT> FavoritersV2UsingGETAsync (string apiKey, string tweetId, string cursor = null);

        /// <summary>
        /// Favoriters by V2
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="tweetId"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>Task of ApiResponse (ResultT)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResultT>> FavoritersV2UsingGETAsyncWithHttpInfo (string apiKey, string tweetId, string cursor = null);
        /// <summary>
        /// Favoriters by V2
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="tweetId"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>Task of ResultT</returns>
        System.Threading.Tasks.Task<ResultT> FavoritersV2UsingPOSTAsync (string apiKey, string tweetId, string cursor = null);

        /// <summary>
        /// Favoriters by V2
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="tweetId"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>Task of ApiResponse (ResultT)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResultT>> FavoritersV2UsingPOSTAsyncWithHttpInfo (string apiKey, string tweetId, string cursor = null);
        /// <summary>
        /// favorites are now known as likes.
        /// </summary>
        /// <remarks>
        /// See details https://developer.twitter.com/en/docs/twitter-api/v1/tweets/post-and-engage/api-reference/get-favorites-list
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="userId"></param>
        /// <param name="maxId">Returns results with an ID less than (that is, older than) or equal to the specified ID. (optional)</param>
        /// <param name="screenName"> (optional, default to elonmusk)</param>
        /// <param name="sinceId">Returns results with an ID greater than (that is, more recent than) the specified ID. There are limits to the number of Tweets which can be accessed through the API. If the limit of Tweets has occured since the since_id, the since_id will be forced to the oldest ID available. (optional)</param>
        /// <returns>Task of ResultT</returns>
        System.Threading.Tasks.Task<ResultT> FavoritesListUsingGETAsync (string apiKey, string userId, string maxId = null, string screenName = null, string sinceId = null);

        /// <summary>
        /// favorites are now known as likes.
        /// </summary>
        /// <remarks>
        /// See details https://developer.twitter.com/en/docs/twitter-api/v1/tweets/post-and-engage/api-reference/get-favorites-list
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="userId"></param>
        /// <param name="maxId">Returns results with an ID less than (that is, older than) or equal to the specified ID. (optional)</param>
        /// <param name="screenName"> (optional, default to elonmusk)</param>
        /// <param name="sinceId">Returns results with an ID greater than (that is, more recent than) the specified ID. There are limits to the number of Tweets which can be accessed through the API. If the limit of Tweets has occured since the since_id, the since_id will be forced to the oldest ID available. (optional)</param>
        /// <returns>Task of ApiResponse (ResultT)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResultT>> FavoritesListUsingGETAsyncWithHttpInfo (string apiKey, string userId, string maxId = null, string screenName = null, string sinceId = null);
        /// <summary>
        /// favorites are now known as likes.
        /// </summary>
        /// <remarks>
        /// See details https://developer.twitter.com/en/docs/twitter-api/v1/tweets/post-and-engage/api-reference/get-favorites-list
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="userId"></param>
        /// <param name="maxId">Returns results with an ID less than (that is, older than) or equal to the specified ID. (optional)</param>
        /// <param name="screenName"> (optional, default to elonmusk)</param>
        /// <param name="sinceId">Returns results with an ID greater than (that is, more recent than) the specified ID. There are limits to the number of Tweets which can be accessed through the API. If the limit of Tweets has occured since the since_id, the since_id will be forced to the oldest ID available. (optional)</param>
        /// <returns>Task of ResultT</returns>
        System.Threading.Tasks.Task<ResultT> FavoritesListUsingPOSTAsync (string apiKey, string userId, string maxId = null, string screenName = null, string sinceId = null);

        /// <summary>
        /// favorites are now known as likes.
        /// </summary>
        /// <remarks>
        /// See details https://developer.twitter.com/en/docs/twitter-api/v1/tweets/post-and-engage/api-reference/get-favorites-list
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="userId"></param>
        /// <param name="maxId">Returns results with an ID less than (that is, older than) or equal to the specified ID. (optional)</param>
        /// <param name="screenName"> (optional, default to elonmusk)</param>
        /// <param name="sinceId">Returns results with an ID greater than (that is, more recent than) the specified ID. There are limits to the number of Tweets which can be accessed through the API. If the limit of Tweets has occured since the since_id, the since_id will be forced to the oldest ID available. (optional)</param>
        /// <returns>Task of ApiResponse (ResultT)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResultT>> FavoritesListUsingPOSTAsyncWithHttpInfo (string apiKey, string userId, string maxId = null, string screenName = null, string sinceId = null);
        /// <summary>
        /// get mentionsTimeline Detail
        /// </summary>
        /// <remarks>
        /// See details  https://developer.twitter.com/en/docs/twitter-api/v1/tweets/timelines/api-reference/get-statuses-mentions_timeline
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="includeEntities"> (optional, default to false)</param>
        /// <param name="maxId">Returns results with an ID less than (that is, older than) or equal to the specified ID. (optional)</param>
        /// <param name="sinceId">Returns results with an ID greater than (that is, more recent than) the specified ID. There are limits to the number of Tweets which can be accessed through the API. If the limit of Tweets has occured since the since_id, the since_id will be forced to the oldest ID available. (optional)</param>
        /// <param name="trimUser"> (optional, default to true)</param>
        /// <returns>Task of ResultT</returns>
        System.Threading.Tasks.Task<ResultT> MentionsTimelineUsingGETAsync (string apiKey, string authToken, string ct0, string includeEntities = null, string maxId = null, string sinceId = null, string trimUser = null);

        /// <summary>
        /// get mentionsTimeline Detail
        /// </summary>
        /// <remarks>
        /// See details  https://developer.twitter.com/en/docs/twitter-api/v1/tweets/timelines/api-reference/get-statuses-mentions_timeline
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="includeEntities"> (optional, default to false)</param>
        /// <param name="maxId">Returns results with an ID less than (that is, older than) or equal to the specified ID. (optional)</param>
        /// <param name="sinceId">Returns results with an ID greater than (that is, more recent than) the specified ID. There are limits to the number of Tweets which can be accessed through the API. If the limit of Tweets has occured since the since_id, the since_id will be forced to the oldest ID available. (optional)</param>
        /// <param name="trimUser"> (optional, default to true)</param>
        /// <returns>Task of ApiResponse (ResultT)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResultT>> MentionsTimelineUsingGETAsyncWithHttpInfo (string apiKey, string authToken, string ct0, string includeEntities = null, string maxId = null, string sinceId = null, string trimUser = null);
        /// <summary>
        /// get mentionsTimeline Detail
        /// </summary>
        /// <remarks>
        /// See details  https://developer.twitter.com/en/docs/twitter-api/v1/tweets/timelines/api-reference/get-statuses-mentions_timeline
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="includeEntities"> (optional, default to false)</param>
        /// <param name="maxId">Returns results with an ID less than (that is, older than) or equal to the specified ID. (optional)</param>
        /// <param name="sinceId">Returns results with an ID greater than (that is, more recent than) the specified ID. There are limits to the number of Tweets which can be accessed through the API. If the limit of Tweets has occured since the since_id, the since_id will be forced to the oldest ID available. (optional)</param>
        /// <param name="trimUser"> (optional, default to true)</param>
        /// <returns>Task of ResultT</returns>
        System.Threading.Tasks.Task<ResultT> MentionsTimelineUsingPOSTAsync (string apiKey, string authToken, string ct0, string includeEntities = null, string maxId = null, string sinceId = null, string trimUser = null);

        /// <summary>
        /// get mentionsTimeline Detail
        /// </summary>
        /// <remarks>
        /// See details  https://developer.twitter.com/en/docs/twitter-api/v1/tweets/timelines/api-reference/get-statuses-mentions_timeline
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="includeEntities"> (optional, default to false)</param>
        /// <param name="maxId">Returns results with an ID less than (that is, older than) or equal to the specified ID. (optional)</param>
        /// <param name="sinceId">Returns results with an ID greater than (that is, more recent than) the specified ID. There are limits to the number of Tweets which can be accessed through the API. If the limit of Tweets has occured since the since_id, the since_id will be forced to the oldest ID available. (optional)</param>
        /// <param name="trimUser"> (optional, default to true)</param>
        /// <returns>Task of ApiResponse (ResultT)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResultT>> MentionsTimelineUsingPOSTAsyncWithHttpInfo (string apiKey, string authToken, string ct0, string includeEntities = null, string maxId = null, string sinceId = null, string trimUser = null);
        /// <summary>
        /// Quotes by V2
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="tweetId"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>Task of ResultT</returns>
        System.Threading.Tasks.Task<ResultT> QuotesV2UsingGETAsync (string apiKey, string tweetId, string cursor = null);

        /// <summary>
        /// Quotes by V2
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="tweetId"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>Task of ApiResponse (ResultT)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResultT>> QuotesV2UsingGETAsyncWithHttpInfo (string apiKey, string tweetId, string cursor = null);
        /// <summary>
        /// Quotes by V2
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="tweetId"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>Task of ResultT</returns>
        System.Threading.Tasks.Task<ResultT> QuotesV2UsingPOSTAsync (string apiKey, string tweetId, string cursor = null);

        /// <summary>
        /// Quotes by V2
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="tweetId"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>Task of ApiResponse (ResultT)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResultT>> QuotesV2UsingPOSTAsyncWithHttpInfo (string apiKey, string tweetId, string cursor = null);
        /// <summary>
        /// get retwweeters ids by tweetId
        /// </summary>
        /// <remarks>
        /// Returns a collection of up to 100 user IDs belonging to users who have retweeted the Tweet specified by the id parameter. See details https://developer.twitter.com/en/docs/twitter-api/v1/tweets/post-and-engage/api-reference/get-statuses-retweeters-ids
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="id"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>Task of ResultT</returns>
        System.Threading.Tasks.Task<ResultT> RetweetersIdsUsingGETAsync (string apiKey, string id, string cursor = null);

        /// <summary>
        /// get retwweeters ids by tweetId
        /// </summary>
        /// <remarks>
        /// Returns a collection of up to 100 user IDs belonging to users who have retweeted the Tweet specified by the id parameter. See details https://developer.twitter.com/en/docs/twitter-api/v1/tweets/post-and-engage/api-reference/get-statuses-retweeters-ids
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="id"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>Task of ApiResponse (ResultT)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResultT>> RetweetersIdsUsingGETAsyncWithHttpInfo (string apiKey, string id, string cursor = null);
        /// <summary>
        /// get retwweeters ids by tweetId
        /// </summary>
        /// <remarks>
        /// Returns a collection of up to 100 user IDs belonging to users who have retweeted the Tweet specified by the id parameter. See details https://developer.twitter.com/en/docs/twitter-api/v1/tweets/post-and-engage/api-reference/get-statuses-retweeters-ids
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="id"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>Task of ResultT</returns>
        System.Threading.Tasks.Task<ResultT> RetweetersIdsUsingPOSTAsync (string apiKey, string id, string cursor = null);

        /// <summary>
        /// get retwweeters ids by tweetId
        /// </summary>
        /// <remarks>
        /// Returns a collection of up to 100 user IDs belonging to users who have retweeted the Tweet specified by the id parameter. See details https://developer.twitter.com/en/docs/twitter-api/v1/tweets/post-and-engage/api-reference/get-statuses-retweeters-ids
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="id"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>Task of ApiResponse (ResultT)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResultT>> RetweetersIdsUsingPOSTAsyncWithHttpInfo (string apiKey, string id, string cursor = null);
        /// <summary>
        /// Retweeters by V2
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="tweetId"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>Task of ResultT</returns>
        System.Threading.Tasks.Task<ResultT> RetweetersV2UsingGETAsync (string apiKey, string tweetId, string cursor = null);

        /// <summary>
        /// Retweeters by V2
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="tweetId"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>Task of ApiResponse (ResultT)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResultT>> RetweetersV2UsingGETAsyncWithHttpInfo (string apiKey, string tweetId, string cursor = null);
        /// <summary>
        /// Retweeters by V2
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="tweetId"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>Task of ResultT</returns>
        System.Threading.Tasks.Task<ResultT> RetweetersV2UsingPOSTAsync (string apiKey, string tweetId, string cursor = null);

        /// <summary>
        /// Retweeters by V2
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="tweetId"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>Task of ApiResponse (ResultT)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResultT>> RetweetersV2UsingPOSTAsyncWithHttpInfo (string apiKey, string tweetId, string cursor = null);
        /// <summary>
        /// tweet Brief information
        /// </summary>
        /// <remarks>
        /// get tweet Brief information
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="id"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>Task of ResultT</returns>
        System.Threading.Tasks.Task<ResultT> TweetSimpleUsingGETAsync (string apiKey, string id, string cursor = null);

        /// <summary>
        /// tweet Brief information
        /// </summary>
        /// <remarks>
        /// get tweet Brief information
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="id"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>Task of ApiResponse (ResultT)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResultT>> TweetSimpleUsingGETAsyncWithHttpInfo (string apiKey, string id, string cursor = null);
        /// <summary>
        /// tweet Brief information
        /// </summary>
        /// <remarks>
        /// get tweet Brief information
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="id"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>Task of ResultT</returns>
        System.Threading.Tasks.Task<ResultT> TweetSimpleUsingPOSTAsync (string apiKey, string id, string cursor = null);

        /// <summary>
        /// tweet Brief information
        /// </summary>
        /// <remarks>
        /// get tweet Brief information
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="id"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>Task of ApiResponse (ResultT)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResultT>> TweetSimpleUsingPOSTAsyncWithHttpInfo (string apiKey, string id, string cursor = null);
        /// <summary>
        /// get TweetTimeline Detail
        /// </summary>
        /// <remarks>
        /// get tweetDetail and reply
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="id"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>Task of ResultT</returns>
        System.Threading.Tasks.Task<ResultT> TweetTimelineUsingGETAsync (string apiKey, string id, string cursor = null);

        /// <summary>
        /// get TweetTimeline Detail
        /// </summary>
        /// <remarks>
        /// get tweetDetail and reply
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="id"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>Task of ApiResponse (ResultT)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResultT>> TweetTimelineUsingGETAsyncWithHttpInfo (string apiKey, string id, string cursor = null);
        /// <summary>
        /// get TweetTimeline Detail
        /// </summary>
        /// <remarks>
        /// get tweetDetail and reply
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="id"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>Task of ResultT</returns>
        System.Threading.Tasks.Task<ResultT> TweetTimelineUsingPOSTAsync (string apiKey, string id, string cursor = null);

        /// <summary>
        /// get TweetTimeline Detail
        /// </summary>
        /// <remarks>
        /// get tweetDetail and reply
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="id"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>Task of ApiResponse (ResultT)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResultT>> TweetTimelineUsingPOSTAsyncWithHttpInfo (string apiKey, string id, string cursor = null);
        /// <summary>
        /// get userTweetReply 
        /// </summary>
        /// <remarks>
        /// get user Tweet Reply
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="userId"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>Task of ResultT</returns>
        System.Threading.Tasks.Task<ResultT> UserTweetReplyUsingGETAsync (string apiKey, string userId, string cursor = null);

        /// <summary>
        /// get userTweetReply 
        /// </summary>
        /// <remarks>
        /// get user Tweet Reply
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="userId"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>Task of ApiResponse (ResultT)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResultT>> UserTweetReplyUsingGETAsyncWithHttpInfo (string apiKey, string userId, string cursor = null);
        /// <summary>
        /// get userTweetReply 
        /// </summary>
        /// <remarks>
        /// get user Tweet Reply
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="userId"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>Task of ResultT</returns>
        System.Threading.Tasks.Task<ResultT> UserTweetReplyUsingPOSTAsync (string apiKey, string userId, string cursor = null);

        /// <summary>
        /// get userTweetReply 
        /// </summary>
        /// <remarks>
        /// get user Tweet Reply
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="userId"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>Task of ApiResponse (ResultT)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResultT>> UserTweetReplyUsingPOSTAsyncWithHttpInfo (string apiKey, string userId, string cursor = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TwitterGetTweesApiToolsApi : ITwitterGetTweesApiToolsApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TwitterGetTweesApiToolsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TwitterGetTweesApiToolsApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TwitterGetTweesApiToolsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TwitterGetTweesApiToolsApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Favoriters by V2 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="tweetId"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>ResultT</returns>
        public ResultT FavoritersV2UsingGET (string apiKey, string tweetId, string cursor = null)
        {
             ApiResponse<ResultT> localVarResponse = FavoritersV2UsingGETWithHttpInfo(apiKey, tweetId, cursor);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Favoriters by V2 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="tweetId"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>ApiResponse of ResultT</returns>
        public ApiResponse< ResultT > FavoritersV2UsingGETWithHttpInfo (string apiKey, string tweetId, string cursor = null)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling TwitterGetTweesApiToolsApi->FavoritersV2UsingGET");
            // verify the required parameter 'tweetId' is set
            if (tweetId == null)
                throw new ApiException(400, "Missing required parameter 'tweetId' when calling TwitterGetTweesApiToolsApi->FavoritersV2UsingGET");

            var localVarPath = "/base/apitools/favoritersV2";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", apiKey)); // query parameter
            if (cursor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cursor", cursor)); // query parameter
            if (tweetId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tweetId", tweetId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FavoritersV2UsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultT>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultT) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultT)));
        }

        /// <summary>
        /// Favoriters by V2 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="tweetId"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>Task of ResultT</returns>
        public async System.Threading.Tasks.Task<ResultT> FavoritersV2UsingGETAsync (string apiKey, string tweetId, string cursor = null)
        {
             ApiResponse<ResultT> localVarResponse = await FavoritersV2UsingGETAsyncWithHttpInfo(apiKey, tweetId, cursor);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Favoriters by V2 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="tweetId"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>Task of ApiResponse (ResultT)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResultT>> FavoritersV2UsingGETAsyncWithHttpInfo (string apiKey, string tweetId, string cursor = null)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling TwitterGetTweesApiToolsApi->FavoritersV2UsingGET");
            // verify the required parameter 'tweetId' is set
            if (tweetId == null)
                throw new ApiException(400, "Missing required parameter 'tweetId' when calling TwitterGetTweesApiToolsApi->FavoritersV2UsingGET");

            var localVarPath = "/base/apitools/favoritersV2";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", apiKey)); // query parameter
            if (cursor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cursor", cursor)); // query parameter
            if (tweetId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tweetId", tweetId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FavoritersV2UsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultT>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultT) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultT)));
        }

        /// <summary>
        /// Favoriters by V2 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="tweetId"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>ResultT</returns>
        public ResultT FavoritersV2UsingPOST (string apiKey, string tweetId, string cursor = null)
        {
             ApiResponse<ResultT> localVarResponse = FavoritersV2UsingPOSTWithHttpInfo(apiKey, tweetId, cursor);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Favoriters by V2 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="tweetId"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>ApiResponse of ResultT</returns>
        public ApiResponse< ResultT > FavoritersV2UsingPOSTWithHttpInfo (string apiKey, string tweetId, string cursor = null)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling TwitterGetTweesApiToolsApi->FavoritersV2UsingPOST");
            // verify the required parameter 'tweetId' is set
            if (tweetId == null)
                throw new ApiException(400, "Missing required parameter 'tweetId' when calling TwitterGetTweesApiToolsApi->FavoritersV2UsingPOST");

            var localVarPath = "/base/apitools/favoritersV2";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", apiKey)); // query parameter
            if (cursor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cursor", cursor)); // query parameter
            if (tweetId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tweetId", tweetId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FavoritersV2UsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultT>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultT) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultT)));
        }

        /// <summary>
        /// Favoriters by V2 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="tweetId"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>Task of ResultT</returns>
        public async System.Threading.Tasks.Task<ResultT> FavoritersV2UsingPOSTAsync (string apiKey, string tweetId, string cursor = null)
        {
             ApiResponse<ResultT> localVarResponse = await FavoritersV2UsingPOSTAsyncWithHttpInfo(apiKey, tweetId, cursor);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Favoriters by V2 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="tweetId"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>Task of ApiResponse (ResultT)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResultT>> FavoritersV2UsingPOSTAsyncWithHttpInfo (string apiKey, string tweetId, string cursor = null)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling TwitterGetTweesApiToolsApi->FavoritersV2UsingPOST");
            // verify the required parameter 'tweetId' is set
            if (tweetId == null)
                throw new ApiException(400, "Missing required parameter 'tweetId' when calling TwitterGetTweesApiToolsApi->FavoritersV2UsingPOST");

            var localVarPath = "/base/apitools/favoritersV2";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", apiKey)); // query parameter
            if (cursor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cursor", cursor)); // query parameter
            if (tweetId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tweetId", tweetId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FavoritersV2UsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultT>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultT) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultT)));
        }

        /// <summary>
        /// favorites are now known as likes. See details https://developer.twitter.com/en/docs/twitter-api/v1/tweets/post-and-engage/api-reference/get-favorites-list
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="userId"></param>
        /// <param name="maxId">Returns results with an ID less than (that is, older than) or equal to the specified ID. (optional)</param>
        /// <param name="screenName"> (optional, default to elonmusk)</param>
        /// <param name="sinceId">Returns results with an ID greater than (that is, more recent than) the specified ID. There are limits to the number of Tweets which can be accessed through the API. If the limit of Tweets has occured since the since_id, the since_id will be forced to the oldest ID available. (optional)</param>
        /// <returns>ResultT</returns>
        public ResultT FavoritesListUsingGET (string apiKey, string userId, string maxId = null, string screenName = null, string sinceId = null)
        {
             ApiResponse<ResultT> localVarResponse = FavoritesListUsingGETWithHttpInfo(apiKey, userId, maxId, screenName, sinceId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// favorites are now known as likes. See details https://developer.twitter.com/en/docs/twitter-api/v1/tweets/post-and-engage/api-reference/get-favorites-list
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="userId"></param>
        /// <param name="maxId">Returns results with an ID less than (that is, older than) or equal to the specified ID. (optional)</param>
        /// <param name="screenName"> (optional, default to elonmusk)</param>
        /// <param name="sinceId">Returns results with an ID greater than (that is, more recent than) the specified ID. There are limits to the number of Tweets which can be accessed through the API. If the limit of Tweets has occured since the since_id, the since_id will be forced to the oldest ID available. (optional)</param>
        /// <returns>ApiResponse of ResultT</returns>
        public ApiResponse< ResultT > FavoritesListUsingGETWithHttpInfo (string apiKey, string userId, string maxId = null, string screenName = null, string sinceId = null)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling TwitterGetTweesApiToolsApi->FavoritesListUsingGET");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling TwitterGetTweesApiToolsApi->FavoritesListUsingGET");

            var localVarPath = "/base/apitools/favoritesList";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", apiKey)); // query parameter
            if (maxId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxId", maxId)); // query parameter
            if (screenName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "screenName", screenName)); // query parameter
            if (sinceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sinceId", sinceId)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FavoritesListUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultT>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultT) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultT)));
        }

        /// <summary>
        /// favorites are now known as likes. See details https://developer.twitter.com/en/docs/twitter-api/v1/tweets/post-and-engage/api-reference/get-favorites-list
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="userId"></param>
        /// <param name="maxId">Returns results with an ID less than (that is, older than) or equal to the specified ID. (optional)</param>
        /// <param name="screenName"> (optional, default to elonmusk)</param>
        /// <param name="sinceId">Returns results with an ID greater than (that is, more recent than) the specified ID. There are limits to the number of Tweets which can be accessed through the API. If the limit of Tweets has occured since the since_id, the since_id will be forced to the oldest ID available. (optional)</param>
        /// <returns>Task of ResultT</returns>
        public async System.Threading.Tasks.Task<ResultT> FavoritesListUsingGETAsync (string apiKey, string userId, string maxId = null, string screenName = null, string sinceId = null)
        {
             ApiResponse<ResultT> localVarResponse = await FavoritesListUsingGETAsyncWithHttpInfo(apiKey, userId, maxId, screenName, sinceId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// favorites are now known as likes. See details https://developer.twitter.com/en/docs/twitter-api/v1/tweets/post-and-engage/api-reference/get-favorites-list
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="userId"></param>
        /// <param name="maxId">Returns results with an ID less than (that is, older than) or equal to the specified ID. (optional)</param>
        /// <param name="screenName"> (optional, default to elonmusk)</param>
        /// <param name="sinceId">Returns results with an ID greater than (that is, more recent than) the specified ID. There are limits to the number of Tweets which can be accessed through the API. If the limit of Tweets has occured since the since_id, the since_id will be forced to the oldest ID available. (optional)</param>
        /// <returns>Task of ApiResponse (ResultT)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResultT>> FavoritesListUsingGETAsyncWithHttpInfo (string apiKey, string userId, string maxId = null, string screenName = null, string sinceId = null)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling TwitterGetTweesApiToolsApi->FavoritesListUsingGET");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling TwitterGetTweesApiToolsApi->FavoritesListUsingGET");

            var localVarPath = "/base/apitools/favoritesList";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", apiKey)); // query parameter
            if (maxId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxId", maxId)); // query parameter
            if (screenName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "screenName", screenName)); // query parameter
            if (sinceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sinceId", sinceId)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FavoritesListUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultT>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultT) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultT)));
        }

        /// <summary>
        /// favorites are now known as likes. See details https://developer.twitter.com/en/docs/twitter-api/v1/tweets/post-and-engage/api-reference/get-favorites-list
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="userId"></param>
        /// <param name="maxId">Returns results with an ID less than (that is, older than) or equal to the specified ID. (optional)</param>
        /// <param name="screenName"> (optional, default to elonmusk)</param>
        /// <param name="sinceId">Returns results with an ID greater than (that is, more recent than) the specified ID. There are limits to the number of Tweets which can be accessed through the API. If the limit of Tweets has occured since the since_id, the since_id will be forced to the oldest ID available. (optional)</param>
        /// <returns>ResultT</returns>
        public ResultT FavoritesListUsingPOST (string apiKey, string userId, string maxId = null, string screenName = null, string sinceId = null)
        {
             ApiResponse<ResultT> localVarResponse = FavoritesListUsingPOSTWithHttpInfo(apiKey, userId, maxId, screenName, sinceId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// favorites are now known as likes. See details https://developer.twitter.com/en/docs/twitter-api/v1/tweets/post-and-engage/api-reference/get-favorites-list
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="userId"></param>
        /// <param name="maxId">Returns results with an ID less than (that is, older than) or equal to the specified ID. (optional)</param>
        /// <param name="screenName"> (optional, default to elonmusk)</param>
        /// <param name="sinceId">Returns results with an ID greater than (that is, more recent than) the specified ID. There are limits to the number of Tweets which can be accessed through the API. If the limit of Tweets has occured since the since_id, the since_id will be forced to the oldest ID available. (optional)</param>
        /// <returns>ApiResponse of ResultT</returns>
        public ApiResponse< ResultT > FavoritesListUsingPOSTWithHttpInfo (string apiKey, string userId, string maxId = null, string screenName = null, string sinceId = null)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling TwitterGetTweesApiToolsApi->FavoritesListUsingPOST");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling TwitterGetTweesApiToolsApi->FavoritesListUsingPOST");

            var localVarPath = "/base/apitools/favoritesList";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", apiKey)); // query parameter
            if (maxId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxId", maxId)); // query parameter
            if (screenName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "screenName", screenName)); // query parameter
            if (sinceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sinceId", sinceId)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FavoritesListUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultT>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultT) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultT)));
        }

        /// <summary>
        /// favorites are now known as likes. See details https://developer.twitter.com/en/docs/twitter-api/v1/tweets/post-and-engage/api-reference/get-favorites-list
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="userId"></param>
        /// <param name="maxId">Returns results with an ID less than (that is, older than) or equal to the specified ID. (optional)</param>
        /// <param name="screenName"> (optional, default to elonmusk)</param>
        /// <param name="sinceId">Returns results with an ID greater than (that is, more recent than) the specified ID. There are limits to the number of Tweets which can be accessed through the API. If the limit of Tweets has occured since the since_id, the since_id will be forced to the oldest ID available. (optional)</param>
        /// <returns>Task of ResultT</returns>
        public async System.Threading.Tasks.Task<ResultT> FavoritesListUsingPOSTAsync (string apiKey, string userId, string maxId = null, string screenName = null, string sinceId = null)
        {
             ApiResponse<ResultT> localVarResponse = await FavoritesListUsingPOSTAsyncWithHttpInfo(apiKey, userId, maxId, screenName, sinceId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// favorites are now known as likes. See details https://developer.twitter.com/en/docs/twitter-api/v1/tweets/post-and-engage/api-reference/get-favorites-list
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="userId"></param>
        /// <param name="maxId">Returns results with an ID less than (that is, older than) or equal to the specified ID. (optional)</param>
        /// <param name="screenName"> (optional, default to elonmusk)</param>
        /// <param name="sinceId">Returns results with an ID greater than (that is, more recent than) the specified ID. There are limits to the number of Tweets which can be accessed through the API. If the limit of Tweets has occured since the since_id, the since_id will be forced to the oldest ID available. (optional)</param>
        /// <returns>Task of ApiResponse (ResultT)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResultT>> FavoritesListUsingPOSTAsyncWithHttpInfo (string apiKey, string userId, string maxId = null, string screenName = null, string sinceId = null)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling TwitterGetTweesApiToolsApi->FavoritesListUsingPOST");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling TwitterGetTweesApiToolsApi->FavoritesListUsingPOST");

            var localVarPath = "/base/apitools/favoritesList";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", apiKey)); // query parameter
            if (maxId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxId", maxId)); // query parameter
            if (screenName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "screenName", screenName)); // query parameter
            if (sinceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sinceId", sinceId)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FavoritesListUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultT>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultT) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultT)));
        }

        /// <summary>
        /// get mentionsTimeline Detail See details  https://developer.twitter.com/en/docs/twitter-api/v1/tweets/timelines/api-reference/get-statuses-mentions_timeline
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="includeEntities"> (optional, default to false)</param>
        /// <param name="maxId">Returns results with an ID less than (that is, older than) or equal to the specified ID. (optional)</param>
        /// <param name="sinceId">Returns results with an ID greater than (that is, more recent than) the specified ID. There are limits to the number of Tweets which can be accessed through the API. If the limit of Tweets has occured since the since_id, the since_id will be forced to the oldest ID available. (optional)</param>
        /// <param name="trimUser"> (optional, default to true)</param>
        /// <returns>ResultT</returns>
        public ResultT MentionsTimelineUsingGET (string apiKey, string authToken, string ct0, string includeEntities = null, string maxId = null, string sinceId = null, string trimUser = null)
        {
             ApiResponse<ResultT> localVarResponse = MentionsTimelineUsingGETWithHttpInfo(apiKey, authToken, ct0, includeEntities, maxId, sinceId, trimUser);
             return localVarResponse.Data;
        }

        /// <summary>
        /// get mentionsTimeline Detail See details  https://developer.twitter.com/en/docs/twitter-api/v1/tweets/timelines/api-reference/get-statuses-mentions_timeline
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="includeEntities"> (optional, default to false)</param>
        /// <param name="maxId">Returns results with an ID less than (that is, older than) or equal to the specified ID. (optional)</param>
        /// <param name="sinceId">Returns results with an ID greater than (that is, more recent than) the specified ID. There are limits to the number of Tweets which can be accessed through the API. If the limit of Tweets has occured since the since_id, the since_id will be forced to the oldest ID available. (optional)</param>
        /// <param name="trimUser"> (optional, default to true)</param>
        /// <returns>ApiResponse of ResultT</returns>
        public ApiResponse< ResultT > MentionsTimelineUsingGETWithHttpInfo (string apiKey, string authToken, string ct0, string includeEntities = null, string maxId = null, string sinceId = null, string trimUser = null)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling TwitterGetTweesApiToolsApi->MentionsTimelineUsingGET");
            // verify the required parameter 'authToken' is set
            if (authToken == null)
                throw new ApiException(400, "Missing required parameter 'authToken' when calling TwitterGetTweesApiToolsApi->MentionsTimelineUsingGET");
            // verify the required parameter 'ct0' is set
            if (ct0 == null)
                throw new ApiException(400, "Missing required parameter 'ct0' when calling TwitterGetTweesApiToolsApi->MentionsTimelineUsingGET");

            var localVarPath = "/base/apitools/mentionsTimeline";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", apiKey)); // query parameter
            if (authToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "auth_token", authToken)); // query parameter
            if (ct0 != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ct0", ct0)); // query parameter
            if (includeEntities != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include_entities", includeEntities)); // query parameter
            if (maxId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxId", maxId)); // query parameter
            if (sinceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sinceId", sinceId)); // query parameter
            if (trimUser != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "trim_user", trimUser)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MentionsTimelineUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultT>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultT) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultT)));
        }

        /// <summary>
        /// get mentionsTimeline Detail See details  https://developer.twitter.com/en/docs/twitter-api/v1/tweets/timelines/api-reference/get-statuses-mentions_timeline
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="includeEntities"> (optional, default to false)</param>
        /// <param name="maxId">Returns results with an ID less than (that is, older than) or equal to the specified ID. (optional)</param>
        /// <param name="sinceId">Returns results with an ID greater than (that is, more recent than) the specified ID. There are limits to the number of Tweets which can be accessed through the API. If the limit of Tweets has occured since the since_id, the since_id will be forced to the oldest ID available. (optional)</param>
        /// <param name="trimUser"> (optional, default to true)</param>
        /// <returns>Task of ResultT</returns>
        public async System.Threading.Tasks.Task<ResultT> MentionsTimelineUsingGETAsync (string apiKey, string authToken, string ct0, string includeEntities = null, string maxId = null, string sinceId = null, string trimUser = null)
        {
             ApiResponse<ResultT> localVarResponse = await MentionsTimelineUsingGETAsyncWithHttpInfo(apiKey, authToken, ct0, includeEntities, maxId, sinceId, trimUser);
             return localVarResponse.Data;

        }

        /// <summary>
        /// get mentionsTimeline Detail See details  https://developer.twitter.com/en/docs/twitter-api/v1/tweets/timelines/api-reference/get-statuses-mentions_timeline
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="includeEntities"> (optional, default to false)</param>
        /// <param name="maxId">Returns results with an ID less than (that is, older than) or equal to the specified ID. (optional)</param>
        /// <param name="sinceId">Returns results with an ID greater than (that is, more recent than) the specified ID. There are limits to the number of Tweets which can be accessed through the API. If the limit of Tweets has occured since the since_id, the since_id will be forced to the oldest ID available. (optional)</param>
        /// <param name="trimUser"> (optional, default to true)</param>
        /// <returns>Task of ApiResponse (ResultT)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResultT>> MentionsTimelineUsingGETAsyncWithHttpInfo (string apiKey, string authToken, string ct0, string includeEntities = null, string maxId = null, string sinceId = null, string trimUser = null)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling TwitterGetTweesApiToolsApi->MentionsTimelineUsingGET");
            // verify the required parameter 'authToken' is set
            if (authToken == null)
                throw new ApiException(400, "Missing required parameter 'authToken' when calling TwitterGetTweesApiToolsApi->MentionsTimelineUsingGET");
            // verify the required parameter 'ct0' is set
            if (ct0 == null)
                throw new ApiException(400, "Missing required parameter 'ct0' when calling TwitterGetTweesApiToolsApi->MentionsTimelineUsingGET");

            var localVarPath = "/base/apitools/mentionsTimeline";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", apiKey)); // query parameter
            if (authToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "auth_token", authToken)); // query parameter
            if (ct0 != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ct0", ct0)); // query parameter
            if (includeEntities != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include_entities", includeEntities)); // query parameter
            if (maxId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxId", maxId)); // query parameter
            if (sinceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sinceId", sinceId)); // query parameter
            if (trimUser != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "trim_user", trimUser)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MentionsTimelineUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultT>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultT) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultT)));
        }

        /// <summary>
        /// get mentionsTimeline Detail See details  https://developer.twitter.com/en/docs/twitter-api/v1/tweets/timelines/api-reference/get-statuses-mentions_timeline
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="includeEntities"> (optional, default to false)</param>
        /// <param name="maxId">Returns results with an ID less than (that is, older than) or equal to the specified ID. (optional)</param>
        /// <param name="sinceId">Returns results with an ID greater than (that is, more recent than) the specified ID. There are limits to the number of Tweets which can be accessed through the API. If the limit of Tweets has occured since the since_id, the since_id will be forced to the oldest ID available. (optional)</param>
        /// <param name="trimUser"> (optional, default to true)</param>
        /// <returns>ResultT</returns>
        public ResultT MentionsTimelineUsingPOST (string apiKey, string authToken, string ct0, string includeEntities = null, string maxId = null, string sinceId = null, string trimUser = null)
        {
             ApiResponse<ResultT> localVarResponse = MentionsTimelineUsingPOSTWithHttpInfo(apiKey, authToken, ct0, includeEntities, maxId, sinceId, trimUser);
             return localVarResponse.Data;
        }

        /// <summary>
        /// get mentionsTimeline Detail See details  https://developer.twitter.com/en/docs/twitter-api/v1/tweets/timelines/api-reference/get-statuses-mentions_timeline
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="includeEntities"> (optional, default to false)</param>
        /// <param name="maxId">Returns results with an ID less than (that is, older than) or equal to the specified ID. (optional)</param>
        /// <param name="sinceId">Returns results with an ID greater than (that is, more recent than) the specified ID. There are limits to the number of Tweets which can be accessed through the API. If the limit of Tweets has occured since the since_id, the since_id will be forced to the oldest ID available. (optional)</param>
        /// <param name="trimUser"> (optional, default to true)</param>
        /// <returns>ApiResponse of ResultT</returns>
        public ApiResponse< ResultT > MentionsTimelineUsingPOSTWithHttpInfo (string apiKey, string authToken, string ct0, string includeEntities = null, string maxId = null, string sinceId = null, string trimUser = null)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling TwitterGetTweesApiToolsApi->MentionsTimelineUsingPOST");
            // verify the required parameter 'authToken' is set
            if (authToken == null)
                throw new ApiException(400, "Missing required parameter 'authToken' when calling TwitterGetTweesApiToolsApi->MentionsTimelineUsingPOST");
            // verify the required parameter 'ct0' is set
            if (ct0 == null)
                throw new ApiException(400, "Missing required parameter 'ct0' when calling TwitterGetTweesApiToolsApi->MentionsTimelineUsingPOST");

            var localVarPath = "/base/apitools/mentionsTimeline";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", apiKey)); // query parameter
            if (authToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "auth_token", authToken)); // query parameter
            if (ct0 != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ct0", ct0)); // query parameter
            if (includeEntities != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include_entities", includeEntities)); // query parameter
            if (maxId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxId", maxId)); // query parameter
            if (sinceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sinceId", sinceId)); // query parameter
            if (trimUser != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "trim_user", trimUser)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MentionsTimelineUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultT>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultT) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultT)));
        }

        /// <summary>
        /// get mentionsTimeline Detail See details  https://developer.twitter.com/en/docs/twitter-api/v1/tweets/timelines/api-reference/get-statuses-mentions_timeline
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="includeEntities"> (optional, default to false)</param>
        /// <param name="maxId">Returns results with an ID less than (that is, older than) or equal to the specified ID. (optional)</param>
        /// <param name="sinceId">Returns results with an ID greater than (that is, more recent than) the specified ID. There are limits to the number of Tweets which can be accessed through the API. If the limit of Tweets has occured since the since_id, the since_id will be forced to the oldest ID available. (optional)</param>
        /// <param name="trimUser"> (optional, default to true)</param>
        /// <returns>Task of ResultT</returns>
        public async System.Threading.Tasks.Task<ResultT> MentionsTimelineUsingPOSTAsync (string apiKey, string authToken, string ct0, string includeEntities = null, string maxId = null, string sinceId = null, string trimUser = null)
        {
             ApiResponse<ResultT> localVarResponse = await MentionsTimelineUsingPOSTAsyncWithHttpInfo(apiKey, authToken, ct0, includeEntities, maxId, sinceId, trimUser);
             return localVarResponse.Data;

        }

        /// <summary>
        /// get mentionsTimeline Detail See details  https://developer.twitter.com/en/docs/twitter-api/v1/tweets/timelines/api-reference/get-statuses-mentions_timeline
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="includeEntities"> (optional, default to false)</param>
        /// <param name="maxId">Returns results with an ID less than (that is, older than) or equal to the specified ID. (optional)</param>
        /// <param name="sinceId">Returns results with an ID greater than (that is, more recent than) the specified ID. There are limits to the number of Tweets which can be accessed through the API. If the limit of Tweets has occured since the since_id, the since_id will be forced to the oldest ID available. (optional)</param>
        /// <param name="trimUser"> (optional, default to true)</param>
        /// <returns>Task of ApiResponse (ResultT)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResultT>> MentionsTimelineUsingPOSTAsyncWithHttpInfo (string apiKey, string authToken, string ct0, string includeEntities = null, string maxId = null, string sinceId = null, string trimUser = null)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling TwitterGetTweesApiToolsApi->MentionsTimelineUsingPOST");
            // verify the required parameter 'authToken' is set
            if (authToken == null)
                throw new ApiException(400, "Missing required parameter 'authToken' when calling TwitterGetTweesApiToolsApi->MentionsTimelineUsingPOST");
            // verify the required parameter 'ct0' is set
            if (ct0 == null)
                throw new ApiException(400, "Missing required parameter 'ct0' when calling TwitterGetTweesApiToolsApi->MentionsTimelineUsingPOST");

            var localVarPath = "/base/apitools/mentionsTimeline";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", apiKey)); // query parameter
            if (authToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "auth_token", authToken)); // query parameter
            if (ct0 != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ct0", ct0)); // query parameter
            if (includeEntities != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include_entities", includeEntities)); // query parameter
            if (maxId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxId", maxId)); // query parameter
            if (sinceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sinceId", sinceId)); // query parameter
            if (trimUser != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "trim_user", trimUser)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MentionsTimelineUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultT>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultT) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultT)));
        }

        /// <summary>
        /// Quotes by V2 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="tweetId"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>ResultT</returns>
        public ResultT QuotesV2UsingGET (string apiKey, string tweetId, string cursor = null)
        {
             ApiResponse<ResultT> localVarResponse = QuotesV2UsingGETWithHttpInfo(apiKey, tweetId, cursor);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Quotes by V2 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="tweetId"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>ApiResponse of ResultT</returns>
        public ApiResponse< ResultT > QuotesV2UsingGETWithHttpInfo (string apiKey, string tweetId, string cursor = null)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling TwitterGetTweesApiToolsApi->QuotesV2UsingGET");
            // verify the required parameter 'tweetId' is set
            if (tweetId == null)
                throw new ApiException(400, "Missing required parameter 'tweetId' when calling TwitterGetTweesApiToolsApi->QuotesV2UsingGET");

            var localVarPath = "/base/apitools/quotesV2";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", apiKey)); // query parameter
            if (cursor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cursor", cursor)); // query parameter
            if (tweetId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tweetId", tweetId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QuotesV2UsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultT>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultT) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultT)));
        }

        /// <summary>
        /// Quotes by V2 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="tweetId"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>Task of ResultT</returns>
        public async System.Threading.Tasks.Task<ResultT> QuotesV2UsingGETAsync (string apiKey, string tweetId, string cursor = null)
        {
             ApiResponse<ResultT> localVarResponse = await QuotesV2UsingGETAsyncWithHttpInfo(apiKey, tweetId, cursor);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Quotes by V2 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="tweetId"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>Task of ApiResponse (ResultT)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResultT>> QuotesV2UsingGETAsyncWithHttpInfo (string apiKey, string tweetId, string cursor = null)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling TwitterGetTweesApiToolsApi->QuotesV2UsingGET");
            // verify the required parameter 'tweetId' is set
            if (tweetId == null)
                throw new ApiException(400, "Missing required parameter 'tweetId' when calling TwitterGetTweesApiToolsApi->QuotesV2UsingGET");

            var localVarPath = "/base/apitools/quotesV2";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", apiKey)); // query parameter
            if (cursor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cursor", cursor)); // query parameter
            if (tweetId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tweetId", tweetId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QuotesV2UsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultT>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultT) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultT)));
        }

        /// <summary>
        /// Quotes by V2 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="tweetId"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>ResultT</returns>
        public ResultT QuotesV2UsingPOST (string apiKey, string tweetId, string cursor = null)
        {
             ApiResponse<ResultT> localVarResponse = QuotesV2UsingPOSTWithHttpInfo(apiKey, tweetId, cursor);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Quotes by V2 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="tweetId"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>ApiResponse of ResultT</returns>
        public ApiResponse< ResultT > QuotesV2UsingPOSTWithHttpInfo (string apiKey, string tweetId, string cursor = null)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling TwitterGetTweesApiToolsApi->QuotesV2UsingPOST");
            // verify the required parameter 'tweetId' is set
            if (tweetId == null)
                throw new ApiException(400, "Missing required parameter 'tweetId' when calling TwitterGetTweesApiToolsApi->QuotesV2UsingPOST");

            var localVarPath = "/base/apitools/quotesV2";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", apiKey)); // query parameter
            if (cursor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cursor", cursor)); // query parameter
            if (tweetId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tweetId", tweetId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QuotesV2UsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultT>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultT) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultT)));
        }

        /// <summary>
        /// Quotes by V2 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="tweetId"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>Task of ResultT</returns>
        public async System.Threading.Tasks.Task<ResultT> QuotesV2UsingPOSTAsync (string apiKey, string tweetId, string cursor = null)
        {
             ApiResponse<ResultT> localVarResponse = await QuotesV2UsingPOSTAsyncWithHttpInfo(apiKey, tweetId, cursor);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Quotes by V2 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="tweetId"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>Task of ApiResponse (ResultT)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResultT>> QuotesV2UsingPOSTAsyncWithHttpInfo (string apiKey, string tweetId, string cursor = null)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling TwitterGetTweesApiToolsApi->QuotesV2UsingPOST");
            // verify the required parameter 'tweetId' is set
            if (tweetId == null)
                throw new ApiException(400, "Missing required parameter 'tweetId' when calling TwitterGetTweesApiToolsApi->QuotesV2UsingPOST");

            var localVarPath = "/base/apitools/quotesV2";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", apiKey)); // query parameter
            if (cursor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cursor", cursor)); // query parameter
            if (tweetId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tweetId", tweetId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QuotesV2UsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultT>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultT) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultT)));
        }

        /// <summary>
        /// get retwweeters ids by tweetId Returns a collection of up to 100 user IDs belonging to users who have retweeted the Tweet specified by the id parameter. See details https://developer.twitter.com/en/docs/twitter-api/v1/tweets/post-and-engage/api-reference/get-statuses-retweeters-ids
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="id"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>ResultT</returns>
        public ResultT RetweetersIdsUsingGET (string apiKey, string id, string cursor = null)
        {
             ApiResponse<ResultT> localVarResponse = RetweetersIdsUsingGETWithHttpInfo(apiKey, id, cursor);
             return localVarResponse.Data;
        }

        /// <summary>
        /// get retwweeters ids by tweetId Returns a collection of up to 100 user IDs belonging to users who have retweeted the Tweet specified by the id parameter. See details https://developer.twitter.com/en/docs/twitter-api/v1/tweets/post-and-engage/api-reference/get-statuses-retweeters-ids
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="id"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>ApiResponse of ResultT</returns>
        public ApiResponse< ResultT > RetweetersIdsUsingGETWithHttpInfo (string apiKey, string id, string cursor = null)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling TwitterGetTweesApiToolsApi->RetweetersIdsUsingGET");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TwitterGetTweesApiToolsApi->RetweetersIdsUsingGET");

            var localVarPath = "/base/apitools/retweetersIds";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", apiKey)); // query parameter
            if (cursor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cursor", cursor)); // query parameter
            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RetweetersIdsUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultT>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultT) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultT)));
        }

        /// <summary>
        /// get retwweeters ids by tweetId Returns a collection of up to 100 user IDs belonging to users who have retweeted the Tweet specified by the id parameter. See details https://developer.twitter.com/en/docs/twitter-api/v1/tweets/post-and-engage/api-reference/get-statuses-retweeters-ids
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="id"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>Task of ResultT</returns>
        public async System.Threading.Tasks.Task<ResultT> RetweetersIdsUsingGETAsync (string apiKey, string id, string cursor = null)
        {
             ApiResponse<ResultT> localVarResponse = await RetweetersIdsUsingGETAsyncWithHttpInfo(apiKey, id, cursor);
             return localVarResponse.Data;

        }

        /// <summary>
        /// get retwweeters ids by tweetId Returns a collection of up to 100 user IDs belonging to users who have retweeted the Tweet specified by the id parameter. See details https://developer.twitter.com/en/docs/twitter-api/v1/tweets/post-and-engage/api-reference/get-statuses-retweeters-ids
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="id"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>Task of ApiResponse (ResultT)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResultT>> RetweetersIdsUsingGETAsyncWithHttpInfo (string apiKey, string id, string cursor = null)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling TwitterGetTweesApiToolsApi->RetweetersIdsUsingGET");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TwitterGetTweesApiToolsApi->RetweetersIdsUsingGET");

            var localVarPath = "/base/apitools/retweetersIds";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", apiKey)); // query parameter
            if (cursor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cursor", cursor)); // query parameter
            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RetweetersIdsUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultT>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultT) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultT)));
        }

        /// <summary>
        /// get retwweeters ids by tweetId Returns a collection of up to 100 user IDs belonging to users who have retweeted the Tweet specified by the id parameter. See details https://developer.twitter.com/en/docs/twitter-api/v1/tweets/post-and-engage/api-reference/get-statuses-retweeters-ids
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="id"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>ResultT</returns>
        public ResultT RetweetersIdsUsingPOST (string apiKey, string id, string cursor = null)
        {
             ApiResponse<ResultT> localVarResponse = RetweetersIdsUsingPOSTWithHttpInfo(apiKey, id, cursor);
             return localVarResponse.Data;
        }

        /// <summary>
        /// get retwweeters ids by tweetId Returns a collection of up to 100 user IDs belonging to users who have retweeted the Tweet specified by the id parameter. See details https://developer.twitter.com/en/docs/twitter-api/v1/tweets/post-and-engage/api-reference/get-statuses-retweeters-ids
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="id"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>ApiResponse of ResultT</returns>
        public ApiResponse< ResultT > RetweetersIdsUsingPOSTWithHttpInfo (string apiKey, string id, string cursor = null)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling TwitterGetTweesApiToolsApi->RetweetersIdsUsingPOST");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TwitterGetTweesApiToolsApi->RetweetersIdsUsingPOST");

            var localVarPath = "/base/apitools/retweetersIds";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", apiKey)); // query parameter
            if (cursor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cursor", cursor)); // query parameter
            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RetweetersIdsUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultT>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultT) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultT)));
        }

        /// <summary>
        /// get retwweeters ids by tweetId Returns a collection of up to 100 user IDs belonging to users who have retweeted the Tweet specified by the id parameter. See details https://developer.twitter.com/en/docs/twitter-api/v1/tweets/post-and-engage/api-reference/get-statuses-retweeters-ids
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="id"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>Task of ResultT</returns>
        public async System.Threading.Tasks.Task<ResultT> RetweetersIdsUsingPOSTAsync (string apiKey, string id, string cursor = null)
        {
             ApiResponse<ResultT> localVarResponse = await RetweetersIdsUsingPOSTAsyncWithHttpInfo(apiKey, id, cursor);
             return localVarResponse.Data;

        }

        /// <summary>
        /// get retwweeters ids by tweetId Returns a collection of up to 100 user IDs belonging to users who have retweeted the Tweet specified by the id parameter. See details https://developer.twitter.com/en/docs/twitter-api/v1/tweets/post-and-engage/api-reference/get-statuses-retweeters-ids
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="id"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>Task of ApiResponse (ResultT)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResultT>> RetweetersIdsUsingPOSTAsyncWithHttpInfo (string apiKey, string id, string cursor = null)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling TwitterGetTweesApiToolsApi->RetweetersIdsUsingPOST");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TwitterGetTweesApiToolsApi->RetweetersIdsUsingPOST");

            var localVarPath = "/base/apitools/retweetersIds";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", apiKey)); // query parameter
            if (cursor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cursor", cursor)); // query parameter
            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RetweetersIdsUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultT>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultT) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultT)));
        }

        /// <summary>
        /// Retweeters by V2 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="tweetId"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>ResultT</returns>
        public ResultT RetweetersV2UsingGET (string apiKey, string tweetId, string cursor = null)
        {
             ApiResponse<ResultT> localVarResponse = RetweetersV2UsingGETWithHttpInfo(apiKey, tweetId, cursor);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retweeters by V2 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="tweetId"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>ApiResponse of ResultT</returns>
        public ApiResponse< ResultT > RetweetersV2UsingGETWithHttpInfo (string apiKey, string tweetId, string cursor = null)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling TwitterGetTweesApiToolsApi->RetweetersV2UsingGET");
            // verify the required parameter 'tweetId' is set
            if (tweetId == null)
                throw new ApiException(400, "Missing required parameter 'tweetId' when calling TwitterGetTweesApiToolsApi->RetweetersV2UsingGET");

            var localVarPath = "/base/apitools/retweetersV2";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", apiKey)); // query parameter
            if (cursor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cursor", cursor)); // query parameter
            if (tweetId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tweetId", tweetId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RetweetersV2UsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultT>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultT) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultT)));
        }

        /// <summary>
        /// Retweeters by V2 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="tweetId"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>Task of ResultT</returns>
        public async System.Threading.Tasks.Task<ResultT> RetweetersV2UsingGETAsync (string apiKey, string tweetId, string cursor = null)
        {
             ApiResponse<ResultT> localVarResponse = await RetweetersV2UsingGETAsyncWithHttpInfo(apiKey, tweetId, cursor);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retweeters by V2 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="tweetId"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>Task of ApiResponse (ResultT)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResultT>> RetweetersV2UsingGETAsyncWithHttpInfo (string apiKey, string tweetId, string cursor = null)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling TwitterGetTweesApiToolsApi->RetweetersV2UsingGET");
            // verify the required parameter 'tweetId' is set
            if (tweetId == null)
                throw new ApiException(400, "Missing required parameter 'tweetId' when calling TwitterGetTweesApiToolsApi->RetweetersV2UsingGET");

            var localVarPath = "/base/apitools/retweetersV2";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", apiKey)); // query parameter
            if (cursor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cursor", cursor)); // query parameter
            if (tweetId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tweetId", tweetId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RetweetersV2UsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultT>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultT) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultT)));
        }

        /// <summary>
        /// Retweeters by V2 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="tweetId"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>ResultT</returns>
        public ResultT RetweetersV2UsingPOST (string apiKey, string tweetId, string cursor = null)
        {
             ApiResponse<ResultT> localVarResponse = RetweetersV2UsingPOSTWithHttpInfo(apiKey, tweetId, cursor);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retweeters by V2 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="tweetId"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>ApiResponse of ResultT</returns>
        public ApiResponse< ResultT > RetweetersV2UsingPOSTWithHttpInfo (string apiKey, string tweetId, string cursor = null)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling TwitterGetTweesApiToolsApi->RetweetersV2UsingPOST");
            // verify the required parameter 'tweetId' is set
            if (tweetId == null)
                throw new ApiException(400, "Missing required parameter 'tweetId' when calling TwitterGetTweesApiToolsApi->RetweetersV2UsingPOST");

            var localVarPath = "/base/apitools/retweetersV2";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", apiKey)); // query parameter
            if (cursor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cursor", cursor)); // query parameter
            if (tweetId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tweetId", tweetId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RetweetersV2UsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultT>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultT) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultT)));
        }

        /// <summary>
        /// Retweeters by V2 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="tweetId"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>Task of ResultT</returns>
        public async System.Threading.Tasks.Task<ResultT> RetweetersV2UsingPOSTAsync (string apiKey, string tweetId, string cursor = null)
        {
             ApiResponse<ResultT> localVarResponse = await RetweetersV2UsingPOSTAsyncWithHttpInfo(apiKey, tweetId, cursor);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retweeters by V2 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="tweetId"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>Task of ApiResponse (ResultT)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResultT>> RetweetersV2UsingPOSTAsyncWithHttpInfo (string apiKey, string tweetId, string cursor = null)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling TwitterGetTweesApiToolsApi->RetweetersV2UsingPOST");
            // verify the required parameter 'tweetId' is set
            if (tweetId == null)
                throw new ApiException(400, "Missing required parameter 'tweetId' when calling TwitterGetTweesApiToolsApi->RetweetersV2UsingPOST");

            var localVarPath = "/base/apitools/retweetersV2";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", apiKey)); // query parameter
            if (cursor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cursor", cursor)); // query parameter
            if (tweetId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tweetId", tweetId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RetweetersV2UsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultT>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultT) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultT)));
        }

        /// <summary>
        /// tweet Brief information get tweet Brief information
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="id"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>ResultT</returns>
        public ResultT TweetSimpleUsingGET (string apiKey, string id, string cursor = null)
        {
             ApiResponse<ResultT> localVarResponse = TweetSimpleUsingGETWithHttpInfo(apiKey, id, cursor);
             return localVarResponse.Data;
        }

        /// <summary>
        /// tweet Brief information get tweet Brief information
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="id"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>ApiResponse of ResultT</returns>
        public ApiResponse< ResultT > TweetSimpleUsingGETWithHttpInfo (string apiKey, string id, string cursor = null)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling TwitterGetTweesApiToolsApi->TweetSimpleUsingGET");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TwitterGetTweesApiToolsApi->TweetSimpleUsingGET");

            var localVarPath = "/base/apitools/tweetSimple";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", apiKey)); // query parameter
            if (cursor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cursor", cursor)); // query parameter
            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TweetSimpleUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultT>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultT) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultT)));
        }

        /// <summary>
        /// tweet Brief information get tweet Brief information
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="id"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>Task of ResultT</returns>
        public async System.Threading.Tasks.Task<ResultT> TweetSimpleUsingGETAsync (string apiKey, string id, string cursor = null)
        {
             ApiResponse<ResultT> localVarResponse = await TweetSimpleUsingGETAsyncWithHttpInfo(apiKey, id, cursor);
             return localVarResponse.Data;

        }

        /// <summary>
        /// tweet Brief information get tweet Brief information
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="id"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>Task of ApiResponse (ResultT)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResultT>> TweetSimpleUsingGETAsyncWithHttpInfo (string apiKey, string id, string cursor = null)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling TwitterGetTweesApiToolsApi->TweetSimpleUsingGET");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TwitterGetTweesApiToolsApi->TweetSimpleUsingGET");

            var localVarPath = "/base/apitools/tweetSimple";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", apiKey)); // query parameter
            if (cursor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cursor", cursor)); // query parameter
            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TweetSimpleUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultT>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultT) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultT)));
        }

        /// <summary>
        /// tweet Brief information get tweet Brief information
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="id"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>ResultT</returns>
        public ResultT TweetSimpleUsingPOST (string apiKey, string id, string cursor = null)
        {
             ApiResponse<ResultT> localVarResponse = TweetSimpleUsingPOSTWithHttpInfo(apiKey, id, cursor);
             return localVarResponse.Data;
        }

        /// <summary>
        /// tweet Brief information get tweet Brief information
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="id"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>ApiResponse of ResultT</returns>
        public ApiResponse< ResultT > TweetSimpleUsingPOSTWithHttpInfo (string apiKey, string id, string cursor = null)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling TwitterGetTweesApiToolsApi->TweetSimpleUsingPOST");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TwitterGetTweesApiToolsApi->TweetSimpleUsingPOST");

            var localVarPath = "/base/apitools/tweetSimple";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", apiKey)); // query parameter
            if (cursor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cursor", cursor)); // query parameter
            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TweetSimpleUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultT>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultT) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultT)));
        }

        /// <summary>
        /// tweet Brief information get tweet Brief information
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="id"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>Task of ResultT</returns>
        public async System.Threading.Tasks.Task<ResultT> TweetSimpleUsingPOSTAsync (string apiKey, string id, string cursor = null)
        {
             ApiResponse<ResultT> localVarResponse = await TweetSimpleUsingPOSTAsyncWithHttpInfo(apiKey, id, cursor);
             return localVarResponse.Data;

        }

        /// <summary>
        /// tweet Brief information get tweet Brief information
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="id"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>Task of ApiResponse (ResultT)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResultT>> TweetSimpleUsingPOSTAsyncWithHttpInfo (string apiKey, string id, string cursor = null)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling TwitterGetTweesApiToolsApi->TweetSimpleUsingPOST");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TwitterGetTweesApiToolsApi->TweetSimpleUsingPOST");

            var localVarPath = "/base/apitools/tweetSimple";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", apiKey)); // query parameter
            if (cursor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cursor", cursor)); // query parameter
            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TweetSimpleUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultT>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultT) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultT)));
        }

        /// <summary>
        /// get TweetTimeline Detail get tweetDetail and reply
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="id"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>ResultT</returns>
        public ResultT TweetTimelineUsingGET (string apiKey, string id, string cursor = null)
        {
             ApiResponse<ResultT> localVarResponse = TweetTimelineUsingGETWithHttpInfo(apiKey, id, cursor);
             return localVarResponse.Data;
        }

        /// <summary>
        /// get TweetTimeline Detail get tweetDetail and reply
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="id"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>ApiResponse of ResultT</returns>
        public ApiResponse< ResultT > TweetTimelineUsingGETWithHttpInfo (string apiKey, string id, string cursor = null)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling TwitterGetTweesApiToolsApi->TweetTimelineUsingGET");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TwitterGetTweesApiToolsApi->TweetTimelineUsingGET");

            var localVarPath = "/base/apitools/tweetTimeline";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", apiKey)); // query parameter
            if (cursor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cursor", cursor)); // query parameter
            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TweetTimelineUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultT>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultT) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultT)));
        }

        /// <summary>
        /// get TweetTimeline Detail get tweetDetail and reply
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="id"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>Task of ResultT</returns>
        public async System.Threading.Tasks.Task<ResultT> TweetTimelineUsingGETAsync (string apiKey, string id, string cursor = null)
        {
             ApiResponse<ResultT> localVarResponse = await TweetTimelineUsingGETAsyncWithHttpInfo(apiKey, id, cursor);
             return localVarResponse.Data;

        }

        /// <summary>
        /// get TweetTimeline Detail get tweetDetail and reply
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="id"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>Task of ApiResponse (ResultT)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResultT>> TweetTimelineUsingGETAsyncWithHttpInfo (string apiKey, string id, string cursor = null)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling TwitterGetTweesApiToolsApi->TweetTimelineUsingGET");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TwitterGetTweesApiToolsApi->TweetTimelineUsingGET");

            var localVarPath = "/base/apitools/tweetTimeline";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", apiKey)); // query parameter
            if (cursor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cursor", cursor)); // query parameter
            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TweetTimelineUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultT>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultT) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultT)));
        }

        /// <summary>
        /// get TweetTimeline Detail get tweetDetail and reply
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="id"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>ResultT</returns>
        public ResultT TweetTimelineUsingPOST (string apiKey, string id, string cursor = null)
        {
             ApiResponse<ResultT> localVarResponse = TweetTimelineUsingPOSTWithHttpInfo(apiKey, id, cursor);
             return localVarResponse.Data;
        }

        /// <summary>
        /// get TweetTimeline Detail get tweetDetail and reply
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="id"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>ApiResponse of ResultT</returns>
        public ApiResponse< ResultT > TweetTimelineUsingPOSTWithHttpInfo (string apiKey, string id, string cursor = null)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling TwitterGetTweesApiToolsApi->TweetTimelineUsingPOST");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TwitterGetTweesApiToolsApi->TweetTimelineUsingPOST");

            var localVarPath = "/base/apitools/tweetTimeline";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", apiKey)); // query parameter
            if (cursor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cursor", cursor)); // query parameter
            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TweetTimelineUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultT>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultT) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultT)));
        }

        /// <summary>
        /// get TweetTimeline Detail get tweetDetail and reply
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="id"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>Task of ResultT</returns>
        public async System.Threading.Tasks.Task<ResultT> TweetTimelineUsingPOSTAsync (string apiKey, string id, string cursor = null)
        {
             ApiResponse<ResultT> localVarResponse = await TweetTimelineUsingPOSTAsyncWithHttpInfo(apiKey, id, cursor);
             return localVarResponse.Data;

        }

        /// <summary>
        /// get TweetTimeline Detail get tweetDetail and reply
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="id"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>Task of ApiResponse (ResultT)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResultT>> TweetTimelineUsingPOSTAsyncWithHttpInfo (string apiKey, string id, string cursor = null)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling TwitterGetTweesApiToolsApi->TweetTimelineUsingPOST");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TwitterGetTweesApiToolsApi->TweetTimelineUsingPOST");

            var localVarPath = "/base/apitools/tweetTimeline";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", apiKey)); // query parameter
            if (cursor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cursor", cursor)); // query parameter
            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TweetTimelineUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultT>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultT) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultT)));
        }

        /// <summary>
        /// get userTweetReply  get user Tweet Reply
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="userId"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>ResultT</returns>
        public ResultT UserTweetReplyUsingGET (string apiKey, string userId, string cursor = null)
        {
             ApiResponse<ResultT> localVarResponse = UserTweetReplyUsingGETWithHttpInfo(apiKey, userId, cursor);
             return localVarResponse.Data;
        }

        /// <summary>
        /// get userTweetReply  get user Tweet Reply
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="userId"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>ApiResponse of ResultT</returns>
        public ApiResponse< ResultT > UserTweetReplyUsingGETWithHttpInfo (string apiKey, string userId, string cursor = null)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling TwitterGetTweesApiToolsApi->UserTweetReplyUsingGET");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling TwitterGetTweesApiToolsApi->UserTweetReplyUsingGET");

            var localVarPath = "/base/apitools/userTweetReply";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", apiKey)); // query parameter
            if (cursor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cursor", cursor)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserTweetReplyUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultT>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultT) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultT)));
        }

        /// <summary>
        /// get userTweetReply  get user Tweet Reply
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="userId"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>Task of ResultT</returns>
        public async System.Threading.Tasks.Task<ResultT> UserTweetReplyUsingGETAsync (string apiKey, string userId, string cursor = null)
        {
             ApiResponse<ResultT> localVarResponse = await UserTweetReplyUsingGETAsyncWithHttpInfo(apiKey, userId, cursor);
             return localVarResponse.Data;

        }

        /// <summary>
        /// get userTweetReply  get user Tweet Reply
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="userId"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>Task of ApiResponse (ResultT)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResultT>> UserTweetReplyUsingGETAsyncWithHttpInfo (string apiKey, string userId, string cursor = null)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling TwitterGetTweesApiToolsApi->UserTweetReplyUsingGET");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling TwitterGetTweesApiToolsApi->UserTweetReplyUsingGET");

            var localVarPath = "/base/apitools/userTweetReply";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", apiKey)); // query parameter
            if (cursor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cursor", cursor)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserTweetReplyUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultT>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultT) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultT)));
        }

        /// <summary>
        /// get userTweetReply  get user Tweet Reply
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="userId"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>ResultT</returns>
        public ResultT UserTweetReplyUsingPOST (string apiKey, string userId, string cursor = null)
        {
             ApiResponse<ResultT> localVarResponse = UserTweetReplyUsingPOSTWithHttpInfo(apiKey, userId, cursor);
             return localVarResponse.Data;
        }

        /// <summary>
        /// get userTweetReply  get user Tweet Reply
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="userId"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>ApiResponse of ResultT</returns>
        public ApiResponse< ResultT > UserTweetReplyUsingPOSTWithHttpInfo (string apiKey, string userId, string cursor = null)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling TwitterGetTweesApiToolsApi->UserTweetReplyUsingPOST");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling TwitterGetTweesApiToolsApi->UserTweetReplyUsingPOST");

            var localVarPath = "/base/apitools/userTweetReply";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", apiKey)); // query parameter
            if (cursor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cursor", cursor)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserTweetReplyUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultT>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultT) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultT)));
        }

        /// <summary>
        /// get userTweetReply  get user Tweet Reply
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="userId"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>Task of ResultT</returns>
        public async System.Threading.Tasks.Task<ResultT> UserTweetReplyUsingPOSTAsync (string apiKey, string userId, string cursor = null)
        {
             ApiResponse<ResultT> localVarResponse = await UserTweetReplyUsingPOSTAsyncWithHttpInfo(apiKey, userId, cursor);
             return localVarResponse.Data;

        }

        /// <summary>
        /// get userTweetReply  get user Tweet Reply
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="userId"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>Task of ApiResponse (ResultT)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResultT>> UserTweetReplyUsingPOSTAsyncWithHttpInfo (string apiKey, string userId, string cursor = null)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling TwitterGetTweesApiToolsApi->UserTweetReplyUsingPOST");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling TwitterGetTweesApiToolsApi->UserTweetReplyUsingPOST");

            var localVarPath = "/base/apitools/userTweetReply";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", apiKey)); // query parameter
            if (cursor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cursor", cursor)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserTweetReplyUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultT>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultT) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultT)));
        }

    }
}
