/* 
 * Utools_twitter_tools_api
 *
 * X (Twitter) API for search, Tweets, users, followers, images, media and more. Supports some v1.1 and v2 API endpoints, with more to come in the future!
 *
 * OpenAPI spec version: 1.1
 * Contact: huojiecs@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITwitterSearchApiToolsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Advanced Search
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="words"></param>
        /// <param name="any">Any of these words (Example: cats dogs �� contains either ��cats�� or ��dogs�� (or both)) (optional)</param>
        /// <param name="cursor">cursor (Example: AACCgACF91iNpzAJxAKAAMX3WI2nL-x4AgABAAAAA ) (optional)</param>
        /// <param name="from">From these accounts (Example: @Twitter �� sent from @Twitter) (optional)</param>
        /// <param name="likes">Minimum likes (Example: 280 �� Tweets with at least 280 likes)) (optional)</param>
        /// <param name="mentioning">Mentioning these accounts (Example: @SFBART @Caltrain �� mentions @SFBART or mentions @Caltrain) (optional)</param>
        /// <param name="none">None of these words (Example: cats dogs �� does not contain ��cats�� and does not contain ��dogs��) (optional)</param>
        /// <param name="phrase">This exact phrase (Example: happy hour �� contains the exact phrase ��happy hour��) (optional)</param>
        /// <param name="replies">Minimum replies (Example: 280 �� Tweets with at least 280 replies) (optional)</param>
        /// <param name="retweets">Minimum retweets (Example: 280 �� Tweets with at least 280 likes) (optional)</param>
        /// <param name="since">start time (Example: 2020-01-01 ) (optional)</param>
        /// <param name="tag">These hashtags (Example: #ThrowbackThursday �� contains the hashtag #ThrowbackThursday) (optional)</param>
        /// <param name="to">To these accounts (Example: @Twitter �� sent in reply to @Twitter) (optional)</param>
        /// <param name="until">end time (Example: 2021-02-02) (optional)</param>
        /// <returns>ResultT</returns>
        ResultT SearchUsingGET (string apiKey, string words, string any = null, string cursor = null, string from = null, string likes = null, string mentioning = null, string none = null, string phrase = null, string replies = null, string retweets = null, string since = null, string tag = null, string to = null, string until = null);

        /// <summary>
        /// Advanced Search
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="words"></param>
        /// <param name="any">Any of these words (Example: cats dogs �� contains either ��cats�� or ��dogs�� (or both)) (optional)</param>
        /// <param name="cursor">cursor (Example: AACCgACF91iNpzAJxAKAAMX3WI2nL-x4AgABAAAAA ) (optional)</param>
        /// <param name="from">From these accounts (Example: @Twitter �� sent from @Twitter) (optional)</param>
        /// <param name="likes">Minimum likes (Example: 280 �� Tweets with at least 280 likes)) (optional)</param>
        /// <param name="mentioning">Mentioning these accounts (Example: @SFBART @Caltrain �� mentions @SFBART or mentions @Caltrain) (optional)</param>
        /// <param name="none">None of these words (Example: cats dogs �� does not contain ��cats�� and does not contain ��dogs��) (optional)</param>
        /// <param name="phrase">This exact phrase (Example: happy hour �� contains the exact phrase ��happy hour��) (optional)</param>
        /// <param name="replies">Minimum replies (Example: 280 �� Tweets with at least 280 replies) (optional)</param>
        /// <param name="retweets">Minimum retweets (Example: 280 �� Tweets with at least 280 likes) (optional)</param>
        /// <param name="since">start time (Example: 2020-01-01 ) (optional)</param>
        /// <param name="tag">These hashtags (Example: #ThrowbackThursday �� contains the hashtag #ThrowbackThursday) (optional)</param>
        /// <param name="to">To these accounts (Example: @Twitter �� sent in reply to @Twitter) (optional)</param>
        /// <param name="until">end time (Example: 2021-02-02) (optional)</param>
        /// <returns>ApiResponse of ResultT</returns>
        ApiResponse<ResultT> SearchUsingGETWithHttpInfo (string apiKey, string words, string any = null, string cursor = null, string from = null, string likes = null, string mentioning = null, string none = null, string phrase = null, string replies = null, string retweets = null, string since = null, string tag = null, string to = null, string until = null);
        /// <summary>
        /// Advanced Search
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="words"></param>
        /// <param name="any">Any of these words (Example: cats dogs �� contains either ��cats�� or ��dogs�� (or both)) (optional)</param>
        /// <param name="cursor">cursor (Example: AACCgACF91iNpzAJxAKAAMX3WI2nL-x4AgABAAAAA ) (optional)</param>
        /// <param name="from">From these accounts (Example: @Twitter �� sent from @Twitter) (optional)</param>
        /// <param name="likes">Minimum likes (Example: 280 �� Tweets with at least 280 likes)) (optional)</param>
        /// <param name="mentioning">Mentioning these accounts (Example: @SFBART @Caltrain �� mentions @SFBART or mentions @Caltrain) (optional)</param>
        /// <param name="none">None of these words (Example: cats dogs �� does not contain ��cats�� and does not contain ��dogs��) (optional)</param>
        /// <param name="phrase">This exact phrase (Example: happy hour �� contains the exact phrase ��happy hour��) (optional)</param>
        /// <param name="replies">Minimum replies (Example: 280 �� Tweets with at least 280 replies) (optional)</param>
        /// <param name="retweets">Minimum retweets (Example: 280 �� Tweets with at least 280 likes) (optional)</param>
        /// <param name="since">start time (Example: 2020-01-01 ) (optional)</param>
        /// <param name="tag">These hashtags (Example: #ThrowbackThursday �� contains the hashtag #ThrowbackThursday) (optional)</param>
        /// <param name="to">To these accounts (Example: @Twitter �� sent in reply to @Twitter) (optional)</param>
        /// <param name="until">end time (Example: 2021-02-02) (optional)</param>
        /// <returns>ResultT</returns>
        ResultT SearchUsingPOST (string apiKey, string words, string any = null, string cursor = null, string from = null, string likes = null, string mentioning = null, string none = null, string phrase = null, string replies = null, string retweets = null, string since = null, string tag = null, string to = null, string until = null);

        /// <summary>
        /// Advanced Search
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="words"></param>
        /// <param name="any">Any of these words (Example: cats dogs �� contains either ��cats�� or ��dogs�� (or both)) (optional)</param>
        /// <param name="cursor">cursor (Example: AACCgACF91iNpzAJxAKAAMX3WI2nL-x4AgABAAAAA ) (optional)</param>
        /// <param name="from">From these accounts (Example: @Twitter �� sent from @Twitter) (optional)</param>
        /// <param name="likes">Minimum likes (Example: 280 �� Tweets with at least 280 likes)) (optional)</param>
        /// <param name="mentioning">Mentioning these accounts (Example: @SFBART @Caltrain �� mentions @SFBART or mentions @Caltrain) (optional)</param>
        /// <param name="none">None of these words (Example: cats dogs �� does not contain ��cats�� and does not contain ��dogs��) (optional)</param>
        /// <param name="phrase">This exact phrase (Example: happy hour �� contains the exact phrase ��happy hour��) (optional)</param>
        /// <param name="replies">Minimum replies (Example: 280 �� Tweets with at least 280 replies) (optional)</param>
        /// <param name="retweets">Minimum retweets (Example: 280 �� Tweets with at least 280 likes) (optional)</param>
        /// <param name="since">start time (Example: 2020-01-01 ) (optional)</param>
        /// <param name="tag">These hashtags (Example: #ThrowbackThursday �� contains the hashtag #ThrowbackThursday) (optional)</param>
        /// <param name="to">To these accounts (Example: @Twitter �� sent in reply to @Twitter) (optional)</param>
        /// <param name="until">end time (Example: 2021-02-02) (optional)</param>
        /// <returns>ApiResponse of ResultT</returns>
        ApiResponse<ResultT> SearchUsingPOSTWithHttpInfo (string apiKey, string words, string any = null, string cursor = null, string from = null, string likes = null, string mentioning = null, string none = null, string phrase = null, string replies = null, string retweets = null, string since = null, string tag = null, string to = null, string until = null);
        /// <summary>
        /// trends Search
        /// </summary>
        /// <remarks>
        /// see details https://developer.twitter.com/en/docs/twitter-api/v1/trends/trends-for-location/api-reference/get-trends-place
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="id"></param>
        /// <returns>ResultT</returns>
        ResultT TrendsUsingGET (string apiKey, string id);

        /// <summary>
        /// trends Search
        /// </summary>
        /// <remarks>
        /// see details https://developer.twitter.com/en/docs/twitter-api/v1/trends/trends-for-location/api-reference/get-trends-place
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="id"></param>
        /// <returns>ApiResponse of ResultT</returns>
        ApiResponse<ResultT> TrendsUsingGETWithHttpInfo (string apiKey, string id);
        /// <summary>
        /// trends Search
        /// </summary>
        /// <remarks>
        /// see details https://developer.twitter.com/en/docs/twitter-api/v1/trends/trends-for-location/api-reference/get-trends-place
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="id"></param>
        /// <returns>ResultT</returns>
        ResultT TrendsUsingPOST (string apiKey, string id);

        /// <summary>
        /// trends Search
        /// </summary>
        /// <remarks>
        /// see details https://developer.twitter.com/en/docs/twitter-api/v1/trends/trends-for-location/api-reference/get-trends-place
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="id"></param>
        /// <returns>ApiResponse of ResultT</returns>
        ApiResponse<ResultT> TrendsUsingPOSTWithHttpInfo (string apiKey, string id);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Advanced Search
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="words"></param>
        /// <param name="any">Any of these words (Example: cats dogs �� contains either ��cats�� or ��dogs�� (or both)) (optional)</param>
        /// <param name="cursor">cursor (Example: AACCgACF91iNpzAJxAKAAMX3WI2nL-x4AgABAAAAA ) (optional)</param>
        /// <param name="from">From these accounts (Example: @Twitter �� sent from @Twitter) (optional)</param>
        /// <param name="likes">Minimum likes (Example: 280 �� Tweets with at least 280 likes)) (optional)</param>
        /// <param name="mentioning">Mentioning these accounts (Example: @SFBART @Caltrain �� mentions @SFBART or mentions @Caltrain) (optional)</param>
        /// <param name="none">None of these words (Example: cats dogs �� does not contain ��cats�� and does not contain ��dogs��) (optional)</param>
        /// <param name="phrase">This exact phrase (Example: happy hour �� contains the exact phrase ��happy hour��) (optional)</param>
        /// <param name="replies">Minimum replies (Example: 280 �� Tweets with at least 280 replies) (optional)</param>
        /// <param name="retweets">Minimum retweets (Example: 280 �� Tweets with at least 280 likes) (optional)</param>
        /// <param name="since">start time (Example: 2020-01-01 ) (optional)</param>
        /// <param name="tag">These hashtags (Example: #ThrowbackThursday �� contains the hashtag #ThrowbackThursday) (optional)</param>
        /// <param name="to">To these accounts (Example: @Twitter �� sent in reply to @Twitter) (optional)</param>
        /// <param name="until">end time (Example: 2021-02-02) (optional)</param>
        /// <returns>Task of ResultT</returns>
        System.Threading.Tasks.Task<ResultT> SearchUsingGETAsync (string apiKey, string words, string any = null, string cursor = null, string from = null, string likes = null, string mentioning = null, string none = null, string phrase = null, string replies = null, string retweets = null, string since = null, string tag = null, string to = null, string until = null);

        /// <summary>
        /// Advanced Search
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="words"></param>
        /// <param name="any">Any of these words (Example: cats dogs �� contains either ��cats�� or ��dogs�� (or both)) (optional)</param>
        /// <param name="cursor">cursor (Example: AACCgACF91iNpzAJxAKAAMX3WI2nL-x4AgABAAAAA ) (optional)</param>
        /// <param name="from">From these accounts (Example: @Twitter �� sent from @Twitter) (optional)</param>
        /// <param name="likes">Minimum likes (Example: 280 �� Tweets with at least 280 likes)) (optional)</param>
        /// <param name="mentioning">Mentioning these accounts (Example: @SFBART @Caltrain �� mentions @SFBART or mentions @Caltrain) (optional)</param>
        /// <param name="none">None of these words (Example: cats dogs �� does not contain ��cats�� and does not contain ��dogs��) (optional)</param>
        /// <param name="phrase">This exact phrase (Example: happy hour �� contains the exact phrase ��happy hour��) (optional)</param>
        /// <param name="replies">Minimum replies (Example: 280 �� Tweets with at least 280 replies) (optional)</param>
        /// <param name="retweets">Minimum retweets (Example: 280 �� Tweets with at least 280 likes) (optional)</param>
        /// <param name="since">start time (Example: 2020-01-01 ) (optional)</param>
        /// <param name="tag">These hashtags (Example: #ThrowbackThursday �� contains the hashtag #ThrowbackThursday) (optional)</param>
        /// <param name="to">To these accounts (Example: @Twitter �� sent in reply to @Twitter) (optional)</param>
        /// <param name="until">end time (Example: 2021-02-02) (optional)</param>
        /// <returns>Task of ApiResponse (ResultT)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResultT>> SearchUsingGETAsyncWithHttpInfo (string apiKey, string words, string any = null, string cursor = null, string from = null, string likes = null, string mentioning = null, string none = null, string phrase = null, string replies = null, string retweets = null, string since = null, string tag = null, string to = null, string until = null);
        /// <summary>
        /// Advanced Search
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="words"></param>
        /// <param name="any">Any of these words (Example: cats dogs �� contains either ��cats�� or ��dogs�� (or both)) (optional)</param>
        /// <param name="cursor">cursor (Example: AACCgACF91iNpzAJxAKAAMX3WI2nL-x4AgABAAAAA ) (optional)</param>
        /// <param name="from">From these accounts (Example: @Twitter �� sent from @Twitter) (optional)</param>
        /// <param name="likes">Minimum likes (Example: 280 �� Tweets with at least 280 likes)) (optional)</param>
        /// <param name="mentioning">Mentioning these accounts (Example: @SFBART @Caltrain �� mentions @SFBART or mentions @Caltrain) (optional)</param>
        /// <param name="none">None of these words (Example: cats dogs �� does not contain ��cats�� and does not contain ��dogs��) (optional)</param>
        /// <param name="phrase">This exact phrase (Example: happy hour �� contains the exact phrase ��happy hour��) (optional)</param>
        /// <param name="replies">Minimum replies (Example: 280 �� Tweets with at least 280 replies) (optional)</param>
        /// <param name="retweets">Minimum retweets (Example: 280 �� Tweets with at least 280 likes) (optional)</param>
        /// <param name="since">start time (Example: 2020-01-01 ) (optional)</param>
        /// <param name="tag">These hashtags (Example: #ThrowbackThursday �� contains the hashtag #ThrowbackThursday) (optional)</param>
        /// <param name="to">To these accounts (Example: @Twitter �� sent in reply to @Twitter) (optional)</param>
        /// <param name="until">end time (Example: 2021-02-02) (optional)</param>
        /// <returns>Task of ResultT</returns>
        System.Threading.Tasks.Task<ResultT> SearchUsingPOSTAsync (string apiKey, string words, string any = null, string cursor = null, string from = null, string likes = null, string mentioning = null, string none = null, string phrase = null, string replies = null, string retweets = null, string since = null, string tag = null, string to = null, string until = null);

        /// <summary>
        /// Advanced Search
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="words"></param>
        /// <param name="any">Any of these words (Example: cats dogs �� contains either ��cats�� or ��dogs�� (or both)) (optional)</param>
        /// <param name="cursor">cursor (Example: AACCgACF91iNpzAJxAKAAMX3WI2nL-x4AgABAAAAA ) (optional)</param>
        /// <param name="from">From these accounts (Example: @Twitter �� sent from @Twitter) (optional)</param>
        /// <param name="likes">Minimum likes (Example: 280 �� Tweets with at least 280 likes)) (optional)</param>
        /// <param name="mentioning">Mentioning these accounts (Example: @SFBART @Caltrain �� mentions @SFBART or mentions @Caltrain) (optional)</param>
        /// <param name="none">None of these words (Example: cats dogs �� does not contain ��cats�� and does not contain ��dogs��) (optional)</param>
        /// <param name="phrase">This exact phrase (Example: happy hour �� contains the exact phrase ��happy hour��) (optional)</param>
        /// <param name="replies">Minimum replies (Example: 280 �� Tweets with at least 280 replies) (optional)</param>
        /// <param name="retweets">Minimum retweets (Example: 280 �� Tweets with at least 280 likes) (optional)</param>
        /// <param name="since">start time (Example: 2020-01-01 ) (optional)</param>
        /// <param name="tag">These hashtags (Example: #ThrowbackThursday �� contains the hashtag #ThrowbackThursday) (optional)</param>
        /// <param name="to">To these accounts (Example: @Twitter �� sent in reply to @Twitter) (optional)</param>
        /// <param name="until">end time (Example: 2021-02-02) (optional)</param>
        /// <returns>Task of ApiResponse (ResultT)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResultT>> SearchUsingPOSTAsyncWithHttpInfo (string apiKey, string words, string any = null, string cursor = null, string from = null, string likes = null, string mentioning = null, string none = null, string phrase = null, string replies = null, string retweets = null, string since = null, string tag = null, string to = null, string until = null);
        /// <summary>
        /// trends Search
        /// </summary>
        /// <remarks>
        /// see details https://developer.twitter.com/en/docs/twitter-api/v1/trends/trends-for-location/api-reference/get-trends-place
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="id"></param>
        /// <returns>Task of ResultT</returns>
        System.Threading.Tasks.Task<ResultT> TrendsUsingGETAsync (string apiKey, string id);

        /// <summary>
        /// trends Search
        /// </summary>
        /// <remarks>
        /// see details https://developer.twitter.com/en/docs/twitter-api/v1/trends/trends-for-location/api-reference/get-trends-place
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (ResultT)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResultT>> TrendsUsingGETAsyncWithHttpInfo (string apiKey, string id);
        /// <summary>
        /// trends Search
        /// </summary>
        /// <remarks>
        /// see details https://developer.twitter.com/en/docs/twitter-api/v1/trends/trends-for-location/api-reference/get-trends-place
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="id"></param>
        /// <returns>Task of ResultT</returns>
        System.Threading.Tasks.Task<ResultT> TrendsUsingPOSTAsync (string apiKey, string id);

        /// <summary>
        /// trends Search
        /// </summary>
        /// <remarks>
        /// see details https://developer.twitter.com/en/docs/twitter-api/v1/trends/trends-for-location/api-reference/get-trends-place
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (ResultT)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResultT>> TrendsUsingPOSTAsyncWithHttpInfo (string apiKey, string id);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TwitterSearchApiToolsApi : ITwitterSearchApiToolsApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TwitterSearchApiToolsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TwitterSearchApiToolsApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TwitterSearchApiToolsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TwitterSearchApiToolsApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Advanced Search 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="words"></param>
        /// <param name="any">Any of these words (Example: cats dogs �� contains either ��cats�� or ��dogs�� (or both)) (optional)</param>
        /// <param name="cursor">cursor (Example: AACCgACF91iNpzAJxAKAAMX3WI2nL-x4AgABAAAAA ) (optional)</param>
        /// <param name="from">From these accounts (Example: @Twitter �� sent from @Twitter) (optional)</param>
        /// <param name="likes">Minimum likes (Example: 280 �� Tweets with at least 280 likes)) (optional)</param>
        /// <param name="mentioning">Mentioning these accounts (Example: @SFBART @Caltrain �� mentions @SFBART or mentions @Caltrain) (optional)</param>
        /// <param name="none">None of these words (Example: cats dogs �� does not contain ��cats�� and does not contain ��dogs��) (optional)</param>
        /// <param name="phrase">This exact phrase (Example: happy hour �� contains the exact phrase ��happy hour��) (optional)</param>
        /// <param name="replies">Minimum replies (Example: 280 �� Tweets with at least 280 replies) (optional)</param>
        /// <param name="retweets">Minimum retweets (Example: 280 �� Tweets with at least 280 likes) (optional)</param>
        /// <param name="since">start time (Example: 2020-01-01 ) (optional)</param>
        /// <param name="tag">These hashtags (Example: #ThrowbackThursday �� contains the hashtag #ThrowbackThursday) (optional)</param>
        /// <param name="to">To these accounts (Example: @Twitter �� sent in reply to @Twitter) (optional)</param>
        /// <param name="until">end time (Example: 2021-02-02) (optional)</param>
        /// <returns>ResultT</returns>
        public ResultT SearchUsingGET (string apiKey, string words, string any = null, string cursor = null, string from = null, string likes = null, string mentioning = null, string none = null, string phrase = null, string replies = null, string retweets = null, string since = null, string tag = null, string to = null, string until = null)
        {
             ApiResponse<ResultT> localVarResponse = SearchUsingGETWithHttpInfo(apiKey, words, any, cursor, from, likes, mentioning, none, phrase, replies, retweets, since, tag, to, until);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Advanced Search 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="words"></param>
        /// <param name="any">Any of these words (Example: cats dogs �� contains either ��cats�� or ��dogs�� (or both)) (optional)</param>
        /// <param name="cursor">cursor (Example: AACCgACF91iNpzAJxAKAAMX3WI2nL-x4AgABAAAAA ) (optional)</param>
        /// <param name="from">From these accounts (Example: @Twitter �� sent from @Twitter) (optional)</param>
        /// <param name="likes">Minimum likes (Example: 280 �� Tweets with at least 280 likes)) (optional)</param>
        /// <param name="mentioning">Mentioning these accounts (Example: @SFBART @Caltrain �� mentions @SFBART or mentions @Caltrain) (optional)</param>
        /// <param name="none">None of these words (Example: cats dogs �� does not contain ��cats�� and does not contain ��dogs��) (optional)</param>
        /// <param name="phrase">This exact phrase (Example: happy hour �� contains the exact phrase ��happy hour��) (optional)</param>
        /// <param name="replies">Minimum replies (Example: 280 �� Tweets with at least 280 replies) (optional)</param>
        /// <param name="retweets">Minimum retweets (Example: 280 �� Tweets with at least 280 likes) (optional)</param>
        /// <param name="since">start time (Example: 2020-01-01 ) (optional)</param>
        /// <param name="tag">These hashtags (Example: #ThrowbackThursday �� contains the hashtag #ThrowbackThursday) (optional)</param>
        /// <param name="to">To these accounts (Example: @Twitter �� sent in reply to @Twitter) (optional)</param>
        /// <param name="until">end time (Example: 2021-02-02) (optional)</param>
        /// <returns>ApiResponse of ResultT</returns>
        public ApiResponse< ResultT > SearchUsingGETWithHttpInfo (string apiKey, string words, string any = null, string cursor = null, string from = null, string likes = null, string mentioning = null, string none = null, string phrase = null, string replies = null, string retweets = null, string since = null, string tag = null, string to = null, string until = null)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling TwitterSearchApiToolsApi->SearchUsingGET");
            // verify the required parameter 'words' is set
            if (words == null)
                throw new ApiException(400, "Missing required parameter 'words' when calling TwitterSearchApiToolsApi->SearchUsingGET");

            var localVarPath = "/base/apitools/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (any != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "any", any)); // query parameter
            if (apiKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", apiKey)); // query parameter
            if (cursor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cursor", cursor)); // query parameter
            if (from != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "from", from)); // query parameter
            if (likes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "likes", likes)); // query parameter
            if (mentioning != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "mentioning", mentioning)); // query parameter
            if (none != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "none", none)); // query parameter
            if (phrase != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "phrase", phrase)); // query parameter
            if (replies != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "replies", replies)); // query parameter
            if (retweets != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "retweets", retweets)); // query parameter
            if (since != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "since", since)); // query parameter
            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tag", tag)); // query parameter
            if (to != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "to", to)); // query parameter
            if (until != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "until", until)); // query parameter
            if (words != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "words", words)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultT>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultT) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultT)));
        }

        /// <summary>
        /// Advanced Search 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="words"></param>
        /// <param name="any">Any of these words (Example: cats dogs �� contains either ��cats�� or ��dogs�� (or both)) (optional)</param>
        /// <param name="cursor">cursor (Example: AACCgACF91iNpzAJxAKAAMX3WI2nL-x4AgABAAAAA ) (optional)</param>
        /// <param name="from">From these accounts (Example: @Twitter �� sent from @Twitter) (optional)</param>
        /// <param name="likes">Minimum likes (Example: 280 �� Tweets with at least 280 likes)) (optional)</param>
        /// <param name="mentioning">Mentioning these accounts (Example: @SFBART @Caltrain �� mentions @SFBART or mentions @Caltrain) (optional)</param>
        /// <param name="none">None of these words (Example: cats dogs �� does not contain ��cats�� and does not contain ��dogs��) (optional)</param>
        /// <param name="phrase">This exact phrase (Example: happy hour �� contains the exact phrase ��happy hour��) (optional)</param>
        /// <param name="replies">Minimum replies (Example: 280 �� Tweets with at least 280 replies) (optional)</param>
        /// <param name="retweets">Minimum retweets (Example: 280 �� Tweets with at least 280 likes) (optional)</param>
        /// <param name="since">start time (Example: 2020-01-01 ) (optional)</param>
        /// <param name="tag">These hashtags (Example: #ThrowbackThursday �� contains the hashtag #ThrowbackThursday) (optional)</param>
        /// <param name="to">To these accounts (Example: @Twitter �� sent in reply to @Twitter) (optional)</param>
        /// <param name="until">end time (Example: 2021-02-02) (optional)</param>
        /// <returns>Task of ResultT</returns>
        public async System.Threading.Tasks.Task<ResultT> SearchUsingGETAsync (string apiKey, string words, string any = null, string cursor = null, string from = null, string likes = null, string mentioning = null, string none = null, string phrase = null, string replies = null, string retweets = null, string since = null, string tag = null, string to = null, string until = null)
        {
             ApiResponse<ResultT> localVarResponse = await SearchUsingGETAsyncWithHttpInfo(apiKey, words, any, cursor, from, likes, mentioning, none, phrase, replies, retweets, since, tag, to, until);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Advanced Search 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="words"></param>
        /// <param name="any">Any of these words (Example: cats dogs �� contains either ��cats�� or ��dogs�� (or both)) (optional)</param>
        /// <param name="cursor">cursor (Example: AACCgACF91iNpzAJxAKAAMX3WI2nL-x4AgABAAAAA ) (optional)</param>
        /// <param name="from">From these accounts (Example: @Twitter �� sent from @Twitter) (optional)</param>
        /// <param name="likes">Minimum likes (Example: 280 �� Tweets with at least 280 likes)) (optional)</param>
        /// <param name="mentioning">Mentioning these accounts (Example: @SFBART @Caltrain �� mentions @SFBART or mentions @Caltrain) (optional)</param>
        /// <param name="none">None of these words (Example: cats dogs �� does not contain ��cats�� and does not contain ��dogs��) (optional)</param>
        /// <param name="phrase">This exact phrase (Example: happy hour �� contains the exact phrase ��happy hour��) (optional)</param>
        /// <param name="replies">Minimum replies (Example: 280 �� Tweets with at least 280 replies) (optional)</param>
        /// <param name="retweets">Minimum retweets (Example: 280 �� Tweets with at least 280 likes) (optional)</param>
        /// <param name="since">start time (Example: 2020-01-01 ) (optional)</param>
        /// <param name="tag">These hashtags (Example: #ThrowbackThursday �� contains the hashtag #ThrowbackThursday) (optional)</param>
        /// <param name="to">To these accounts (Example: @Twitter �� sent in reply to @Twitter) (optional)</param>
        /// <param name="until">end time (Example: 2021-02-02) (optional)</param>
        /// <returns>Task of ApiResponse (ResultT)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResultT>> SearchUsingGETAsyncWithHttpInfo (string apiKey, string words, string any = null, string cursor = null, string from = null, string likes = null, string mentioning = null, string none = null, string phrase = null, string replies = null, string retweets = null, string since = null, string tag = null, string to = null, string until = null)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling TwitterSearchApiToolsApi->SearchUsingGET");
            // verify the required parameter 'words' is set
            if (words == null)
                throw new ApiException(400, "Missing required parameter 'words' when calling TwitterSearchApiToolsApi->SearchUsingGET");

            var localVarPath = "/base/apitools/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (any != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "any", any)); // query parameter
            if (apiKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", apiKey)); // query parameter
            if (cursor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cursor", cursor)); // query parameter
            if (from != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "from", from)); // query parameter
            if (likes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "likes", likes)); // query parameter
            if (mentioning != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "mentioning", mentioning)); // query parameter
            if (none != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "none", none)); // query parameter
            if (phrase != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "phrase", phrase)); // query parameter
            if (replies != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "replies", replies)); // query parameter
            if (retweets != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "retweets", retweets)); // query parameter
            if (since != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "since", since)); // query parameter
            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tag", tag)); // query parameter
            if (to != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "to", to)); // query parameter
            if (until != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "until", until)); // query parameter
            if (words != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "words", words)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultT>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultT) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultT)));
        }

        /// <summary>
        /// Advanced Search 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="words"></param>
        /// <param name="any">Any of these words (Example: cats dogs �� contains either ��cats�� or ��dogs�� (or both)) (optional)</param>
        /// <param name="cursor">cursor (Example: AACCgACF91iNpzAJxAKAAMX3WI2nL-x4AgABAAAAA ) (optional)</param>
        /// <param name="from">From these accounts (Example: @Twitter �� sent from @Twitter) (optional)</param>
        /// <param name="likes">Minimum likes (Example: 280 �� Tweets with at least 280 likes)) (optional)</param>
        /// <param name="mentioning">Mentioning these accounts (Example: @SFBART @Caltrain �� mentions @SFBART or mentions @Caltrain) (optional)</param>
        /// <param name="none">None of these words (Example: cats dogs �� does not contain ��cats�� and does not contain ��dogs��) (optional)</param>
        /// <param name="phrase">This exact phrase (Example: happy hour �� contains the exact phrase ��happy hour��) (optional)</param>
        /// <param name="replies">Minimum replies (Example: 280 �� Tweets with at least 280 replies) (optional)</param>
        /// <param name="retweets">Minimum retweets (Example: 280 �� Tweets with at least 280 likes) (optional)</param>
        /// <param name="since">start time (Example: 2020-01-01 ) (optional)</param>
        /// <param name="tag">These hashtags (Example: #ThrowbackThursday �� contains the hashtag #ThrowbackThursday) (optional)</param>
        /// <param name="to">To these accounts (Example: @Twitter �� sent in reply to @Twitter) (optional)</param>
        /// <param name="until">end time (Example: 2021-02-02) (optional)</param>
        /// <returns>ResultT</returns>
        public ResultT SearchUsingPOST (string apiKey, string words, string any = null, string cursor = null, string from = null, string likes = null, string mentioning = null, string none = null, string phrase = null, string replies = null, string retweets = null, string since = null, string tag = null, string to = null, string until = null)
        {
             ApiResponse<ResultT> localVarResponse = SearchUsingPOSTWithHttpInfo(apiKey, words, any, cursor, from, likes, mentioning, none, phrase, replies, retweets, since, tag, to, until);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Advanced Search 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="words"></param>
        /// <param name="any">Any of these words (Example: cats dogs �� contains either ��cats�� or ��dogs�� (or both)) (optional)</param>
        /// <param name="cursor">cursor (Example: AACCgACF91iNpzAJxAKAAMX3WI2nL-x4AgABAAAAA ) (optional)</param>
        /// <param name="from">From these accounts (Example: @Twitter �� sent from @Twitter) (optional)</param>
        /// <param name="likes">Minimum likes (Example: 280 �� Tweets with at least 280 likes)) (optional)</param>
        /// <param name="mentioning">Mentioning these accounts (Example: @SFBART @Caltrain �� mentions @SFBART or mentions @Caltrain) (optional)</param>
        /// <param name="none">None of these words (Example: cats dogs �� does not contain ��cats�� and does not contain ��dogs��) (optional)</param>
        /// <param name="phrase">This exact phrase (Example: happy hour �� contains the exact phrase ��happy hour��) (optional)</param>
        /// <param name="replies">Minimum replies (Example: 280 �� Tweets with at least 280 replies) (optional)</param>
        /// <param name="retweets">Minimum retweets (Example: 280 �� Tweets with at least 280 likes) (optional)</param>
        /// <param name="since">start time (Example: 2020-01-01 ) (optional)</param>
        /// <param name="tag">These hashtags (Example: #ThrowbackThursday �� contains the hashtag #ThrowbackThursday) (optional)</param>
        /// <param name="to">To these accounts (Example: @Twitter �� sent in reply to @Twitter) (optional)</param>
        /// <param name="until">end time (Example: 2021-02-02) (optional)</param>
        /// <returns>ApiResponse of ResultT</returns>
        public ApiResponse< ResultT > SearchUsingPOSTWithHttpInfo (string apiKey, string words, string any = null, string cursor = null, string from = null, string likes = null, string mentioning = null, string none = null, string phrase = null, string replies = null, string retweets = null, string since = null, string tag = null, string to = null, string until = null)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling TwitterSearchApiToolsApi->SearchUsingPOST");
            // verify the required parameter 'words' is set
            if (words == null)
                throw new ApiException(400, "Missing required parameter 'words' when calling TwitterSearchApiToolsApi->SearchUsingPOST");

            var localVarPath = "/base/apitools/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (any != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "any", any)); // query parameter
            if (apiKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", apiKey)); // query parameter
            if (cursor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cursor", cursor)); // query parameter
            if (from != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "from", from)); // query parameter
            if (likes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "likes", likes)); // query parameter
            if (mentioning != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "mentioning", mentioning)); // query parameter
            if (none != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "none", none)); // query parameter
            if (phrase != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "phrase", phrase)); // query parameter
            if (replies != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "replies", replies)); // query parameter
            if (retweets != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "retweets", retweets)); // query parameter
            if (since != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "since", since)); // query parameter
            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tag", tag)); // query parameter
            if (to != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "to", to)); // query parameter
            if (until != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "until", until)); // query parameter
            if (words != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "words", words)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultT>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultT) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultT)));
        }

        /// <summary>
        /// Advanced Search 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="words"></param>
        /// <param name="any">Any of these words (Example: cats dogs �� contains either ��cats�� or ��dogs�� (or both)) (optional)</param>
        /// <param name="cursor">cursor (Example: AACCgACF91iNpzAJxAKAAMX3WI2nL-x4AgABAAAAA ) (optional)</param>
        /// <param name="from">From these accounts (Example: @Twitter �� sent from @Twitter) (optional)</param>
        /// <param name="likes">Minimum likes (Example: 280 �� Tweets with at least 280 likes)) (optional)</param>
        /// <param name="mentioning">Mentioning these accounts (Example: @SFBART @Caltrain �� mentions @SFBART or mentions @Caltrain) (optional)</param>
        /// <param name="none">None of these words (Example: cats dogs �� does not contain ��cats�� and does not contain ��dogs��) (optional)</param>
        /// <param name="phrase">This exact phrase (Example: happy hour �� contains the exact phrase ��happy hour��) (optional)</param>
        /// <param name="replies">Minimum replies (Example: 280 �� Tweets with at least 280 replies) (optional)</param>
        /// <param name="retweets">Minimum retweets (Example: 280 �� Tweets with at least 280 likes) (optional)</param>
        /// <param name="since">start time (Example: 2020-01-01 ) (optional)</param>
        /// <param name="tag">These hashtags (Example: #ThrowbackThursday �� contains the hashtag #ThrowbackThursday) (optional)</param>
        /// <param name="to">To these accounts (Example: @Twitter �� sent in reply to @Twitter) (optional)</param>
        /// <param name="until">end time (Example: 2021-02-02) (optional)</param>
        /// <returns>Task of ResultT</returns>
        public async System.Threading.Tasks.Task<ResultT> SearchUsingPOSTAsync (string apiKey, string words, string any = null, string cursor = null, string from = null, string likes = null, string mentioning = null, string none = null, string phrase = null, string replies = null, string retweets = null, string since = null, string tag = null, string to = null, string until = null)
        {
             ApiResponse<ResultT> localVarResponse = await SearchUsingPOSTAsyncWithHttpInfo(apiKey, words, any, cursor, from, likes, mentioning, none, phrase, replies, retweets, since, tag, to, until);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Advanced Search 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="words"></param>
        /// <param name="any">Any of these words (Example: cats dogs �� contains either ��cats�� or ��dogs�� (or both)) (optional)</param>
        /// <param name="cursor">cursor (Example: AACCgACF91iNpzAJxAKAAMX3WI2nL-x4AgABAAAAA ) (optional)</param>
        /// <param name="from">From these accounts (Example: @Twitter �� sent from @Twitter) (optional)</param>
        /// <param name="likes">Minimum likes (Example: 280 �� Tweets with at least 280 likes)) (optional)</param>
        /// <param name="mentioning">Mentioning these accounts (Example: @SFBART @Caltrain �� mentions @SFBART or mentions @Caltrain) (optional)</param>
        /// <param name="none">None of these words (Example: cats dogs �� does not contain ��cats�� and does not contain ��dogs��) (optional)</param>
        /// <param name="phrase">This exact phrase (Example: happy hour �� contains the exact phrase ��happy hour��) (optional)</param>
        /// <param name="replies">Minimum replies (Example: 280 �� Tweets with at least 280 replies) (optional)</param>
        /// <param name="retweets">Minimum retweets (Example: 280 �� Tweets with at least 280 likes) (optional)</param>
        /// <param name="since">start time (Example: 2020-01-01 ) (optional)</param>
        /// <param name="tag">These hashtags (Example: #ThrowbackThursday �� contains the hashtag #ThrowbackThursday) (optional)</param>
        /// <param name="to">To these accounts (Example: @Twitter �� sent in reply to @Twitter) (optional)</param>
        /// <param name="until">end time (Example: 2021-02-02) (optional)</param>
        /// <returns>Task of ApiResponse (ResultT)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResultT>> SearchUsingPOSTAsyncWithHttpInfo (string apiKey, string words, string any = null, string cursor = null, string from = null, string likes = null, string mentioning = null, string none = null, string phrase = null, string replies = null, string retweets = null, string since = null, string tag = null, string to = null, string until = null)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling TwitterSearchApiToolsApi->SearchUsingPOST");
            // verify the required parameter 'words' is set
            if (words == null)
                throw new ApiException(400, "Missing required parameter 'words' when calling TwitterSearchApiToolsApi->SearchUsingPOST");

            var localVarPath = "/base/apitools/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (any != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "any", any)); // query parameter
            if (apiKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", apiKey)); // query parameter
            if (cursor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cursor", cursor)); // query parameter
            if (from != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "from", from)); // query parameter
            if (likes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "likes", likes)); // query parameter
            if (mentioning != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "mentioning", mentioning)); // query parameter
            if (none != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "none", none)); // query parameter
            if (phrase != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "phrase", phrase)); // query parameter
            if (replies != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "replies", replies)); // query parameter
            if (retweets != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "retweets", retweets)); // query parameter
            if (since != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "since", since)); // query parameter
            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tag", tag)); // query parameter
            if (to != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "to", to)); // query parameter
            if (until != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "until", until)); // query parameter
            if (words != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "words", words)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultT>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultT) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultT)));
        }

        /// <summary>
        /// trends Search see details https://developer.twitter.com/en/docs/twitter-api/v1/trends/trends-for-location/api-reference/get-trends-place
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="id"></param>
        /// <returns>ResultT</returns>
        public ResultT TrendsUsingGET (string apiKey, string id)
        {
             ApiResponse<ResultT> localVarResponse = TrendsUsingGETWithHttpInfo(apiKey, id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// trends Search see details https://developer.twitter.com/en/docs/twitter-api/v1/trends/trends-for-location/api-reference/get-trends-place
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="id"></param>
        /// <returns>ApiResponse of ResultT</returns>
        public ApiResponse< ResultT > TrendsUsingGETWithHttpInfo (string apiKey, string id)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling TwitterSearchApiToolsApi->TrendsUsingGET");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TwitterSearchApiToolsApi->TrendsUsingGET");

            var localVarPath = "/base/apitools/trends";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", apiKey)); // query parameter
            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TrendsUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultT>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultT) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultT)));
        }

        /// <summary>
        /// trends Search see details https://developer.twitter.com/en/docs/twitter-api/v1/trends/trends-for-location/api-reference/get-trends-place
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="id"></param>
        /// <returns>Task of ResultT</returns>
        public async System.Threading.Tasks.Task<ResultT> TrendsUsingGETAsync (string apiKey, string id)
        {
             ApiResponse<ResultT> localVarResponse = await TrendsUsingGETAsyncWithHttpInfo(apiKey, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// trends Search see details https://developer.twitter.com/en/docs/twitter-api/v1/trends/trends-for-location/api-reference/get-trends-place
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (ResultT)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResultT>> TrendsUsingGETAsyncWithHttpInfo (string apiKey, string id)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling TwitterSearchApiToolsApi->TrendsUsingGET");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TwitterSearchApiToolsApi->TrendsUsingGET");

            var localVarPath = "/base/apitools/trends";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", apiKey)); // query parameter
            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TrendsUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultT>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultT) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultT)));
        }

        /// <summary>
        /// trends Search see details https://developer.twitter.com/en/docs/twitter-api/v1/trends/trends-for-location/api-reference/get-trends-place
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="id"></param>
        /// <returns>ResultT</returns>
        public ResultT TrendsUsingPOST (string apiKey, string id)
        {
             ApiResponse<ResultT> localVarResponse = TrendsUsingPOSTWithHttpInfo(apiKey, id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// trends Search see details https://developer.twitter.com/en/docs/twitter-api/v1/trends/trends-for-location/api-reference/get-trends-place
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="id"></param>
        /// <returns>ApiResponse of ResultT</returns>
        public ApiResponse< ResultT > TrendsUsingPOSTWithHttpInfo (string apiKey, string id)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling TwitterSearchApiToolsApi->TrendsUsingPOST");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TwitterSearchApiToolsApi->TrendsUsingPOST");

            var localVarPath = "/base/apitools/trends";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", apiKey)); // query parameter
            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TrendsUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultT>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultT) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultT)));
        }

        /// <summary>
        /// trends Search see details https://developer.twitter.com/en/docs/twitter-api/v1/trends/trends-for-location/api-reference/get-trends-place
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="id"></param>
        /// <returns>Task of ResultT</returns>
        public async System.Threading.Tasks.Task<ResultT> TrendsUsingPOSTAsync (string apiKey, string id)
        {
             ApiResponse<ResultT> localVarResponse = await TrendsUsingPOSTAsyncWithHttpInfo(apiKey, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// trends Search see details https://developer.twitter.com/en/docs/twitter-api/v1/trends/trends-for-location/api-reference/get-trends-place
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (ResultT)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResultT>> TrendsUsingPOSTAsyncWithHttpInfo (string apiKey, string id)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling TwitterSearchApiToolsApi->TrendsUsingPOST");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TwitterSearchApiToolsApi->TrendsUsingPOST");

            var localVarPath = "/base/apitools/trends";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", apiKey)); // query parameter
            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TrendsUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultT>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultT) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultT)));
        }

    }
}
