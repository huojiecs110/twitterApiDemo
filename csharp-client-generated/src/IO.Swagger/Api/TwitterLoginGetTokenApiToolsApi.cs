/* 
 * Utools_twitter_tools_api
 *
 * X (Twitter) API for search, Tweets, users, followers, images, media and more. Supports some v1.1 and v2 API endpoints, with more to come in the future!
 *
 * OpenAPI spec version: 1.1
 * Contact: huojiecs@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITwitterLoginGetTokenApiToolsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// login by code
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="code"></param>
        /// <returns>ResultT</returns>
        ResultT Login2FAUsingGET (string apiKey, string code);

        /// <summary>
        /// login by code
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="code"></param>
        /// <returns>ApiResponse of ResultT</returns>
        ApiResponse<ResultT> Login2FAUsingGETWithHttpInfo (string apiKey, string code);
        /// <summary>
        /// login by code
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="code"></param>
        /// <returns>ResultT</returns>
        ResultT Login2FAUsingPOST (string apiKey, string code);

        /// <summary>
        /// login by code
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="code"></param>
        /// <returns>ApiResponse of ResultT</returns>
        ApiResponse<ResultT> Login2FAUsingPOSTWithHttpInfo (string apiKey, string code);
        /// <summary>
        /// login by userName and passwrd
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="email"></param>
        /// <param name="password"></param>
        /// <param name="screenName"></param>
        /// <returns>ResultT</returns>
        ResultT LoginUsingGET (string apiKey, string email, string password, string screenName);

        /// <summary>
        /// login by userName and passwrd
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="email"></param>
        /// <param name="password"></param>
        /// <param name="screenName"></param>
        /// <returns>ApiResponse of ResultT</returns>
        ApiResponse<ResultT> LoginUsingGETWithHttpInfo (string apiKey, string email, string password, string screenName);
        /// <summary>
        /// login by userName and passwrd
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="email"></param>
        /// <param name="password"></param>
        /// <param name="screenName"></param>
        /// <returns>ResultT</returns>
        ResultT LoginUsingPOST (string apiKey, string email, string password, string screenName);

        /// <summary>
        /// login by userName and passwrd
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="email"></param>
        /// <param name="password"></param>
        /// <param name="screenName"></param>
        /// <returns>ApiResponse of ResultT</returns>
        ApiResponse<ResultT> LoginUsingPOSTWithHttpInfo (string apiKey, string email, string password, string screenName);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// login by code
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="code"></param>
        /// <returns>Task of ResultT</returns>
        System.Threading.Tasks.Task<ResultT> Login2FAUsingGETAsync (string apiKey, string code);

        /// <summary>
        /// login by code
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="code"></param>
        /// <returns>Task of ApiResponse (ResultT)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResultT>> Login2FAUsingGETAsyncWithHttpInfo (string apiKey, string code);
        /// <summary>
        /// login by code
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="code"></param>
        /// <returns>Task of ResultT</returns>
        System.Threading.Tasks.Task<ResultT> Login2FAUsingPOSTAsync (string apiKey, string code);

        /// <summary>
        /// login by code
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="code"></param>
        /// <returns>Task of ApiResponse (ResultT)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResultT>> Login2FAUsingPOSTAsyncWithHttpInfo (string apiKey, string code);
        /// <summary>
        /// login by userName and passwrd
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="email"></param>
        /// <param name="password"></param>
        /// <param name="screenName"></param>
        /// <returns>Task of ResultT</returns>
        System.Threading.Tasks.Task<ResultT> LoginUsingGETAsync (string apiKey, string email, string password, string screenName);

        /// <summary>
        /// login by userName and passwrd
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="email"></param>
        /// <param name="password"></param>
        /// <param name="screenName"></param>
        /// <returns>Task of ApiResponse (ResultT)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResultT>> LoginUsingGETAsyncWithHttpInfo (string apiKey, string email, string password, string screenName);
        /// <summary>
        /// login by userName and passwrd
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="email"></param>
        /// <param name="password"></param>
        /// <param name="screenName"></param>
        /// <returns>Task of ResultT</returns>
        System.Threading.Tasks.Task<ResultT> LoginUsingPOSTAsync (string apiKey, string email, string password, string screenName);

        /// <summary>
        /// login by userName and passwrd
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="email"></param>
        /// <param name="password"></param>
        /// <param name="screenName"></param>
        /// <returns>Task of ApiResponse (ResultT)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResultT>> LoginUsingPOSTAsyncWithHttpInfo (string apiKey, string email, string password, string screenName);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TwitterLoginGetTokenApiToolsApi : ITwitterLoginGetTokenApiToolsApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TwitterLoginGetTokenApiToolsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TwitterLoginGetTokenApiToolsApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TwitterLoginGetTokenApiToolsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TwitterLoginGetTokenApiToolsApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// login by code 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="code"></param>
        /// <returns>ResultT</returns>
        public ResultT Login2FAUsingGET (string apiKey, string code)
        {
             ApiResponse<ResultT> localVarResponse = Login2FAUsingGETWithHttpInfo(apiKey, code);
             return localVarResponse.Data;
        }

        /// <summary>
        /// login by code 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="code"></param>
        /// <returns>ApiResponse of ResultT</returns>
        public ApiResponse< ResultT > Login2FAUsingGETWithHttpInfo (string apiKey, string code)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling TwitterLoginGetTokenApiToolsApi->Login2FAUsingGET");
            // verify the required parameter 'code' is set
            if (code == null)
                throw new ApiException(400, "Missing required parameter 'code' when calling TwitterLoginGetTokenApiToolsApi->Login2FAUsingGET");

            var localVarPath = "/base/apitools/login2FA";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", apiKey)); // query parameter
            if (code != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "code", code)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Login2FAUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultT>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultT) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultT)));
        }

        /// <summary>
        /// login by code 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="code"></param>
        /// <returns>Task of ResultT</returns>
        public async System.Threading.Tasks.Task<ResultT> Login2FAUsingGETAsync (string apiKey, string code)
        {
             ApiResponse<ResultT> localVarResponse = await Login2FAUsingGETAsyncWithHttpInfo(apiKey, code);
             return localVarResponse.Data;

        }

        /// <summary>
        /// login by code 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="code"></param>
        /// <returns>Task of ApiResponse (ResultT)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResultT>> Login2FAUsingGETAsyncWithHttpInfo (string apiKey, string code)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling TwitterLoginGetTokenApiToolsApi->Login2FAUsingGET");
            // verify the required parameter 'code' is set
            if (code == null)
                throw new ApiException(400, "Missing required parameter 'code' when calling TwitterLoginGetTokenApiToolsApi->Login2FAUsingGET");

            var localVarPath = "/base/apitools/login2FA";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", apiKey)); // query parameter
            if (code != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "code", code)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Login2FAUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultT>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultT) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultT)));
        }

        /// <summary>
        /// login by code 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="code"></param>
        /// <returns>ResultT</returns>
        public ResultT Login2FAUsingPOST (string apiKey, string code)
        {
             ApiResponse<ResultT> localVarResponse = Login2FAUsingPOSTWithHttpInfo(apiKey, code);
             return localVarResponse.Data;
        }

        /// <summary>
        /// login by code 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="code"></param>
        /// <returns>ApiResponse of ResultT</returns>
        public ApiResponse< ResultT > Login2FAUsingPOSTWithHttpInfo (string apiKey, string code)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling TwitterLoginGetTokenApiToolsApi->Login2FAUsingPOST");
            // verify the required parameter 'code' is set
            if (code == null)
                throw new ApiException(400, "Missing required parameter 'code' when calling TwitterLoginGetTokenApiToolsApi->Login2FAUsingPOST");

            var localVarPath = "/base/apitools/login2FA";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", apiKey)); // query parameter
            if (code != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "code", code)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Login2FAUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultT>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultT) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultT)));
        }

        /// <summary>
        /// login by code 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="code"></param>
        /// <returns>Task of ResultT</returns>
        public async System.Threading.Tasks.Task<ResultT> Login2FAUsingPOSTAsync (string apiKey, string code)
        {
             ApiResponse<ResultT> localVarResponse = await Login2FAUsingPOSTAsyncWithHttpInfo(apiKey, code);
             return localVarResponse.Data;

        }

        /// <summary>
        /// login by code 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="code"></param>
        /// <returns>Task of ApiResponse (ResultT)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResultT>> Login2FAUsingPOSTAsyncWithHttpInfo (string apiKey, string code)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling TwitterLoginGetTokenApiToolsApi->Login2FAUsingPOST");
            // verify the required parameter 'code' is set
            if (code == null)
                throw new ApiException(400, "Missing required parameter 'code' when calling TwitterLoginGetTokenApiToolsApi->Login2FAUsingPOST");

            var localVarPath = "/base/apitools/login2FA";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", apiKey)); // query parameter
            if (code != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "code", code)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Login2FAUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultT>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultT) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultT)));
        }

        /// <summary>
        /// login by userName and passwrd 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="email"></param>
        /// <param name="password"></param>
        /// <param name="screenName"></param>
        /// <returns>ResultT</returns>
        public ResultT LoginUsingGET (string apiKey, string email, string password, string screenName)
        {
             ApiResponse<ResultT> localVarResponse = LoginUsingGETWithHttpInfo(apiKey, email, password, screenName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// login by userName and passwrd 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="email"></param>
        /// <param name="password"></param>
        /// <param name="screenName"></param>
        /// <returns>ApiResponse of ResultT</returns>
        public ApiResponse< ResultT > LoginUsingGETWithHttpInfo (string apiKey, string email, string password, string screenName)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling TwitterLoginGetTokenApiToolsApi->LoginUsingGET");
            // verify the required parameter 'email' is set
            if (email == null)
                throw new ApiException(400, "Missing required parameter 'email' when calling TwitterLoginGetTokenApiToolsApi->LoginUsingGET");
            // verify the required parameter 'password' is set
            if (password == null)
                throw new ApiException(400, "Missing required parameter 'password' when calling TwitterLoginGetTokenApiToolsApi->LoginUsingGET");
            // verify the required parameter 'screenName' is set
            if (screenName == null)
                throw new ApiException(400, "Missing required parameter 'screenName' when calling TwitterLoginGetTokenApiToolsApi->LoginUsingGET");

            var localVarPath = "/base/apitools/login";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", apiKey)); // query parameter
            if (email != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "email", email)); // query parameter
            if (password != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "password", password)); // query parameter
            if (screenName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "screenName", screenName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LoginUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultT>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultT) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultT)));
        }

        /// <summary>
        /// login by userName and passwrd 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="email"></param>
        /// <param name="password"></param>
        /// <param name="screenName"></param>
        /// <returns>Task of ResultT</returns>
        public async System.Threading.Tasks.Task<ResultT> LoginUsingGETAsync (string apiKey, string email, string password, string screenName)
        {
             ApiResponse<ResultT> localVarResponse = await LoginUsingGETAsyncWithHttpInfo(apiKey, email, password, screenName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// login by userName and passwrd 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="email"></param>
        /// <param name="password"></param>
        /// <param name="screenName"></param>
        /// <returns>Task of ApiResponse (ResultT)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResultT>> LoginUsingGETAsyncWithHttpInfo (string apiKey, string email, string password, string screenName)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling TwitterLoginGetTokenApiToolsApi->LoginUsingGET");
            // verify the required parameter 'email' is set
            if (email == null)
                throw new ApiException(400, "Missing required parameter 'email' when calling TwitterLoginGetTokenApiToolsApi->LoginUsingGET");
            // verify the required parameter 'password' is set
            if (password == null)
                throw new ApiException(400, "Missing required parameter 'password' when calling TwitterLoginGetTokenApiToolsApi->LoginUsingGET");
            // verify the required parameter 'screenName' is set
            if (screenName == null)
                throw new ApiException(400, "Missing required parameter 'screenName' when calling TwitterLoginGetTokenApiToolsApi->LoginUsingGET");

            var localVarPath = "/base/apitools/login";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", apiKey)); // query parameter
            if (email != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "email", email)); // query parameter
            if (password != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "password", password)); // query parameter
            if (screenName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "screenName", screenName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LoginUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultT>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultT) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultT)));
        }

        /// <summary>
        /// login by userName and passwrd 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="email"></param>
        /// <param name="password"></param>
        /// <param name="screenName"></param>
        /// <returns>ResultT</returns>
        public ResultT LoginUsingPOST (string apiKey, string email, string password, string screenName)
        {
             ApiResponse<ResultT> localVarResponse = LoginUsingPOSTWithHttpInfo(apiKey, email, password, screenName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// login by userName and passwrd 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="email"></param>
        /// <param name="password"></param>
        /// <param name="screenName"></param>
        /// <returns>ApiResponse of ResultT</returns>
        public ApiResponse< ResultT > LoginUsingPOSTWithHttpInfo (string apiKey, string email, string password, string screenName)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling TwitterLoginGetTokenApiToolsApi->LoginUsingPOST");
            // verify the required parameter 'email' is set
            if (email == null)
                throw new ApiException(400, "Missing required parameter 'email' when calling TwitterLoginGetTokenApiToolsApi->LoginUsingPOST");
            // verify the required parameter 'password' is set
            if (password == null)
                throw new ApiException(400, "Missing required parameter 'password' when calling TwitterLoginGetTokenApiToolsApi->LoginUsingPOST");
            // verify the required parameter 'screenName' is set
            if (screenName == null)
                throw new ApiException(400, "Missing required parameter 'screenName' when calling TwitterLoginGetTokenApiToolsApi->LoginUsingPOST");

            var localVarPath = "/base/apitools/login";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", apiKey)); // query parameter
            if (email != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "email", email)); // query parameter
            if (password != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "password", password)); // query parameter
            if (screenName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "screenName", screenName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LoginUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultT>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultT) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultT)));
        }

        /// <summary>
        /// login by userName and passwrd 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="email"></param>
        /// <param name="password"></param>
        /// <param name="screenName"></param>
        /// <returns>Task of ResultT</returns>
        public async System.Threading.Tasks.Task<ResultT> LoginUsingPOSTAsync (string apiKey, string email, string password, string screenName)
        {
             ApiResponse<ResultT> localVarResponse = await LoginUsingPOSTAsyncWithHttpInfo(apiKey, email, password, screenName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// login by userName and passwrd 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="email"></param>
        /// <param name="password"></param>
        /// <param name="screenName"></param>
        /// <returns>Task of ApiResponse (ResultT)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResultT>> LoginUsingPOSTAsyncWithHttpInfo (string apiKey, string email, string password, string screenName)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling TwitterLoginGetTokenApiToolsApi->LoginUsingPOST");
            // verify the required parameter 'email' is set
            if (email == null)
                throw new ApiException(400, "Missing required parameter 'email' when calling TwitterLoginGetTokenApiToolsApi->LoginUsingPOST");
            // verify the required parameter 'password' is set
            if (password == null)
                throw new ApiException(400, "Missing required parameter 'password' when calling TwitterLoginGetTokenApiToolsApi->LoginUsingPOST");
            // verify the required parameter 'screenName' is set
            if (screenName == null)
                throw new ApiException(400, "Missing required parameter 'screenName' when calling TwitterLoginGetTokenApiToolsApi->LoginUsingPOST");

            var localVarPath = "/base/apitools/login";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", apiKey)); // query parameter
            if (email != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "email", email)); // query parameter
            if (password != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "password", password)); // query parameter
            if (screenName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "screenName", screenName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LoginUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultT>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultT) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultT)));
        }

    }
}
