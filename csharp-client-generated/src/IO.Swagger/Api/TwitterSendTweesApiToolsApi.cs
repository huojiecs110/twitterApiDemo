/* 
 * Utools_twitter_tools_api
 *
 * X (Twitter) API for search, Tweets, users, followers, images, media and more. Supports some v1.1 and v2 API endpoints, with more to come in the future!
 *
 * OpenAPI spec version: 1.1
 * Contact: huojiecs@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITwitterSendTweesApiToolsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// retweet a Tweet
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="tweetId"></param>
        /// <returns>ResultT</returns>
        ResultT CreateRetweetUsingGET (string apiKey, string authToken, string ct0, string tweetId);

        /// <summary>
        /// retweet a Tweet
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="tweetId"></param>
        /// <returns>ApiResponse of ResultT</returns>
        ApiResponse<ResultT> CreateRetweetUsingGETWithHttpInfo (string apiKey, string authToken, string ct0, string tweetId);
        /// <summary>
        /// retweet a Tweet
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="tweetId"></param>
        /// <returns>ResultT</returns>
        ResultT CreateRetweetUsingPOST (string apiKey, string authToken, string ct0, string tweetId);

        /// <summary>
        /// retweet a Tweet
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="tweetId"></param>
        /// <returns>ApiResponse of ResultT</returns>
        ApiResponse<ResultT> CreateRetweetUsingPOSTWithHttpInfo (string apiKey, string authToken, string ct0, string tweetId);
        /// <summary>
        /// create a Tweet
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="text"></param>
        /// <param name="medias">medias ids (optional)</param>
        /// <returns>ResultT</returns>
        ResultT CreateTweetUsingGET (string apiKey, string authToken, string ct0, string text, List<string> medias = null);

        /// <summary>
        /// create a Tweet
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="text"></param>
        /// <param name="medias">medias ids (optional)</param>
        /// <returns>ApiResponse of ResultT</returns>
        ApiResponse<ResultT> CreateTweetUsingGETWithHttpInfo (string apiKey, string authToken, string ct0, string text, List<string> medias = null);
        /// <summary>
        /// create a Tweet
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="text"></param>
        /// <param name="medias">medias ids (optional)</param>
        /// <returns>ResultT</returns>
        ResultT CreateTweetUsingPOST (string apiKey, string authToken, string ct0, string text, List<string> medias = null);

        /// <summary>
        /// create a Tweet
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="text"></param>
        /// <param name="medias">medias ids (optional)</param>
        /// <returns>ApiResponse of ResultT</returns>
        ApiResponse<ResultT> CreateTweetUsingPOSTWithHttpInfo (string apiKey, string authToken, string ct0, string text, List<string> medias = null);
        /// <summary>
        /// like(favorites) Tweet
        /// </summary>
        /// <remarks>
        /// see details https://developer.twitter.com/en/docs/twitter-api/v1/tweets/post-and-engage/api-reference/post-favorites-create
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="id"></param>
        /// <returns>ResultT</returns>
        ResultT LikeTweetUsingGET (string apiKey, string authToken, string ct0, string id);

        /// <summary>
        /// like(favorites) Tweet
        /// </summary>
        /// <remarks>
        /// see details https://developer.twitter.com/en/docs/twitter-api/v1/tweets/post-and-engage/api-reference/post-favorites-create
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="id"></param>
        /// <returns>ApiResponse of ResultT</returns>
        ApiResponse<ResultT> LikeTweetUsingGETWithHttpInfo (string apiKey, string authToken, string ct0, string id);
        /// <summary>
        /// like(favorites) Tweet
        /// </summary>
        /// <remarks>
        /// see details https://developer.twitter.com/en/docs/twitter-api/v1/tweets/post-and-engage/api-reference/post-favorites-create
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="id"></param>
        /// <returns>ResultT</returns>
        ResultT LikeTweetUsingPOST (string apiKey, string authToken, string ct0, string id);

        /// <summary>
        /// like(favorites) Tweet
        /// </summary>
        /// <remarks>
        /// see details https://developer.twitter.com/en/docs/twitter-api/v1/tweets/post-and-engage/api-reference/post-favorites-create
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="id"></param>
        /// <returns>ApiResponse of ResultT</returns>
        ApiResponse<ResultT> LikeTweetUsingPOSTWithHttpInfo (string apiKey, string authToken, string ct0, string id);
        /// <summary>
        /// reply to tweet 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="text"></param>
        /// <param name="tweetId"></param>
        /// <param name="medias">medias ids (optional)</param>
        /// <returns>ResultT</returns>
        ResultT TweetReplyUsingGET (string apiKey, string authToken, string ct0, string text, string tweetId, List<string> medias = null);

        /// <summary>
        /// reply to tweet 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="text"></param>
        /// <param name="tweetId"></param>
        /// <param name="medias">medias ids (optional)</param>
        /// <returns>ApiResponse of ResultT</returns>
        ApiResponse<ResultT> TweetReplyUsingGETWithHttpInfo (string apiKey, string authToken, string ct0, string text, string tweetId, List<string> medias = null);
        /// <summary>
        /// reply to tweet 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="text"></param>
        /// <param name="tweetId"></param>
        /// <param name="medias">medias ids (optional)</param>
        /// <returns>ResultT</returns>
        ResultT TweetReplyUsingPOST (string apiKey, string authToken, string ct0, string text, string tweetId, List<string> medias = null);

        /// <summary>
        /// reply to tweet 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="text"></param>
        /// <param name="tweetId"></param>
        /// <param name="medias">medias ids (optional)</param>
        /// <returns>ApiResponse of ResultT</returns>
        ApiResponse<ResultT> TweetReplyUsingPOSTWithHttpInfo (string apiKey, string authToken, string ct0, string text, string tweetId, List<string> medias = null);
        /// <summary>
        /// unlike(unfavorites) Tweet
        /// </summary>
        /// <remarks>
        /// see details https://developer.twitter.com/en/docs/twitter-api/v1/tweets/post-and-engage/api-reference/post-favorites-destroy
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="id"></param>
        /// <returns>ResultT</returns>
        ResultT UnlikeTweetUsingGET (string apiKey, string authToken, string ct0, string id);

        /// <summary>
        /// unlike(unfavorites) Tweet
        /// </summary>
        /// <remarks>
        /// see details https://developer.twitter.com/en/docs/twitter-api/v1/tweets/post-and-engage/api-reference/post-favorites-destroy
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="id"></param>
        /// <returns>ApiResponse of ResultT</returns>
        ApiResponse<ResultT> UnlikeTweetUsingGETWithHttpInfo (string apiKey, string authToken, string ct0, string id);
        /// <summary>
        /// unlike(unfavorites) Tweet
        /// </summary>
        /// <remarks>
        /// see details https://developer.twitter.com/en/docs/twitter-api/v1/tweets/post-and-engage/api-reference/post-favorites-destroy
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="id"></param>
        /// <returns>ResultT</returns>
        ResultT UnlikeTweetUsingPOST (string apiKey, string authToken, string ct0, string id);

        /// <summary>
        /// unlike(unfavorites) Tweet
        /// </summary>
        /// <remarks>
        /// see details https://developer.twitter.com/en/docs/twitter-api/v1/tweets/post-and-engage/api-reference/post-favorites-destroy
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="id"></param>
        /// <returns>ApiResponse of ResultT</returns>
        ApiResponse<ResultT> UnlikeTweetUsingPOSTWithHttpInfo (string apiKey, string authToken, string ct0, string id);
        /// <summary>
        /// upload media (gif)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="mediaUrl"></param>
        /// <returns>ResultT</returns>
        ResultT UploadMediaUsingGET (string apiKey, string authToken, string ct0, string mediaUrl);

        /// <summary>
        /// upload media (gif)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="mediaUrl"></param>
        /// <returns>ApiResponse of ResultT</returns>
        ApiResponse<ResultT> UploadMediaUsingGETWithHttpInfo (string apiKey, string authToken, string ct0, string mediaUrl);
        /// <summary>
        /// upload media (gif)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="mediaUrl"></param>
        /// <returns>ResultT</returns>
        ResultT UploadMediaUsingPOST (string apiKey, string authToken, string ct0, string mediaUrl);

        /// <summary>
        /// upload media (gif)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="mediaUrl"></param>
        /// <returns>ApiResponse of ResultT</returns>
        ApiResponse<ResultT> UploadMediaUsingPOSTWithHttpInfo (string apiKey, string authToken, string ct0, string mediaUrl);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// retweet a Tweet
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="tweetId"></param>
        /// <returns>Task of ResultT</returns>
        System.Threading.Tasks.Task<ResultT> CreateRetweetUsingGETAsync (string apiKey, string authToken, string ct0, string tweetId);

        /// <summary>
        /// retweet a Tweet
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="tweetId"></param>
        /// <returns>Task of ApiResponse (ResultT)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResultT>> CreateRetweetUsingGETAsyncWithHttpInfo (string apiKey, string authToken, string ct0, string tweetId);
        /// <summary>
        /// retweet a Tweet
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="tweetId"></param>
        /// <returns>Task of ResultT</returns>
        System.Threading.Tasks.Task<ResultT> CreateRetweetUsingPOSTAsync (string apiKey, string authToken, string ct0, string tweetId);

        /// <summary>
        /// retweet a Tweet
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="tweetId"></param>
        /// <returns>Task of ApiResponse (ResultT)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResultT>> CreateRetweetUsingPOSTAsyncWithHttpInfo (string apiKey, string authToken, string ct0, string tweetId);
        /// <summary>
        /// create a Tweet
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="text"></param>
        /// <param name="medias">medias ids (optional)</param>
        /// <returns>Task of ResultT</returns>
        System.Threading.Tasks.Task<ResultT> CreateTweetUsingGETAsync (string apiKey, string authToken, string ct0, string text, List<string> medias = null);

        /// <summary>
        /// create a Tweet
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="text"></param>
        /// <param name="medias">medias ids (optional)</param>
        /// <returns>Task of ApiResponse (ResultT)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResultT>> CreateTweetUsingGETAsyncWithHttpInfo (string apiKey, string authToken, string ct0, string text, List<string> medias = null);
        /// <summary>
        /// create a Tweet
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="text"></param>
        /// <param name="medias">medias ids (optional)</param>
        /// <returns>Task of ResultT</returns>
        System.Threading.Tasks.Task<ResultT> CreateTweetUsingPOSTAsync (string apiKey, string authToken, string ct0, string text, List<string> medias = null);

        /// <summary>
        /// create a Tweet
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="text"></param>
        /// <param name="medias">medias ids (optional)</param>
        /// <returns>Task of ApiResponse (ResultT)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResultT>> CreateTweetUsingPOSTAsyncWithHttpInfo (string apiKey, string authToken, string ct0, string text, List<string> medias = null);
        /// <summary>
        /// like(favorites) Tweet
        /// </summary>
        /// <remarks>
        /// see details https://developer.twitter.com/en/docs/twitter-api/v1/tweets/post-and-engage/api-reference/post-favorites-create
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="id"></param>
        /// <returns>Task of ResultT</returns>
        System.Threading.Tasks.Task<ResultT> LikeTweetUsingGETAsync (string apiKey, string authToken, string ct0, string id);

        /// <summary>
        /// like(favorites) Tweet
        /// </summary>
        /// <remarks>
        /// see details https://developer.twitter.com/en/docs/twitter-api/v1/tweets/post-and-engage/api-reference/post-favorites-create
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (ResultT)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResultT>> LikeTweetUsingGETAsyncWithHttpInfo (string apiKey, string authToken, string ct0, string id);
        /// <summary>
        /// like(favorites) Tweet
        /// </summary>
        /// <remarks>
        /// see details https://developer.twitter.com/en/docs/twitter-api/v1/tweets/post-and-engage/api-reference/post-favorites-create
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="id"></param>
        /// <returns>Task of ResultT</returns>
        System.Threading.Tasks.Task<ResultT> LikeTweetUsingPOSTAsync (string apiKey, string authToken, string ct0, string id);

        /// <summary>
        /// like(favorites) Tweet
        /// </summary>
        /// <remarks>
        /// see details https://developer.twitter.com/en/docs/twitter-api/v1/tweets/post-and-engage/api-reference/post-favorites-create
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (ResultT)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResultT>> LikeTweetUsingPOSTAsyncWithHttpInfo (string apiKey, string authToken, string ct0, string id);
        /// <summary>
        /// reply to tweet 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="text"></param>
        /// <param name="tweetId"></param>
        /// <param name="medias">medias ids (optional)</param>
        /// <returns>Task of ResultT</returns>
        System.Threading.Tasks.Task<ResultT> TweetReplyUsingGETAsync (string apiKey, string authToken, string ct0, string text, string tweetId, List<string> medias = null);

        /// <summary>
        /// reply to tweet 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="text"></param>
        /// <param name="tweetId"></param>
        /// <param name="medias">medias ids (optional)</param>
        /// <returns>Task of ApiResponse (ResultT)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResultT>> TweetReplyUsingGETAsyncWithHttpInfo (string apiKey, string authToken, string ct0, string text, string tweetId, List<string> medias = null);
        /// <summary>
        /// reply to tweet 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="text"></param>
        /// <param name="tweetId"></param>
        /// <param name="medias">medias ids (optional)</param>
        /// <returns>Task of ResultT</returns>
        System.Threading.Tasks.Task<ResultT> TweetReplyUsingPOSTAsync (string apiKey, string authToken, string ct0, string text, string tweetId, List<string> medias = null);

        /// <summary>
        /// reply to tweet 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="text"></param>
        /// <param name="tweetId"></param>
        /// <param name="medias">medias ids (optional)</param>
        /// <returns>Task of ApiResponse (ResultT)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResultT>> TweetReplyUsingPOSTAsyncWithHttpInfo (string apiKey, string authToken, string ct0, string text, string tweetId, List<string> medias = null);
        /// <summary>
        /// unlike(unfavorites) Tweet
        /// </summary>
        /// <remarks>
        /// see details https://developer.twitter.com/en/docs/twitter-api/v1/tweets/post-and-engage/api-reference/post-favorites-destroy
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="id"></param>
        /// <returns>Task of ResultT</returns>
        System.Threading.Tasks.Task<ResultT> UnlikeTweetUsingGETAsync (string apiKey, string authToken, string ct0, string id);

        /// <summary>
        /// unlike(unfavorites) Tweet
        /// </summary>
        /// <remarks>
        /// see details https://developer.twitter.com/en/docs/twitter-api/v1/tweets/post-and-engage/api-reference/post-favorites-destroy
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (ResultT)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResultT>> UnlikeTweetUsingGETAsyncWithHttpInfo (string apiKey, string authToken, string ct0, string id);
        /// <summary>
        /// unlike(unfavorites) Tweet
        /// </summary>
        /// <remarks>
        /// see details https://developer.twitter.com/en/docs/twitter-api/v1/tweets/post-and-engage/api-reference/post-favorites-destroy
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="id"></param>
        /// <returns>Task of ResultT</returns>
        System.Threading.Tasks.Task<ResultT> UnlikeTweetUsingPOSTAsync (string apiKey, string authToken, string ct0, string id);

        /// <summary>
        /// unlike(unfavorites) Tweet
        /// </summary>
        /// <remarks>
        /// see details https://developer.twitter.com/en/docs/twitter-api/v1/tweets/post-and-engage/api-reference/post-favorites-destroy
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (ResultT)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResultT>> UnlikeTweetUsingPOSTAsyncWithHttpInfo (string apiKey, string authToken, string ct0, string id);
        /// <summary>
        /// upload media (gif)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="mediaUrl"></param>
        /// <returns>Task of ResultT</returns>
        System.Threading.Tasks.Task<ResultT> UploadMediaUsingGETAsync (string apiKey, string authToken, string ct0, string mediaUrl);

        /// <summary>
        /// upload media (gif)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="mediaUrl"></param>
        /// <returns>Task of ApiResponse (ResultT)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResultT>> UploadMediaUsingGETAsyncWithHttpInfo (string apiKey, string authToken, string ct0, string mediaUrl);
        /// <summary>
        /// upload media (gif)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="mediaUrl"></param>
        /// <returns>Task of ResultT</returns>
        System.Threading.Tasks.Task<ResultT> UploadMediaUsingPOSTAsync (string apiKey, string authToken, string ct0, string mediaUrl);

        /// <summary>
        /// upload media (gif)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="mediaUrl"></param>
        /// <returns>Task of ApiResponse (ResultT)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResultT>> UploadMediaUsingPOSTAsyncWithHttpInfo (string apiKey, string authToken, string ct0, string mediaUrl);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TwitterSendTweesApiToolsApi : ITwitterSendTweesApiToolsApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TwitterSendTweesApiToolsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TwitterSendTweesApiToolsApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TwitterSendTweesApiToolsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TwitterSendTweesApiToolsApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// retweet a Tweet 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="tweetId"></param>
        /// <returns>ResultT</returns>
        public ResultT CreateRetweetUsingGET (string apiKey, string authToken, string ct0, string tweetId)
        {
             ApiResponse<ResultT> localVarResponse = CreateRetweetUsingGETWithHttpInfo(apiKey, authToken, ct0, tweetId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// retweet a Tweet 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="tweetId"></param>
        /// <returns>ApiResponse of ResultT</returns>
        public ApiResponse< ResultT > CreateRetweetUsingGETWithHttpInfo (string apiKey, string authToken, string ct0, string tweetId)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling TwitterSendTweesApiToolsApi->CreateRetweetUsingGET");
            // verify the required parameter 'authToken' is set
            if (authToken == null)
                throw new ApiException(400, "Missing required parameter 'authToken' when calling TwitterSendTweesApiToolsApi->CreateRetweetUsingGET");
            // verify the required parameter 'ct0' is set
            if (ct0 == null)
                throw new ApiException(400, "Missing required parameter 'ct0' when calling TwitterSendTweesApiToolsApi->CreateRetweetUsingGET");
            // verify the required parameter 'tweetId' is set
            if (tweetId == null)
                throw new ApiException(400, "Missing required parameter 'tweetId' when calling TwitterSendTweesApiToolsApi->CreateRetweetUsingGET");

            var localVarPath = "/base/apitools/createRetweet";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", apiKey)); // query parameter
            if (authToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "auth_token", authToken)); // query parameter
            if (ct0 != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ct0", ct0)); // query parameter
            if (tweetId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tweetId", tweetId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateRetweetUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultT>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultT) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultT)));
        }

        /// <summary>
        /// retweet a Tweet 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="tweetId"></param>
        /// <returns>Task of ResultT</returns>
        public async System.Threading.Tasks.Task<ResultT> CreateRetweetUsingGETAsync (string apiKey, string authToken, string ct0, string tweetId)
        {
             ApiResponse<ResultT> localVarResponse = await CreateRetweetUsingGETAsyncWithHttpInfo(apiKey, authToken, ct0, tweetId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// retweet a Tweet 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="tweetId"></param>
        /// <returns>Task of ApiResponse (ResultT)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResultT>> CreateRetweetUsingGETAsyncWithHttpInfo (string apiKey, string authToken, string ct0, string tweetId)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling TwitterSendTweesApiToolsApi->CreateRetweetUsingGET");
            // verify the required parameter 'authToken' is set
            if (authToken == null)
                throw new ApiException(400, "Missing required parameter 'authToken' when calling TwitterSendTweesApiToolsApi->CreateRetweetUsingGET");
            // verify the required parameter 'ct0' is set
            if (ct0 == null)
                throw new ApiException(400, "Missing required parameter 'ct0' when calling TwitterSendTweesApiToolsApi->CreateRetweetUsingGET");
            // verify the required parameter 'tweetId' is set
            if (tweetId == null)
                throw new ApiException(400, "Missing required parameter 'tweetId' when calling TwitterSendTweesApiToolsApi->CreateRetweetUsingGET");

            var localVarPath = "/base/apitools/createRetweet";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", apiKey)); // query parameter
            if (authToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "auth_token", authToken)); // query parameter
            if (ct0 != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ct0", ct0)); // query parameter
            if (tweetId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tweetId", tweetId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateRetweetUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultT>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultT) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultT)));
        }

        /// <summary>
        /// retweet a Tweet 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="tweetId"></param>
        /// <returns>ResultT</returns>
        public ResultT CreateRetweetUsingPOST (string apiKey, string authToken, string ct0, string tweetId)
        {
             ApiResponse<ResultT> localVarResponse = CreateRetweetUsingPOSTWithHttpInfo(apiKey, authToken, ct0, tweetId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// retweet a Tweet 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="tweetId"></param>
        /// <returns>ApiResponse of ResultT</returns>
        public ApiResponse< ResultT > CreateRetweetUsingPOSTWithHttpInfo (string apiKey, string authToken, string ct0, string tweetId)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling TwitterSendTweesApiToolsApi->CreateRetweetUsingPOST");
            // verify the required parameter 'authToken' is set
            if (authToken == null)
                throw new ApiException(400, "Missing required parameter 'authToken' when calling TwitterSendTweesApiToolsApi->CreateRetweetUsingPOST");
            // verify the required parameter 'ct0' is set
            if (ct0 == null)
                throw new ApiException(400, "Missing required parameter 'ct0' when calling TwitterSendTweesApiToolsApi->CreateRetweetUsingPOST");
            // verify the required parameter 'tweetId' is set
            if (tweetId == null)
                throw new ApiException(400, "Missing required parameter 'tweetId' when calling TwitterSendTweesApiToolsApi->CreateRetweetUsingPOST");

            var localVarPath = "/base/apitools/createRetweet";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", apiKey)); // query parameter
            if (authToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "auth_token", authToken)); // query parameter
            if (ct0 != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ct0", ct0)); // query parameter
            if (tweetId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tweetId", tweetId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateRetweetUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultT>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultT) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultT)));
        }

        /// <summary>
        /// retweet a Tweet 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="tweetId"></param>
        /// <returns>Task of ResultT</returns>
        public async System.Threading.Tasks.Task<ResultT> CreateRetweetUsingPOSTAsync (string apiKey, string authToken, string ct0, string tweetId)
        {
             ApiResponse<ResultT> localVarResponse = await CreateRetweetUsingPOSTAsyncWithHttpInfo(apiKey, authToken, ct0, tweetId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// retweet a Tweet 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="tweetId"></param>
        /// <returns>Task of ApiResponse (ResultT)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResultT>> CreateRetweetUsingPOSTAsyncWithHttpInfo (string apiKey, string authToken, string ct0, string tweetId)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling TwitterSendTweesApiToolsApi->CreateRetweetUsingPOST");
            // verify the required parameter 'authToken' is set
            if (authToken == null)
                throw new ApiException(400, "Missing required parameter 'authToken' when calling TwitterSendTweesApiToolsApi->CreateRetweetUsingPOST");
            // verify the required parameter 'ct0' is set
            if (ct0 == null)
                throw new ApiException(400, "Missing required parameter 'ct0' when calling TwitterSendTweesApiToolsApi->CreateRetweetUsingPOST");
            // verify the required parameter 'tweetId' is set
            if (tweetId == null)
                throw new ApiException(400, "Missing required parameter 'tweetId' when calling TwitterSendTweesApiToolsApi->CreateRetweetUsingPOST");

            var localVarPath = "/base/apitools/createRetweet";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", apiKey)); // query parameter
            if (authToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "auth_token", authToken)); // query parameter
            if (ct0 != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ct0", ct0)); // query parameter
            if (tweetId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tweetId", tweetId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateRetweetUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultT>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultT) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultT)));
        }

        /// <summary>
        /// create a Tweet 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="text"></param>
        /// <param name="medias">medias ids (optional)</param>
        /// <returns>ResultT</returns>
        public ResultT CreateTweetUsingGET (string apiKey, string authToken, string ct0, string text, List<string> medias = null)
        {
             ApiResponse<ResultT> localVarResponse = CreateTweetUsingGETWithHttpInfo(apiKey, authToken, ct0, text, medias);
             return localVarResponse.Data;
        }

        /// <summary>
        /// create a Tweet 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="text"></param>
        /// <param name="medias">medias ids (optional)</param>
        /// <returns>ApiResponse of ResultT</returns>
        public ApiResponse< ResultT > CreateTweetUsingGETWithHttpInfo (string apiKey, string authToken, string ct0, string text, List<string> medias = null)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling TwitterSendTweesApiToolsApi->CreateTweetUsingGET");
            // verify the required parameter 'authToken' is set
            if (authToken == null)
                throw new ApiException(400, "Missing required parameter 'authToken' when calling TwitterSendTweesApiToolsApi->CreateTweetUsingGET");
            // verify the required parameter 'ct0' is set
            if (ct0 == null)
                throw new ApiException(400, "Missing required parameter 'ct0' when calling TwitterSendTweesApiToolsApi->CreateTweetUsingGET");
            // verify the required parameter 'text' is set
            if (text == null)
                throw new ApiException(400, "Missing required parameter 'text' when calling TwitterSendTweesApiToolsApi->CreateTweetUsingGET");

            var localVarPath = "/base/apitools/createTweet";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", apiKey)); // query parameter
            if (authToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "auth_token", authToken)); // query parameter
            if (ct0 != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ct0", ct0)); // query parameter
            if (medias != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "medias", medias)); // query parameter
            if (text != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "text", text)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateTweetUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultT>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultT) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultT)));
        }

        /// <summary>
        /// create a Tweet 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="text"></param>
        /// <param name="medias">medias ids (optional)</param>
        /// <returns>Task of ResultT</returns>
        public async System.Threading.Tasks.Task<ResultT> CreateTweetUsingGETAsync (string apiKey, string authToken, string ct0, string text, List<string> medias = null)
        {
             ApiResponse<ResultT> localVarResponse = await CreateTweetUsingGETAsyncWithHttpInfo(apiKey, authToken, ct0, text, medias);
             return localVarResponse.Data;

        }

        /// <summary>
        /// create a Tweet 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="text"></param>
        /// <param name="medias">medias ids (optional)</param>
        /// <returns>Task of ApiResponse (ResultT)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResultT>> CreateTweetUsingGETAsyncWithHttpInfo (string apiKey, string authToken, string ct0, string text, List<string> medias = null)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling TwitterSendTweesApiToolsApi->CreateTweetUsingGET");
            // verify the required parameter 'authToken' is set
            if (authToken == null)
                throw new ApiException(400, "Missing required parameter 'authToken' when calling TwitterSendTweesApiToolsApi->CreateTweetUsingGET");
            // verify the required parameter 'ct0' is set
            if (ct0 == null)
                throw new ApiException(400, "Missing required parameter 'ct0' when calling TwitterSendTweesApiToolsApi->CreateTweetUsingGET");
            // verify the required parameter 'text' is set
            if (text == null)
                throw new ApiException(400, "Missing required parameter 'text' when calling TwitterSendTweesApiToolsApi->CreateTweetUsingGET");

            var localVarPath = "/base/apitools/createTweet";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", apiKey)); // query parameter
            if (authToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "auth_token", authToken)); // query parameter
            if (ct0 != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ct0", ct0)); // query parameter
            if (medias != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "medias", medias)); // query parameter
            if (text != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "text", text)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateTweetUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultT>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultT) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultT)));
        }

        /// <summary>
        /// create a Tweet 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="text"></param>
        /// <param name="medias">medias ids (optional)</param>
        /// <returns>ResultT</returns>
        public ResultT CreateTweetUsingPOST (string apiKey, string authToken, string ct0, string text, List<string> medias = null)
        {
             ApiResponse<ResultT> localVarResponse = CreateTweetUsingPOSTWithHttpInfo(apiKey, authToken, ct0, text, medias);
             return localVarResponse.Data;
        }

        /// <summary>
        /// create a Tweet 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="text"></param>
        /// <param name="medias">medias ids (optional)</param>
        /// <returns>ApiResponse of ResultT</returns>
        public ApiResponse< ResultT > CreateTweetUsingPOSTWithHttpInfo (string apiKey, string authToken, string ct0, string text, List<string> medias = null)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling TwitterSendTweesApiToolsApi->CreateTweetUsingPOST");
            // verify the required parameter 'authToken' is set
            if (authToken == null)
                throw new ApiException(400, "Missing required parameter 'authToken' when calling TwitterSendTweesApiToolsApi->CreateTweetUsingPOST");
            // verify the required parameter 'ct0' is set
            if (ct0 == null)
                throw new ApiException(400, "Missing required parameter 'ct0' when calling TwitterSendTweesApiToolsApi->CreateTweetUsingPOST");
            // verify the required parameter 'text' is set
            if (text == null)
                throw new ApiException(400, "Missing required parameter 'text' when calling TwitterSendTweesApiToolsApi->CreateTweetUsingPOST");

            var localVarPath = "/base/apitools/createTweet";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", apiKey)); // query parameter
            if (authToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "auth_token", authToken)); // query parameter
            if (ct0 != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ct0", ct0)); // query parameter
            if (medias != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "medias", medias)); // query parameter
            if (text != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "text", text)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateTweetUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultT>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultT) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultT)));
        }

        /// <summary>
        /// create a Tweet 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="text"></param>
        /// <param name="medias">medias ids (optional)</param>
        /// <returns>Task of ResultT</returns>
        public async System.Threading.Tasks.Task<ResultT> CreateTweetUsingPOSTAsync (string apiKey, string authToken, string ct0, string text, List<string> medias = null)
        {
             ApiResponse<ResultT> localVarResponse = await CreateTweetUsingPOSTAsyncWithHttpInfo(apiKey, authToken, ct0, text, medias);
             return localVarResponse.Data;

        }

        /// <summary>
        /// create a Tweet 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="text"></param>
        /// <param name="medias">medias ids (optional)</param>
        /// <returns>Task of ApiResponse (ResultT)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResultT>> CreateTweetUsingPOSTAsyncWithHttpInfo (string apiKey, string authToken, string ct0, string text, List<string> medias = null)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling TwitterSendTweesApiToolsApi->CreateTweetUsingPOST");
            // verify the required parameter 'authToken' is set
            if (authToken == null)
                throw new ApiException(400, "Missing required parameter 'authToken' when calling TwitterSendTweesApiToolsApi->CreateTweetUsingPOST");
            // verify the required parameter 'ct0' is set
            if (ct0 == null)
                throw new ApiException(400, "Missing required parameter 'ct0' when calling TwitterSendTweesApiToolsApi->CreateTweetUsingPOST");
            // verify the required parameter 'text' is set
            if (text == null)
                throw new ApiException(400, "Missing required parameter 'text' when calling TwitterSendTweesApiToolsApi->CreateTweetUsingPOST");

            var localVarPath = "/base/apitools/createTweet";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", apiKey)); // query parameter
            if (authToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "auth_token", authToken)); // query parameter
            if (ct0 != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ct0", ct0)); // query parameter
            if (medias != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "medias", medias)); // query parameter
            if (text != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "text", text)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateTweetUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultT>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultT) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultT)));
        }

        /// <summary>
        /// like(favorites) Tweet see details https://developer.twitter.com/en/docs/twitter-api/v1/tweets/post-and-engage/api-reference/post-favorites-create
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="id"></param>
        /// <returns>ResultT</returns>
        public ResultT LikeTweetUsingGET (string apiKey, string authToken, string ct0, string id)
        {
             ApiResponse<ResultT> localVarResponse = LikeTweetUsingGETWithHttpInfo(apiKey, authToken, ct0, id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// like(favorites) Tweet see details https://developer.twitter.com/en/docs/twitter-api/v1/tweets/post-and-engage/api-reference/post-favorites-create
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="id"></param>
        /// <returns>ApiResponse of ResultT</returns>
        public ApiResponse< ResultT > LikeTweetUsingGETWithHttpInfo (string apiKey, string authToken, string ct0, string id)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling TwitterSendTweesApiToolsApi->LikeTweetUsingGET");
            // verify the required parameter 'authToken' is set
            if (authToken == null)
                throw new ApiException(400, "Missing required parameter 'authToken' when calling TwitterSendTweesApiToolsApi->LikeTweetUsingGET");
            // verify the required parameter 'ct0' is set
            if (ct0 == null)
                throw new ApiException(400, "Missing required parameter 'ct0' when calling TwitterSendTweesApiToolsApi->LikeTweetUsingGET");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TwitterSendTweesApiToolsApi->LikeTweetUsingGET");

            var localVarPath = "/base/apitools/likeTweet";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", apiKey)); // query parameter
            if (authToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "auth_token", authToken)); // query parameter
            if (ct0 != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ct0", ct0)); // query parameter
            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LikeTweetUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultT>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultT) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultT)));
        }

        /// <summary>
        /// like(favorites) Tweet see details https://developer.twitter.com/en/docs/twitter-api/v1/tweets/post-and-engage/api-reference/post-favorites-create
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="id"></param>
        /// <returns>Task of ResultT</returns>
        public async System.Threading.Tasks.Task<ResultT> LikeTweetUsingGETAsync (string apiKey, string authToken, string ct0, string id)
        {
             ApiResponse<ResultT> localVarResponse = await LikeTweetUsingGETAsyncWithHttpInfo(apiKey, authToken, ct0, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// like(favorites) Tweet see details https://developer.twitter.com/en/docs/twitter-api/v1/tweets/post-and-engage/api-reference/post-favorites-create
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (ResultT)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResultT>> LikeTweetUsingGETAsyncWithHttpInfo (string apiKey, string authToken, string ct0, string id)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling TwitterSendTweesApiToolsApi->LikeTweetUsingGET");
            // verify the required parameter 'authToken' is set
            if (authToken == null)
                throw new ApiException(400, "Missing required parameter 'authToken' when calling TwitterSendTweesApiToolsApi->LikeTweetUsingGET");
            // verify the required parameter 'ct0' is set
            if (ct0 == null)
                throw new ApiException(400, "Missing required parameter 'ct0' when calling TwitterSendTweesApiToolsApi->LikeTweetUsingGET");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TwitterSendTweesApiToolsApi->LikeTweetUsingGET");

            var localVarPath = "/base/apitools/likeTweet";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", apiKey)); // query parameter
            if (authToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "auth_token", authToken)); // query parameter
            if (ct0 != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ct0", ct0)); // query parameter
            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LikeTweetUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultT>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultT) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultT)));
        }

        /// <summary>
        /// like(favorites) Tweet see details https://developer.twitter.com/en/docs/twitter-api/v1/tweets/post-and-engage/api-reference/post-favorites-create
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="id"></param>
        /// <returns>ResultT</returns>
        public ResultT LikeTweetUsingPOST (string apiKey, string authToken, string ct0, string id)
        {
             ApiResponse<ResultT> localVarResponse = LikeTweetUsingPOSTWithHttpInfo(apiKey, authToken, ct0, id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// like(favorites) Tweet see details https://developer.twitter.com/en/docs/twitter-api/v1/tweets/post-and-engage/api-reference/post-favorites-create
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="id"></param>
        /// <returns>ApiResponse of ResultT</returns>
        public ApiResponse< ResultT > LikeTweetUsingPOSTWithHttpInfo (string apiKey, string authToken, string ct0, string id)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling TwitterSendTweesApiToolsApi->LikeTweetUsingPOST");
            // verify the required parameter 'authToken' is set
            if (authToken == null)
                throw new ApiException(400, "Missing required parameter 'authToken' when calling TwitterSendTweesApiToolsApi->LikeTweetUsingPOST");
            // verify the required parameter 'ct0' is set
            if (ct0 == null)
                throw new ApiException(400, "Missing required parameter 'ct0' when calling TwitterSendTweesApiToolsApi->LikeTweetUsingPOST");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TwitterSendTweesApiToolsApi->LikeTweetUsingPOST");

            var localVarPath = "/base/apitools/likeTweet";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", apiKey)); // query parameter
            if (authToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "auth_token", authToken)); // query parameter
            if (ct0 != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ct0", ct0)); // query parameter
            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LikeTweetUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultT>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultT) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultT)));
        }

        /// <summary>
        /// like(favorites) Tweet see details https://developer.twitter.com/en/docs/twitter-api/v1/tweets/post-and-engage/api-reference/post-favorites-create
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="id"></param>
        /// <returns>Task of ResultT</returns>
        public async System.Threading.Tasks.Task<ResultT> LikeTweetUsingPOSTAsync (string apiKey, string authToken, string ct0, string id)
        {
             ApiResponse<ResultT> localVarResponse = await LikeTweetUsingPOSTAsyncWithHttpInfo(apiKey, authToken, ct0, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// like(favorites) Tweet see details https://developer.twitter.com/en/docs/twitter-api/v1/tweets/post-and-engage/api-reference/post-favorites-create
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (ResultT)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResultT>> LikeTweetUsingPOSTAsyncWithHttpInfo (string apiKey, string authToken, string ct0, string id)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling TwitterSendTweesApiToolsApi->LikeTweetUsingPOST");
            // verify the required parameter 'authToken' is set
            if (authToken == null)
                throw new ApiException(400, "Missing required parameter 'authToken' when calling TwitterSendTweesApiToolsApi->LikeTweetUsingPOST");
            // verify the required parameter 'ct0' is set
            if (ct0 == null)
                throw new ApiException(400, "Missing required parameter 'ct0' when calling TwitterSendTweesApiToolsApi->LikeTweetUsingPOST");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TwitterSendTweesApiToolsApi->LikeTweetUsingPOST");

            var localVarPath = "/base/apitools/likeTweet";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", apiKey)); // query parameter
            if (authToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "auth_token", authToken)); // query parameter
            if (ct0 != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ct0", ct0)); // query parameter
            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LikeTweetUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultT>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultT) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultT)));
        }

        /// <summary>
        /// reply to tweet  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="text"></param>
        /// <param name="tweetId"></param>
        /// <param name="medias">medias ids (optional)</param>
        /// <returns>ResultT</returns>
        public ResultT TweetReplyUsingGET (string apiKey, string authToken, string ct0, string text, string tweetId, List<string> medias = null)
        {
             ApiResponse<ResultT> localVarResponse = TweetReplyUsingGETWithHttpInfo(apiKey, authToken, ct0, text, tweetId, medias);
             return localVarResponse.Data;
        }

        /// <summary>
        /// reply to tweet  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="text"></param>
        /// <param name="tweetId"></param>
        /// <param name="medias">medias ids (optional)</param>
        /// <returns>ApiResponse of ResultT</returns>
        public ApiResponse< ResultT > TweetReplyUsingGETWithHttpInfo (string apiKey, string authToken, string ct0, string text, string tweetId, List<string> medias = null)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling TwitterSendTweesApiToolsApi->TweetReplyUsingGET");
            // verify the required parameter 'authToken' is set
            if (authToken == null)
                throw new ApiException(400, "Missing required parameter 'authToken' when calling TwitterSendTweesApiToolsApi->TweetReplyUsingGET");
            // verify the required parameter 'ct0' is set
            if (ct0 == null)
                throw new ApiException(400, "Missing required parameter 'ct0' when calling TwitterSendTweesApiToolsApi->TweetReplyUsingGET");
            // verify the required parameter 'text' is set
            if (text == null)
                throw new ApiException(400, "Missing required parameter 'text' when calling TwitterSendTweesApiToolsApi->TweetReplyUsingGET");
            // verify the required parameter 'tweetId' is set
            if (tweetId == null)
                throw new ApiException(400, "Missing required parameter 'tweetId' when calling TwitterSendTweesApiToolsApi->TweetReplyUsingGET");

            var localVarPath = "/base/apitools/tweetReply";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", apiKey)); // query parameter
            if (authToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "auth_token", authToken)); // query parameter
            if (ct0 != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ct0", ct0)); // query parameter
            if (medias != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "medias", medias)); // query parameter
            if (text != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "text", text)); // query parameter
            if (tweetId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tweetId", tweetId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TweetReplyUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultT>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultT) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultT)));
        }

        /// <summary>
        /// reply to tweet  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="text"></param>
        /// <param name="tweetId"></param>
        /// <param name="medias">medias ids (optional)</param>
        /// <returns>Task of ResultT</returns>
        public async System.Threading.Tasks.Task<ResultT> TweetReplyUsingGETAsync (string apiKey, string authToken, string ct0, string text, string tweetId, List<string> medias = null)
        {
             ApiResponse<ResultT> localVarResponse = await TweetReplyUsingGETAsyncWithHttpInfo(apiKey, authToken, ct0, text, tweetId, medias);
             return localVarResponse.Data;

        }

        /// <summary>
        /// reply to tweet  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="text"></param>
        /// <param name="tweetId"></param>
        /// <param name="medias">medias ids (optional)</param>
        /// <returns>Task of ApiResponse (ResultT)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResultT>> TweetReplyUsingGETAsyncWithHttpInfo (string apiKey, string authToken, string ct0, string text, string tweetId, List<string> medias = null)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling TwitterSendTweesApiToolsApi->TweetReplyUsingGET");
            // verify the required parameter 'authToken' is set
            if (authToken == null)
                throw new ApiException(400, "Missing required parameter 'authToken' when calling TwitterSendTweesApiToolsApi->TweetReplyUsingGET");
            // verify the required parameter 'ct0' is set
            if (ct0 == null)
                throw new ApiException(400, "Missing required parameter 'ct0' when calling TwitterSendTweesApiToolsApi->TweetReplyUsingGET");
            // verify the required parameter 'text' is set
            if (text == null)
                throw new ApiException(400, "Missing required parameter 'text' when calling TwitterSendTweesApiToolsApi->TweetReplyUsingGET");
            // verify the required parameter 'tweetId' is set
            if (tweetId == null)
                throw new ApiException(400, "Missing required parameter 'tweetId' when calling TwitterSendTweesApiToolsApi->TweetReplyUsingGET");

            var localVarPath = "/base/apitools/tweetReply";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", apiKey)); // query parameter
            if (authToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "auth_token", authToken)); // query parameter
            if (ct0 != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ct0", ct0)); // query parameter
            if (medias != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "medias", medias)); // query parameter
            if (text != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "text", text)); // query parameter
            if (tweetId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tweetId", tweetId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TweetReplyUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultT>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultT) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultT)));
        }

        /// <summary>
        /// reply to tweet  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="text"></param>
        /// <param name="tweetId"></param>
        /// <param name="medias">medias ids (optional)</param>
        /// <returns>ResultT</returns>
        public ResultT TweetReplyUsingPOST (string apiKey, string authToken, string ct0, string text, string tweetId, List<string> medias = null)
        {
             ApiResponse<ResultT> localVarResponse = TweetReplyUsingPOSTWithHttpInfo(apiKey, authToken, ct0, text, tweetId, medias);
             return localVarResponse.Data;
        }

        /// <summary>
        /// reply to tweet  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="text"></param>
        /// <param name="tweetId"></param>
        /// <param name="medias">medias ids (optional)</param>
        /// <returns>ApiResponse of ResultT</returns>
        public ApiResponse< ResultT > TweetReplyUsingPOSTWithHttpInfo (string apiKey, string authToken, string ct0, string text, string tweetId, List<string> medias = null)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling TwitterSendTweesApiToolsApi->TweetReplyUsingPOST");
            // verify the required parameter 'authToken' is set
            if (authToken == null)
                throw new ApiException(400, "Missing required parameter 'authToken' when calling TwitterSendTweesApiToolsApi->TweetReplyUsingPOST");
            // verify the required parameter 'ct0' is set
            if (ct0 == null)
                throw new ApiException(400, "Missing required parameter 'ct0' when calling TwitterSendTweesApiToolsApi->TweetReplyUsingPOST");
            // verify the required parameter 'text' is set
            if (text == null)
                throw new ApiException(400, "Missing required parameter 'text' when calling TwitterSendTweesApiToolsApi->TweetReplyUsingPOST");
            // verify the required parameter 'tweetId' is set
            if (tweetId == null)
                throw new ApiException(400, "Missing required parameter 'tweetId' when calling TwitterSendTweesApiToolsApi->TweetReplyUsingPOST");

            var localVarPath = "/base/apitools/tweetReply";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", apiKey)); // query parameter
            if (authToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "auth_token", authToken)); // query parameter
            if (ct0 != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ct0", ct0)); // query parameter
            if (medias != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "medias", medias)); // query parameter
            if (text != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "text", text)); // query parameter
            if (tweetId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tweetId", tweetId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TweetReplyUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultT>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultT) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultT)));
        }

        /// <summary>
        /// reply to tweet  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="text"></param>
        /// <param name="tweetId"></param>
        /// <param name="medias">medias ids (optional)</param>
        /// <returns>Task of ResultT</returns>
        public async System.Threading.Tasks.Task<ResultT> TweetReplyUsingPOSTAsync (string apiKey, string authToken, string ct0, string text, string tweetId, List<string> medias = null)
        {
             ApiResponse<ResultT> localVarResponse = await TweetReplyUsingPOSTAsyncWithHttpInfo(apiKey, authToken, ct0, text, tweetId, medias);
             return localVarResponse.Data;

        }

        /// <summary>
        /// reply to tweet  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="text"></param>
        /// <param name="tweetId"></param>
        /// <param name="medias">medias ids (optional)</param>
        /// <returns>Task of ApiResponse (ResultT)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResultT>> TweetReplyUsingPOSTAsyncWithHttpInfo (string apiKey, string authToken, string ct0, string text, string tweetId, List<string> medias = null)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling TwitterSendTweesApiToolsApi->TweetReplyUsingPOST");
            // verify the required parameter 'authToken' is set
            if (authToken == null)
                throw new ApiException(400, "Missing required parameter 'authToken' when calling TwitterSendTweesApiToolsApi->TweetReplyUsingPOST");
            // verify the required parameter 'ct0' is set
            if (ct0 == null)
                throw new ApiException(400, "Missing required parameter 'ct0' when calling TwitterSendTweesApiToolsApi->TweetReplyUsingPOST");
            // verify the required parameter 'text' is set
            if (text == null)
                throw new ApiException(400, "Missing required parameter 'text' when calling TwitterSendTweesApiToolsApi->TweetReplyUsingPOST");
            // verify the required parameter 'tweetId' is set
            if (tweetId == null)
                throw new ApiException(400, "Missing required parameter 'tweetId' when calling TwitterSendTweesApiToolsApi->TweetReplyUsingPOST");

            var localVarPath = "/base/apitools/tweetReply";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", apiKey)); // query parameter
            if (authToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "auth_token", authToken)); // query parameter
            if (ct0 != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ct0", ct0)); // query parameter
            if (medias != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "medias", medias)); // query parameter
            if (text != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "text", text)); // query parameter
            if (tweetId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tweetId", tweetId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TweetReplyUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultT>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultT) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultT)));
        }

        /// <summary>
        /// unlike(unfavorites) Tweet see details https://developer.twitter.com/en/docs/twitter-api/v1/tweets/post-and-engage/api-reference/post-favorites-destroy
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="id"></param>
        /// <returns>ResultT</returns>
        public ResultT UnlikeTweetUsingGET (string apiKey, string authToken, string ct0, string id)
        {
             ApiResponse<ResultT> localVarResponse = UnlikeTweetUsingGETWithHttpInfo(apiKey, authToken, ct0, id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// unlike(unfavorites) Tweet see details https://developer.twitter.com/en/docs/twitter-api/v1/tweets/post-and-engage/api-reference/post-favorites-destroy
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="id"></param>
        /// <returns>ApiResponse of ResultT</returns>
        public ApiResponse< ResultT > UnlikeTweetUsingGETWithHttpInfo (string apiKey, string authToken, string ct0, string id)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling TwitterSendTweesApiToolsApi->UnlikeTweetUsingGET");
            // verify the required parameter 'authToken' is set
            if (authToken == null)
                throw new ApiException(400, "Missing required parameter 'authToken' when calling TwitterSendTweesApiToolsApi->UnlikeTweetUsingGET");
            // verify the required parameter 'ct0' is set
            if (ct0 == null)
                throw new ApiException(400, "Missing required parameter 'ct0' when calling TwitterSendTweesApiToolsApi->UnlikeTweetUsingGET");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TwitterSendTweesApiToolsApi->UnlikeTweetUsingGET");

            var localVarPath = "/base/apitools/unlikeTweet";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", apiKey)); // query parameter
            if (authToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "auth_token", authToken)); // query parameter
            if (ct0 != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ct0", ct0)); // query parameter
            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UnlikeTweetUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultT>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultT) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultT)));
        }

        /// <summary>
        /// unlike(unfavorites) Tweet see details https://developer.twitter.com/en/docs/twitter-api/v1/tweets/post-and-engage/api-reference/post-favorites-destroy
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="id"></param>
        /// <returns>Task of ResultT</returns>
        public async System.Threading.Tasks.Task<ResultT> UnlikeTweetUsingGETAsync (string apiKey, string authToken, string ct0, string id)
        {
             ApiResponse<ResultT> localVarResponse = await UnlikeTweetUsingGETAsyncWithHttpInfo(apiKey, authToken, ct0, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// unlike(unfavorites) Tweet see details https://developer.twitter.com/en/docs/twitter-api/v1/tweets/post-and-engage/api-reference/post-favorites-destroy
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (ResultT)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResultT>> UnlikeTweetUsingGETAsyncWithHttpInfo (string apiKey, string authToken, string ct0, string id)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling TwitterSendTweesApiToolsApi->UnlikeTweetUsingGET");
            // verify the required parameter 'authToken' is set
            if (authToken == null)
                throw new ApiException(400, "Missing required parameter 'authToken' when calling TwitterSendTweesApiToolsApi->UnlikeTweetUsingGET");
            // verify the required parameter 'ct0' is set
            if (ct0 == null)
                throw new ApiException(400, "Missing required parameter 'ct0' when calling TwitterSendTweesApiToolsApi->UnlikeTweetUsingGET");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TwitterSendTweesApiToolsApi->UnlikeTweetUsingGET");

            var localVarPath = "/base/apitools/unlikeTweet";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", apiKey)); // query parameter
            if (authToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "auth_token", authToken)); // query parameter
            if (ct0 != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ct0", ct0)); // query parameter
            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UnlikeTweetUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultT>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultT) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultT)));
        }

        /// <summary>
        /// unlike(unfavorites) Tweet see details https://developer.twitter.com/en/docs/twitter-api/v1/tweets/post-and-engage/api-reference/post-favorites-destroy
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="id"></param>
        /// <returns>ResultT</returns>
        public ResultT UnlikeTweetUsingPOST (string apiKey, string authToken, string ct0, string id)
        {
             ApiResponse<ResultT> localVarResponse = UnlikeTweetUsingPOSTWithHttpInfo(apiKey, authToken, ct0, id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// unlike(unfavorites) Tweet see details https://developer.twitter.com/en/docs/twitter-api/v1/tweets/post-and-engage/api-reference/post-favorites-destroy
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="id"></param>
        /// <returns>ApiResponse of ResultT</returns>
        public ApiResponse< ResultT > UnlikeTweetUsingPOSTWithHttpInfo (string apiKey, string authToken, string ct0, string id)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling TwitterSendTweesApiToolsApi->UnlikeTweetUsingPOST");
            // verify the required parameter 'authToken' is set
            if (authToken == null)
                throw new ApiException(400, "Missing required parameter 'authToken' when calling TwitterSendTweesApiToolsApi->UnlikeTweetUsingPOST");
            // verify the required parameter 'ct0' is set
            if (ct0 == null)
                throw new ApiException(400, "Missing required parameter 'ct0' when calling TwitterSendTweesApiToolsApi->UnlikeTweetUsingPOST");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TwitterSendTweesApiToolsApi->UnlikeTweetUsingPOST");

            var localVarPath = "/base/apitools/unlikeTweet";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", apiKey)); // query parameter
            if (authToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "auth_token", authToken)); // query parameter
            if (ct0 != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ct0", ct0)); // query parameter
            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UnlikeTweetUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultT>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultT) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultT)));
        }

        /// <summary>
        /// unlike(unfavorites) Tweet see details https://developer.twitter.com/en/docs/twitter-api/v1/tweets/post-and-engage/api-reference/post-favorites-destroy
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="id"></param>
        /// <returns>Task of ResultT</returns>
        public async System.Threading.Tasks.Task<ResultT> UnlikeTweetUsingPOSTAsync (string apiKey, string authToken, string ct0, string id)
        {
             ApiResponse<ResultT> localVarResponse = await UnlikeTweetUsingPOSTAsyncWithHttpInfo(apiKey, authToken, ct0, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// unlike(unfavorites) Tweet see details https://developer.twitter.com/en/docs/twitter-api/v1/tweets/post-and-engage/api-reference/post-favorites-destroy
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (ResultT)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResultT>> UnlikeTweetUsingPOSTAsyncWithHttpInfo (string apiKey, string authToken, string ct0, string id)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling TwitterSendTweesApiToolsApi->UnlikeTweetUsingPOST");
            // verify the required parameter 'authToken' is set
            if (authToken == null)
                throw new ApiException(400, "Missing required parameter 'authToken' when calling TwitterSendTweesApiToolsApi->UnlikeTweetUsingPOST");
            // verify the required parameter 'ct0' is set
            if (ct0 == null)
                throw new ApiException(400, "Missing required parameter 'ct0' when calling TwitterSendTweesApiToolsApi->UnlikeTweetUsingPOST");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TwitterSendTweesApiToolsApi->UnlikeTweetUsingPOST");

            var localVarPath = "/base/apitools/unlikeTweet";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", apiKey)); // query parameter
            if (authToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "auth_token", authToken)); // query parameter
            if (ct0 != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ct0", ct0)); // query parameter
            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UnlikeTweetUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultT>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultT) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultT)));
        }

        /// <summary>
        /// upload media (gif) 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="mediaUrl"></param>
        /// <returns>ResultT</returns>
        public ResultT UploadMediaUsingGET (string apiKey, string authToken, string ct0, string mediaUrl)
        {
             ApiResponse<ResultT> localVarResponse = UploadMediaUsingGETWithHttpInfo(apiKey, authToken, ct0, mediaUrl);
             return localVarResponse.Data;
        }

        /// <summary>
        /// upload media (gif) 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="mediaUrl"></param>
        /// <returns>ApiResponse of ResultT</returns>
        public ApiResponse< ResultT > UploadMediaUsingGETWithHttpInfo (string apiKey, string authToken, string ct0, string mediaUrl)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling TwitterSendTweesApiToolsApi->UploadMediaUsingGET");
            // verify the required parameter 'authToken' is set
            if (authToken == null)
                throw new ApiException(400, "Missing required parameter 'authToken' when calling TwitterSendTweesApiToolsApi->UploadMediaUsingGET");
            // verify the required parameter 'ct0' is set
            if (ct0 == null)
                throw new ApiException(400, "Missing required parameter 'ct0' when calling TwitterSendTweesApiToolsApi->UploadMediaUsingGET");
            // verify the required parameter 'mediaUrl' is set
            if (mediaUrl == null)
                throw new ApiException(400, "Missing required parameter 'mediaUrl' when calling TwitterSendTweesApiToolsApi->UploadMediaUsingGET");

            var localVarPath = "/base/apitools/uploadMedia";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", apiKey)); // query parameter
            if (authToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "auth_token", authToken)); // query parameter
            if (ct0 != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ct0", ct0)); // query parameter
            if (mediaUrl != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "media_url", mediaUrl)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UploadMediaUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultT>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultT) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultT)));
        }

        /// <summary>
        /// upload media (gif) 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="mediaUrl"></param>
        /// <returns>Task of ResultT</returns>
        public async System.Threading.Tasks.Task<ResultT> UploadMediaUsingGETAsync (string apiKey, string authToken, string ct0, string mediaUrl)
        {
             ApiResponse<ResultT> localVarResponse = await UploadMediaUsingGETAsyncWithHttpInfo(apiKey, authToken, ct0, mediaUrl);
             return localVarResponse.Data;

        }

        /// <summary>
        /// upload media (gif) 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="mediaUrl"></param>
        /// <returns>Task of ApiResponse (ResultT)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResultT>> UploadMediaUsingGETAsyncWithHttpInfo (string apiKey, string authToken, string ct0, string mediaUrl)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling TwitterSendTweesApiToolsApi->UploadMediaUsingGET");
            // verify the required parameter 'authToken' is set
            if (authToken == null)
                throw new ApiException(400, "Missing required parameter 'authToken' when calling TwitterSendTweesApiToolsApi->UploadMediaUsingGET");
            // verify the required parameter 'ct0' is set
            if (ct0 == null)
                throw new ApiException(400, "Missing required parameter 'ct0' when calling TwitterSendTweesApiToolsApi->UploadMediaUsingGET");
            // verify the required parameter 'mediaUrl' is set
            if (mediaUrl == null)
                throw new ApiException(400, "Missing required parameter 'mediaUrl' when calling TwitterSendTweesApiToolsApi->UploadMediaUsingGET");

            var localVarPath = "/base/apitools/uploadMedia";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", apiKey)); // query parameter
            if (authToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "auth_token", authToken)); // query parameter
            if (ct0 != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ct0", ct0)); // query parameter
            if (mediaUrl != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "media_url", mediaUrl)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UploadMediaUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultT>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultT) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultT)));
        }

        /// <summary>
        /// upload media (gif) 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="mediaUrl"></param>
        /// <returns>ResultT</returns>
        public ResultT UploadMediaUsingPOST (string apiKey, string authToken, string ct0, string mediaUrl)
        {
             ApiResponse<ResultT> localVarResponse = UploadMediaUsingPOSTWithHttpInfo(apiKey, authToken, ct0, mediaUrl);
             return localVarResponse.Data;
        }

        /// <summary>
        /// upload media (gif) 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="mediaUrl"></param>
        /// <returns>ApiResponse of ResultT</returns>
        public ApiResponse< ResultT > UploadMediaUsingPOSTWithHttpInfo (string apiKey, string authToken, string ct0, string mediaUrl)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling TwitterSendTweesApiToolsApi->UploadMediaUsingPOST");
            // verify the required parameter 'authToken' is set
            if (authToken == null)
                throw new ApiException(400, "Missing required parameter 'authToken' when calling TwitterSendTweesApiToolsApi->UploadMediaUsingPOST");
            // verify the required parameter 'ct0' is set
            if (ct0 == null)
                throw new ApiException(400, "Missing required parameter 'ct0' when calling TwitterSendTweesApiToolsApi->UploadMediaUsingPOST");
            // verify the required parameter 'mediaUrl' is set
            if (mediaUrl == null)
                throw new ApiException(400, "Missing required parameter 'mediaUrl' when calling TwitterSendTweesApiToolsApi->UploadMediaUsingPOST");

            var localVarPath = "/base/apitools/uploadMedia";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", apiKey)); // query parameter
            if (authToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "auth_token", authToken)); // query parameter
            if (ct0 != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ct0", ct0)); // query parameter
            if (mediaUrl != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "media_url", mediaUrl)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UploadMediaUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultT>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultT) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultT)));
        }

        /// <summary>
        /// upload media (gif) 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="mediaUrl"></param>
        /// <returns>Task of ResultT</returns>
        public async System.Threading.Tasks.Task<ResultT> UploadMediaUsingPOSTAsync (string apiKey, string authToken, string ct0, string mediaUrl)
        {
             ApiResponse<ResultT> localVarResponse = await UploadMediaUsingPOSTAsyncWithHttpInfo(apiKey, authToken, ct0, mediaUrl);
             return localVarResponse.Data;

        }

        /// <summary>
        /// upload media (gif) 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="mediaUrl"></param>
        /// <returns>Task of ApiResponse (ResultT)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResultT>> UploadMediaUsingPOSTAsyncWithHttpInfo (string apiKey, string authToken, string ct0, string mediaUrl)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling TwitterSendTweesApiToolsApi->UploadMediaUsingPOST");
            // verify the required parameter 'authToken' is set
            if (authToken == null)
                throw new ApiException(400, "Missing required parameter 'authToken' when calling TwitterSendTweesApiToolsApi->UploadMediaUsingPOST");
            // verify the required parameter 'ct0' is set
            if (ct0 == null)
                throw new ApiException(400, "Missing required parameter 'ct0' when calling TwitterSendTweesApiToolsApi->UploadMediaUsingPOST");
            // verify the required parameter 'mediaUrl' is set
            if (mediaUrl == null)
                throw new ApiException(400, "Missing required parameter 'mediaUrl' when calling TwitterSendTweesApiToolsApi->UploadMediaUsingPOST");

            var localVarPath = "/base/apitools/uploadMedia";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", apiKey)); // query parameter
            if (authToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "auth_token", authToken)); // query parameter
            if (ct0 != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ct0", ct0)); // query parameter
            if (mediaUrl != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "media_url", mediaUrl)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UploadMediaUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultT>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultT) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultT)));
        }

    }
}
