/* 
 * Utools_twitter_tools_api
 *
 * X (Twitter) API for search, Tweets, users, followers, images, media and more. Supports some v1.1 and v2 API endpoints, with more to come in the future!
 *
 * OpenAPI spec version: 1.1
 * Contact: huojiecs@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITwitterUsersApiToolsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// blocks Create
        /// </summary>
        /// <remarks>
        /// See details  https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/mute-block-report-users/api-reference/post-blocks-create
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="screenName"> (optional)</param>
        /// <param name="userId"> (optional, default to 1574242047661207552)</param>
        /// <returns>ResultT</returns>
        ResultT BlocksCreateUsingGET (string apiKey, string authToken, string ct0, string screenName = null, string userId = null);

        /// <summary>
        /// blocks Create
        /// </summary>
        /// <remarks>
        /// See details  https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/mute-block-report-users/api-reference/post-blocks-create
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="screenName"> (optional)</param>
        /// <param name="userId"> (optional, default to 1574242047661207552)</param>
        /// <returns>ApiResponse of ResultT</returns>
        ApiResponse<ResultT> BlocksCreateUsingGETWithHttpInfo (string apiKey, string authToken, string ct0, string screenName = null, string userId = null);
        /// <summary>
        /// blocks Create
        /// </summary>
        /// <remarks>
        /// See details  https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/mute-block-report-users/api-reference/post-blocks-create
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="screenName"> (optional)</param>
        /// <param name="userId"> (optional, default to 1574242047661207552)</param>
        /// <returns>ResultT</returns>
        ResultT BlocksCreateUsingPOST (string apiKey, string authToken, string ct0, string screenName = null, string userId = null);

        /// <summary>
        /// blocks Create
        /// </summary>
        /// <remarks>
        /// See details  https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/mute-block-report-users/api-reference/post-blocks-create
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="screenName"> (optional)</param>
        /// <param name="userId"> (optional, default to 1574242047661207552)</param>
        /// <returns>ApiResponse of ResultT</returns>
        ApiResponse<ResultT> BlocksCreateUsingPOSTWithHttpInfo (string apiKey, string authToken, string ct0, string screenName = null, string userId = null);
        /// <summary>
        /// blocks Destroy
        /// </summary>
        /// <remarks>
        /// https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/mute-block-report-users/api-reference/post-blocks-destroy
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="screenName"> (optional)</param>
        /// <param name="userId"> (optional, default to 44196397)</param>
        /// <returns>ResultT</returns>
        ResultT BlocksDestroyUsingGET (string apiKey, string authToken, string ct0, string screenName = null, string userId = null);

        /// <summary>
        /// blocks Destroy
        /// </summary>
        /// <remarks>
        /// https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/mute-block-report-users/api-reference/post-blocks-destroy
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="screenName"> (optional)</param>
        /// <param name="userId"> (optional, default to 44196397)</param>
        /// <returns>ApiResponse of ResultT</returns>
        ApiResponse<ResultT> BlocksDestroyUsingGETWithHttpInfo (string apiKey, string authToken, string ct0, string screenName = null, string userId = null);
        /// <summary>
        /// blocks Destroy
        /// </summary>
        /// <remarks>
        /// https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/mute-block-report-users/api-reference/post-blocks-destroy
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="screenName"> (optional)</param>
        /// <param name="userId"> (optional, default to 44196397)</param>
        /// <returns>ResultT</returns>
        ResultT BlocksDestroyUsingPOST (string apiKey, string authToken, string ct0, string screenName = null, string userId = null);

        /// <summary>
        /// blocks Destroy
        /// </summary>
        /// <remarks>
        /// https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/mute-block-report-users/api-reference/post-blocks-destroy
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="screenName"> (optional)</param>
        /// <param name="userId"> (optional, default to 44196397)</param>
        /// <returns>ApiResponse of ResultT</returns>
        ApiResponse<ResultT> BlocksDestroyUsingPOSTWithHttpInfo (string apiKey, string authToken, string ct0, string screenName = null, string userId = null);
        /// <summary>
        /// Get List by user_id or screen_name(get-lists-list)
        /// </summary>
        /// <remarks>
        /// See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/get-lists-list
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="screenName"> (optional, default to elonmusk)</param>
        /// <param name="userId"> (optional, default to 1574242047661207552)</param>
        /// <returns>ResultT</returns>
        ResultT GetListByUserIdOrScreenNameUsingGET (string apiKey, string screenName = null, string userId = null);

        /// <summary>
        /// Get List by user_id or screen_name(get-lists-list)
        /// </summary>
        /// <remarks>
        /// See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/get-lists-list
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="screenName"> (optional, default to elonmusk)</param>
        /// <param name="userId"> (optional, default to 1574242047661207552)</param>
        /// <returns>ApiResponse of ResultT</returns>
        ApiResponse<ResultT> GetListByUserIdOrScreenNameUsingGETWithHttpInfo (string apiKey, string screenName = null, string userId = null);
        /// <summary>
        /// Get List by user_id or screen_name(get-lists-list)
        /// </summary>
        /// <remarks>
        /// See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/get-lists-list
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="screenName"> (optional, default to elonmusk)</param>
        /// <param name="userId"> (optional, default to 1574242047661207552)</param>
        /// <returns>ResultT</returns>
        ResultT GetListByUserIdOrScreenNameUsingPOST (string apiKey, string screenName = null, string userId = null);

        /// <summary>
        /// Get List by user_id or screen_name(get-lists-list)
        /// </summary>
        /// <remarks>
        /// See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/get-lists-list
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="screenName"> (optional, default to elonmusk)</param>
        /// <param name="userId"> (optional, default to 1574242047661207552)</param>
        /// <returns>ApiResponse of ResultT</returns>
        ApiResponse<ResultT> GetListByUserIdOrScreenNameUsingPOSTWithHttpInfo (string apiKey, string screenName = null, string userId = null);
        /// <summary>
        /// Get List Members By ListId (get-lists-members)
        /// </summary>
        /// <remarks>
        /// See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/get-lists-members
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="listId"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>ResultT</returns>
        ResultT GetListMembersByListIdUsingGET (string apiKey, string listId, string cursor = null);

        /// <summary>
        /// Get List Members By ListId (get-lists-members)
        /// </summary>
        /// <remarks>
        /// See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/get-lists-members
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="listId"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>ApiResponse of ResultT</returns>
        ApiResponse<ResultT> GetListMembersByListIdUsingGETWithHttpInfo (string apiKey, string listId, string cursor = null);
        /// <summary>
        /// Get List Members By ListId (get-lists-members)
        /// </summary>
        /// <remarks>
        /// See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/get-lists-members
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="listId"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>ResultT</returns>
        ResultT GetListMembersByListIdUsingPOST (string apiKey, string listId, string cursor = null);

        /// <summary>
        /// Get List Members By ListId (get-lists-members)
        /// </summary>
        /// <remarks>
        /// See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/get-lists-members
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="listId"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>ApiResponse of ResultT</returns>
        ApiResponse<ResultT> GetListMembersByListIdUsingPOSTWithHttpInfo (string apiKey, string listId, string cursor = null);
        /// <summary>
        /// Get user information based on username or id (lookup)
        /// </summary>
        /// <remarks>
        /// See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-users-lookup
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="screenName"> (optional, default to elonmusk)</param>
        /// <param name="userId"> (optional, default to 1574242047661207552)</param>
        /// <returns>ResultT</returns>
        ResultT GetUserByIdOrNameLookUpUsingGET (string apiKey, string screenName = null, string userId = null);

        /// <summary>
        /// Get user information based on username or id (lookup)
        /// </summary>
        /// <remarks>
        /// See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-users-lookup
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="screenName"> (optional, default to elonmusk)</param>
        /// <param name="userId"> (optional, default to 1574242047661207552)</param>
        /// <returns>ApiResponse of ResultT</returns>
        ApiResponse<ResultT> GetUserByIdOrNameLookUpUsingGETWithHttpInfo (string apiKey, string screenName = null, string userId = null);
        /// <summary>
        /// Get user information based on username or id (lookup)
        /// </summary>
        /// <remarks>
        /// See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-users-lookup
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="screenName"> (optional, default to elonmusk)</param>
        /// <param name="userId"> (optional, default to 1574242047661207552)</param>
        /// <returns>ResultT</returns>
        ResultT GetUserByIdOrNameLookUpUsingPOST (string apiKey, string screenName = null, string userId = null);

        /// <summary>
        /// Get user information based on username or id (lookup)
        /// </summary>
        /// <remarks>
        /// See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-users-lookup
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="screenName"> (optional, default to elonmusk)</param>
        /// <param name="userId"> (optional, default to 1574242047661207552)</param>
        /// <returns>ApiResponse of ResultT</returns>
        ApiResponse<ResultT> GetUserByIdOrNameLookUpUsingPOSTWithHttpInfo (string apiKey, string screenName = null, string userId = null);
        /// <summary>
        /// Get user information based on username or id (show)
        /// </summary>
        /// <remarks>
        /// See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-users-show
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="screenName"> (optional, default to elonmusk)</param>
        /// <param name="userId"> (optional, default to 1574242047661207552)</param>
        /// <returns>ResultT</returns>
        ResultT GetUserByIdOrNameShowUsingGET (string apiKey, string screenName = null, string userId = null);

        /// <summary>
        /// Get user information based on username or id (show)
        /// </summary>
        /// <remarks>
        /// See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-users-show
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="screenName"> (optional, default to elonmusk)</param>
        /// <param name="userId"> (optional, default to 1574242047661207552)</param>
        /// <returns>ApiResponse of ResultT</returns>
        ApiResponse<ResultT> GetUserByIdOrNameShowUsingGETWithHttpInfo (string apiKey, string screenName = null, string userId = null);
        /// <summary>
        /// Get user information based on username or id (show)
        /// </summary>
        /// <remarks>
        /// See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-users-show
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="screenName"> (optional, default to elonmusk)</param>
        /// <param name="userId"> (optional, default to 1574242047661207552)</param>
        /// <returns>ResultT</returns>
        ResultT GetUserByIdOrNameShowUsingPOST (string apiKey, string screenName = null, string userId = null);

        /// <summary>
        /// Get user information based on username or id (show)
        /// </summary>
        /// <remarks>
        /// See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-users-show
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="screenName"> (optional, default to elonmusk)</param>
        /// <param name="userId"> (optional, default to 1574242047661207552)</param>
        /// <returns>ApiResponse of ResultT</returns>
        ApiResponse<ResultT> GetUserByIdOrNameShowUsingPOSTWithHttpInfo (string apiKey, string screenName = null, string userId = null);
        /// <summary>
        /// Get uerByIdRestId by V2
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="userId"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>ResultT</returns>
        ResultT UerByIdRestIdV2UsingGET (string apiKey, string userId, string cursor = null);

        /// <summary>
        /// Get uerByIdRestId by V2
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="userId"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>ApiResponse of ResultT</returns>
        ApiResponse<ResultT> UerByIdRestIdV2UsingGETWithHttpInfo (string apiKey, string userId, string cursor = null);
        /// <summary>
        /// Get uerByIdRestId by V2
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="userId"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>ResultT</returns>
        ResultT UerByIdRestIdV2UsingPOST (string apiKey, string userId, string cursor = null);

        /// <summary>
        /// Get uerByIdRestId by V2
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="userId"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>ApiResponse of ResultT</returns>
        ApiResponse<ResultT> UerByIdRestIdV2UsingPOSTWithHttpInfo (string apiKey, string userId, string cursor = null);
        /// <summary>
        /// Get userByScreenName by V2
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="screenName"></param>
        /// <returns>ResultT</returns>
        ResultT UserByScreenNameV2UsingGET (string apiKey, string screenName);

        /// <summary>
        /// Get userByScreenName by V2
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="screenName"></param>
        /// <returns>ApiResponse of ResultT</returns>
        ApiResponse<ResultT> UserByScreenNameV2UsingGETWithHttpInfo (string apiKey, string screenName);
        /// <summary>
        /// Get userByScreenName by V2
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="screenName"></param>
        /// <returns>ResultT</returns>
        ResultT UserByScreenNameV2UsingPOST (string apiKey, string screenName);

        /// <summary>
        /// Get userByScreenName by V2
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="screenName"></param>
        /// <returns>ApiResponse of ResultT</returns>
        ApiResponse<ResultT> UserByScreenNameV2UsingPOSTWithHttpInfo (string apiKey, string screenName);
        /// <summary>
        /// Get UserTimeline  tweets info
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="userId"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>ResultT</returns>
        ResultT UserTimelineUsingGET (string apiKey, string userId, string cursor = null);

        /// <summary>
        /// Get UserTimeline  tweets info
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="userId"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>ApiResponse of ResultT</returns>
        ApiResponse<ResultT> UserTimelineUsingGETWithHttpInfo (string apiKey, string userId, string cursor = null);
        /// <summary>
        /// Get UserTimeline  tweets info
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="userId"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>ResultT</returns>
        ResultT UserTimelineUsingPOST (string apiKey, string userId, string cursor = null);

        /// <summary>
        /// Get UserTimeline  tweets info
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="userId"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>ApiResponse of ResultT</returns>
        ApiResponse<ResultT> UserTimelineUsingPOSTWithHttpInfo (string apiKey, string userId, string cursor = null);
        /// <summary>
        /// Get UserTweets by V2
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="userId"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>ResultT</returns>
        ResultT UserTweetsV2UsingGET (string apiKey, string userId, string cursor = null);

        /// <summary>
        /// Get UserTweets by V2
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="userId"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>ApiResponse of ResultT</returns>
        ApiResponse<ResultT> UserTweetsV2UsingGETWithHttpInfo (string apiKey, string userId, string cursor = null);
        /// <summary>
        /// Get UserTweets by V2
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="userId"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>ResultT</returns>
        ResultT UserTweetsV2UsingPOST (string apiKey, string userId, string cursor = null);

        /// <summary>
        /// Get UserTweets by V2
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="userId"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>ApiResponse of ResultT</returns>
        ApiResponse<ResultT> UserTweetsV2UsingPOSTWithHttpInfo (string apiKey, string userId, string cursor = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// blocks Create
        /// </summary>
        /// <remarks>
        /// See details  https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/mute-block-report-users/api-reference/post-blocks-create
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="screenName"> (optional)</param>
        /// <param name="userId"> (optional, default to 1574242047661207552)</param>
        /// <returns>Task of ResultT</returns>
        System.Threading.Tasks.Task<ResultT> BlocksCreateUsingGETAsync (string apiKey, string authToken, string ct0, string screenName = null, string userId = null);

        /// <summary>
        /// blocks Create
        /// </summary>
        /// <remarks>
        /// See details  https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/mute-block-report-users/api-reference/post-blocks-create
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="screenName"> (optional)</param>
        /// <param name="userId"> (optional, default to 1574242047661207552)</param>
        /// <returns>Task of ApiResponse (ResultT)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResultT>> BlocksCreateUsingGETAsyncWithHttpInfo (string apiKey, string authToken, string ct0, string screenName = null, string userId = null);
        /// <summary>
        /// blocks Create
        /// </summary>
        /// <remarks>
        /// See details  https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/mute-block-report-users/api-reference/post-blocks-create
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="screenName"> (optional)</param>
        /// <param name="userId"> (optional, default to 1574242047661207552)</param>
        /// <returns>Task of ResultT</returns>
        System.Threading.Tasks.Task<ResultT> BlocksCreateUsingPOSTAsync (string apiKey, string authToken, string ct0, string screenName = null, string userId = null);

        /// <summary>
        /// blocks Create
        /// </summary>
        /// <remarks>
        /// See details  https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/mute-block-report-users/api-reference/post-blocks-create
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="screenName"> (optional)</param>
        /// <param name="userId"> (optional, default to 1574242047661207552)</param>
        /// <returns>Task of ApiResponse (ResultT)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResultT>> BlocksCreateUsingPOSTAsyncWithHttpInfo (string apiKey, string authToken, string ct0, string screenName = null, string userId = null);
        /// <summary>
        /// blocks Destroy
        /// </summary>
        /// <remarks>
        /// https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/mute-block-report-users/api-reference/post-blocks-destroy
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="screenName"> (optional)</param>
        /// <param name="userId"> (optional, default to 44196397)</param>
        /// <returns>Task of ResultT</returns>
        System.Threading.Tasks.Task<ResultT> BlocksDestroyUsingGETAsync (string apiKey, string authToken, string ct0, string screenName = null, string userId = null);

        /// <summary>
        /// blocks Destroy
        /// </summary>
        /// <remarks>
        /// https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/mute-block-report-users/api-reference/post-blocks-destroy
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="screenName"> (optional)</param>
        /// <param name="userId"> (optional, default to 44196397)</param>
        /// <returns>Task of ApiResponse (ResultT)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResultT>> BlocksDestroyUsingGETAsyncWithHttpInfo (string apiKey, string authToken, string ct0, string screenName = null, string userId = null);
        /// <summary>
        /// blocks Destroy
        /// </summary>
        /// <remarks>
        /// https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/mute-block-report-users/api-reference/post-blocks-destroy
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="screenName"> (optional)</param>
        /// <param name="userId"> (optional, default to 44196397)</param>
        /// <returns>Task of ResultT</returns>
        System.Threading.Tasks.Task<ResultT> BlocksDestroyUsingPOSTAsync (string apiKey, string authToken, string ct0, string screenName = null, string userId = null);

        /// <summary>
        /// blocks Destroy
        /// </summary>
        /// <remarks>
        /// https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/mute-block-report-users/api-reference/post-blocks-destroy
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="screenName"> (optional)</param>
        /// <param name="userId"> (optional, default to 44196397)</param>
        /// <returns>Task of ApiResponse (ResultT)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResultT>> BlocksDestroyUsingPOSTAsyncWithHttpInfo (string apiKey, string authToken, string ct0, string screenName = null, string userId = null);
        /// <summary>
        /// Get List by user_id or screen_name(get-lists-list)
        /// </summary>
        /// <remarks>
        /// See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/get-lists-list
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="screenName"> (optional, default to elonmusk)</param>
        /// <param name="userId"> (optional, default to 1574242047661207552)</param>
        /// <returns>Task of ResultT</returns>
        System.Threading.Tasks.Task<ResultT> GetListByUserIdOrScreenNameUsingGETAsync (string apiKey, string screenName = null, string userId = null);

        /// <summary>
        /// Get List by user_id or screen_name(get-lists-list)
        /// </summary>
        /// <remarks>
        /// See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/get-lists-list
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="screenName"> (optional, default to elonmusk)</param>
        /// <param name="userId"> (optional, default to 1574242047661207552)</param>
        /// <returns>Task of ApiResponse (ResultT)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResultT>> GetListByUserIdOrScreenNameUsingGETAsyncWithHttpInfo (string apiKey, string screenName = null, string userId = null);
        /// <summary>
        /// Get List by user_id or screen_name(get-lists-list)
        /// </summary>
        /// <remarks>
        /// See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/get-lists-list
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="screenName"> (optional, default to elonmusk)</param>
        /// <param name="userId"> (optional, default to 1574242047661207552)</param>
        /// <returns>Task of ResultT</returns>
        System.Threading.Tasks.Task<ResultT> GetListByUserIdOrScreenNameUsingPOSTAsync (string apiKey, string screenName = null, string userId = null);

        /// <summary>
        /// Get List by user_id or screen_name(get-lists-list)
        /// </summary>
        /// <remarks>
        /// See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/get-lists-list
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="screenName"> (optional, default to elonmusk)</param>
        /// <param name="userId"> (optional, default to 1574242047661207552)</param>
        /// <returns>Task of ApiResponse (ResultT)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResultT>> GetListByUserIdOrScreenNameUsingPOSTAsyncWithHttpInfo (string apiKey, string screenName = null, string userId = null);
        /// <summary>
        /// Get List Members By ListId (get-lists-members)
        /// </summary>
        /// <remarks>
        /// See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/get-lists-members
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="listId"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>Task of ResultT</returns>
        System.Threading.Tasks.Task<ResultT> GetListMembersByListIdUsingGETAsync (string apiKey, string listId, string cursor = null);

        /// <summary>
        /// Get List Members By ListId (get-lists-members)
        /// </summary>
        /// <remarks>
        /// See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/get-lists-members
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="listId"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>Task of ApiResponse (ResultT)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResultT>> GetListMembersByListIdUsingGETAsyncWithHttpInfo (string apiKey, string listId, string cursor = null);
        /// <summary>
        /// Get List Members By ListId (get-lists-members)
        /// </summary>
        /// <remarks>
        /// See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/get-lists-members
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="listId"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>Task of ResultT</returns>
        System.Threading.Tasks.Task<ResultT> GetListMembersByListIdUsingPOSTAsync (string apiKey, string listId, string cursor = null);

        /// <summary>
        /// Get List Members By ListId (get-lists-members)
        /// </summary>
        /// <remarks>
        /// See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/get-lists-members
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="listId"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>Task of ApiResponse (ResultT)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResultT>> GetListMembersByListIdUsingPOSTAsyncWithHttpInfo (string apiKey, string listId, string cursor = null);
        /// <summary>
        /// Get user information based on username or id (lookup)
        /// </summary>
        /// <remarks>
        /// See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-users-lookup
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="screenName"> (optional, default to elonmusk)</param>
        /// <param name="userId"> (optional, default to 1574242047661207552)</param>
        /// <returns>Task of ResultT</returns>
        System.Threading.Tasks.Task<ResultT> GetUserByIdOrNameLookUpUsingGETAsync (string apiKey, string screenName = null, string userId = null);

        /// <summary>
        /// Get user information based on username or id (lookup)
        /// </summary>
        /// <remarks>
        /// See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-users-lookup
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="screenName"> (optional, default to elonmusk)</param>
        /// <param name="userId"> (optional, default to 1574242047661207552)</param>
        /// <returns>Task of ApiResponse (ResultT)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResultT>> GetUserByIdOrNameLookUpUsingGETAsyncWithHttpInfo (string apiKey, string screenName = null, string userId = null);
        /// <summary>
        /// Get user information based on username or id (lookup)
        /// </summary>
        /// <remarks>
        /// See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-users-lookup
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="screenName"> (optional, default to elonmusk)</param>
        /// <param name="userId"> (optional, default to 1574242047661207552)</param>
        /// <returns>Task of ResultT</returns>
        System.Threading.Tasks.Task<ResultT> GetUserByIdOrNameLookUpUsingPOSTAsync (string apiKey, string screenName = null, string userId = null);

        /// <summary>
        /// Get user information based on username or id (lookup)
        /// </summary>
        /// <remarks>
        /// See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-users-lookup
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="screenName"> (optional, default to elonmusk)</param>
        /// <param name="userId"> (optional, default to 1574242047661207552)</param>
        /// <returns>Task of ApiResponse (ResultT)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResultT>> GetUserByIdOrNameLookUpUsingPOSTAsyncWithHttpInfo (string apiKey, string screenName = null, string userId = null);
        /// <summary>
        /// Get user information based on username or id (show)
        /// </summary>
        /// <remarks>
        /// See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-users-show
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="screenName"> (optional, default to elonmusk)</param>
        /// <param name="userId"> (optional, default to 1574242047661207552)</param>
        /// <returns>Task of ResultT</returns>
        System.Threading.Tasks.Task<ResultT> GetUserByIdOrNameShowUsingGETAsync (string apiKey, string screenName = null, string userId = null);

        /// <summary>
        /// Get user information based on username or id (show)
        /// </summary>
        /// <remarks>
        /// See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-users-show
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="screenName"> (optional, default to elonmusk)</param>
        /// <param name="userId"> (optional, default to 1574242047661207552)</param>
        /// <returns>Task of ApiResponse (ResultT)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResultT>> GetUserByIdOrNameShowUsingGETAsyncWithHttpInfo (string apiKey, string screenName = null, string userId = null);
        /// <summary>
        /// Get user information based on username or id (show)
        /// </summary>
        /// <remarks>
        /// See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-users-show
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="screenName"> (optional, default to elonmusk)</param>
        /// <param name="userId"> (optional, default to 1574242047661207552)</param>
        /// <returns>Task of ResultT</returns>
        System.Threading.Tasks.Task<ResultT> GetUserByIdOrNameShowUsingPOSTAsync (string apiKey, string screenName = null, string userId = null);

        /// <summary>
        /// Get user information based on username or id (show)
        /// </summary>
        /// <remarks>
        /// See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-users-show
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="screenName"> (optional, default to elonmusk)</param>
        /// <param name="userId"> (optional, default to 1574242047661207552)</param>
        /// <returns>Task of ApiResponse (ResultT)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResultT>> GetUserByIdOrNameShowUsingPOSTAsyncWithHttpInfo (string apiKey, string screenName = null, string userId = null);
        /// <summary>
        /// Get uerByIdRestId by V2
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="userId"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>Task of ResultT</returns>
        System.Threading.Tasks.Task<ResultT> UerByIdRestIdV2UsingGETAsync (string apiKey, string userId, string cursor = null);

        /// <summary>
        /// Get uerByIdRestId by V2
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="userId"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>Task of ApiResponse (ResultT)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResultT>> UerByIdRestIdV2UsingGETAsyncWithHttpInfo (string apiKey, string userId, string cursor = null);
        /// <summary>
        /// Get uerByIdRestId by V2
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="userId"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>Task of ResultT</returns>
        System.Threading.Tasks.Task<ResultT> UerByIdRestIdV2UsingPOSTAsync (string apiKey, string userId, string cursor = null);

        /// <summary>
        /// Get uerByIdRestId by V2
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="userId"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>Task of ApiResponse (ResultT)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResultT>> UerByIdRestIdV2UsingPOSTAsyncWithHttpInfo (string apiKey, string userId, string cursor = null);
        /// <summary>
        /// Get userByScreenName by V2
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="screenName"></param>
        /// <returns>Task of ResultT</returns>
        System.Threading.Tasks.Task<ResultT> UserByScreenNameV2UsingGETAsync (string apiKey, string screenName);

        /// <summary>
        /// Get userByScreenName by V2
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="screenName"></param>
        /// <returns>Task of ApiResponse (ResultT)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResultT>> UserByScreenNameV2UsingGETAsyncWithHttpInfo (string apiKey, string screenName);
        /// <summary>
        /// Get userByScreenName by V2
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="screenName"></param>
        /// <returns>Task of ResultT</returns>
        System.Threading.Tasks.Task<ResultT> UserByScreenNameV2UsingPOSTAsync (string apiKey, string screenName);

        /// <summary>
        /// Get userByScreenName by V2
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="screenName"></param>
        /// <returns>Task of ApiResponse (ResultT)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResultT>> UserByScreenNameV2UsingPOSTAsyncWithHttpInfo (string apiKey, string screenName);
        /// <summary>
        /// Get UserTimeline  tweets info
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="userId"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>Task of ResultT</returns>
        System.Threading.Tasks.Task<ResultT> UserTimelineUsingGETAsync (string apiKey, string userId, string cursor = null);

        /// <summary>
        /// Get UserTimeline  tweets info
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="userId"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>Task of ApiResponse (ResultT)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResultT>> UserTimelineUsingGETAsyncWithHttpInfo (string apiKey, string userId, string cursor = null);
        /// <summary>
        /// Get UserTimeline  tweets info
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="userId"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>Task of ResultT</returns>
        System.Threading.Tasks.Task<ResultT> UserTimelineUsingPOSTAsync (string apiKey, string userId, string cursor = null);

        /// <summary>
        /// Get UserTimeline  tweets info
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="userId"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>Task of ApiResponse (ResultT)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResultT>> UserTimelineUsingPOSTAsyncWithHttpInfo (string apiKey, string userId, string cursor = null);
        /// <summary>
        /// Get UserTweets by V2
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="userId"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>Task of ResultT</returns>
        System.Threading.Tasks.Task<ResultT> UserTweetsV2UsingGETAsync (string apiKey, string userId, string cursor = null);

        /// <summary>
        /// Get UserTweets by V2
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="userId"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>Task of ApiResponse (ResultT)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResultT>> UserTweetsV2UsingGETAsyncWithHttpInfo (string apiKey, string userId, string cursor = null);
        /// <summary>
        /// Get UserTweets by V2
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="userId"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>Task of ResultT</returns>
        System.Threading.Tasks.Task<ResultT> UserTweetsV2UsingPOSTAsync (string apiKey, string userId, string cursor = null);

        /// <summary>
        /// Get UserTweets by V2
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="userId"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>Task of ApiResponse (ResultT)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResultT>> UserTweetsV2UsingPOSTAsyncWithHttpInfo (string apiKey, string userId, string cursor = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TwitterUsersApiToolsApi : ITwitterUsersApiToolsApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TwitterUsersApiToolsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TwitterUsersApiToolsApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TwitterUsersApiToolsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TwitterUsersApiToolsApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// blocks Create See details  https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/mute-block-report-users/api-reference/post-blocks-create
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="screenName"> (optional)</param>
        /// <param name="userId"> (optional, default to 1574242047661207552)</param>
        /// <returns>ResultT</returns>
        public ResultT BlocksCreateUsingGET (string apiKey, string authToken, string ct0, string screenName = null, string userId = null)
        {
             ApiResponse<ResultT> localVarResponse = BlocksCreateUsingGETWithHttpInfo(apiKey, authToken, ct0, screenName, userId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// blocks Create See details  https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/mute-block-report-users/api-reference/post-blocks-create
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="screenName"> (optional)</param>
        /// <param name="userId"> (optional, default to 1574242047661207552)</param>
        /// <returns>ApiResponse of ResultT</returns>
        public ApiResponse< ResultT > BlocksCreateUsingGETWithHttpInfo (string apiKey, string authToken, string ct0, string screenName = null, string userId = null)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling TwitterUsersApiToolsApi->BlocksCreateUsingGET");
            // verify the required parameter 'authToken' is set
            if (authToken == null)
                throw new ApiException(400, "Missing required parameter 'authToken' when calling TwitterUsersApiToolsApi->BlocksCreateUsingGET");
            // verify the required parameter 'ct0' is set
            if (ct0 == null)
                throw new ApiException(400, "Missing required parameter 'ct0' when calling TwitterUsersApiToolsApi->BlocksCreateUsingGET");

            var localVarPath = "/base/apitools/blocksCreate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", apiKey)); // query parameter
            if (authToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "auth_token", authToken)); // query parameter
            if (ct0 != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ct0", ct0)); // query parameter
            if (screenName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "screenName", screenName)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BlocksCreateUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultT>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultT) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultT)));
        }

        /// <summary>
        /// blocks Create See details  https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/mute-block-report-users/api-reference/post-blocks-create
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="screenName"> (optional)</param>
        /// <param name="userId"> (optional, default to 1574242047661207552)</param>
        /// <returns>Task of ResultT</returns>
        public async System.Threading.Tasks.Task<ResultT> BlocksCreateUsingGETAsync (string apiKey, string authToken, string ct0, string screenName = null, string userId = null)
        {
             ApiResponse<ResultT> localVarResponse = await BlocksCreateUsingGETAsyncWithHttpInfo(apiKey, authToken, ct0, screenName, userId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// blocks Create See details  https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/mute-block-report-users/api-reference/post-blocks-create
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="screenName"> (optional)</param>
        /// <param name="userId"> (optional, default to 1574242047661207552)</param>
        /// <returns>Task of ApiResponse (ResultT)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResultT>> BlocksCreateUsingGETAsyncWithHttpInfo (string apiKey, string authToken, string ct0, string screenName = null, string userId = null)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling TwitterUsersApiToolsApi->BlocksCreateUsingGET");
            // verify the required parameter 'authToken' is set
            if (authToken == null)
                throw new ApiException(400, "Missing required parameter 'authToken' when calling TwitterUsersApiToolsApi->BlocksCreateUsingGET");
            // verify the required parameter 'ct0' is set
            if (ct0 == null)
                throw new ApiException(400, "Missing required parameter 'ct0' when calling TwitterUsersApiToolsApi->BlocksCreateUsingGET");

            var localVarPath = "/base/apitools/blocksCreate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", apiKey)); // query parameter
            if (authToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "auth_token", authToken)); // query parameter
            if (ct0 != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ct0", ct0)); // query parameter
            if (screenName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "screenName", screenName)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BlocksCreateUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultT>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultT) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultT)));
        }

        /// <summary>
        /// blocks Create See details  https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/mute-block-report-users/api-reference/post-blocks-create
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="screenName"> (optional)</param>
        /// <param name="userId"> (optional, default to 1574242047661207552)</param>
        /// <returns>ResultT</returns>
        public ResultT BlocksCreateUsingPOST (string apiKey, string authToken, string ct0, string screenName = null, string userId = null)
        {
             ApiResponse<ResultT> localVarResponse = BlocksCreateUsingPOSTWithHttpInfo(apiKey, authToken, ct0, screenName, userId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// blocks Create See details  https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/mute-block-report-users/api-reference/post-blocks-create
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="screenName"> (optional)</param>
        /// <param name="userId"> (optional, default to 1574242047661207552)</param>
        /// <returns>ApiResponse of ResultT</returns>
        public ApiResponse< ResultT > BlocksCreateUsingPOSTWithHttpInfo (string apiKey, string authToken, string ct0, string screenName = null, string userId = null)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling TwitterUsersApiToolsApi->BlocksCreateUsingPOST");
            // verify the required parameter 'authToken' is set
            if (authToken == null)
                throw new ApiException(400, "Missing required parameter 'authToken' when calling TwitterUsersApiToolsApi->BlocksCreateUsingPOST");
            // verify the required parameter 'ct0' is set
            if (ct0 == null)
                throw new ApiException(400, "Missing required parameter 'ct0' when calling TwitterUsersApiToolsApi->BlocksCreateUsingPOST");

            var localVarPath = "/base/apitools/blocksCreate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", apiKey)); // query parameter
            if (authToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "auth_token", authToken)); // query parameter
            if (ct0 != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ct0", ct0)); // query parameter
            if (screenName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "screenName", screenName)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BlocksCreateUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultT>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultT) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultT)));
        }

        /// <summary>
        /// blocks Create See details  https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/mute-block-report-users/api-reference/post-blocks-create
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="screenName"> (optional)</param>
        /// <param name="userId"> (optional, default to 1574242047661207552)</param>
        /// <returns>Task of ResultT</returns>
        public async System.Threading.Tasks.Task<ResultT> BlocksCreateUsingPOSTAsync (string apiKey, string authToken, string ct0, string screenName = null, string userId = null)
        {
             ApiResponse<ResultT> localVarResponse = await BlocksCreateUsingPOSTAsyncWithHttpInfo(apiKey, authToken, ct0, screenName, userId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// blocks Create See details  https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/mute-block-report-users/api-reference/post-blocks-create
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="screenName"> (optional)</param>
        /// <param name="userId"> (optional, default to 1574242047661207552)</param>
        /// <returns>Task of ApiResponse (ResultT)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResultT>> BlocksCreateUsingPOSTAsyncWithHttpInfo (string apiKey, string authToken, string ct0, string screenName = null, string userId = null)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling TwitterUsersApiToolsApi->BlocksCreateUsingPOST");
            // verify the required parameter 'authToken' is set
            if (authToken == null)
                throw new ApiException(400, "Missing required parameter 'authToken' when calling TwitterUsersApiToolsApi->BlocksCreateUsingPOST");
            // verify the required parameter 'ct0' is set
            if (ct0 == null)
                throw new ApiException(400, "Missing required parameter 'ct0' when calling TwitterUsersApiToolsApi->BlocksCreateUsingPOST");

            var localVarPath = "/base/apitools/blocksCreate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", apiKey)); // query parameter
            if (authToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "auth_token", authToken)); // query parameter
            if (ct0 != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ct0", ct0)); // query parameter
            if (screenName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "screenName", screenName)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BlocksCreateUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultT>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultT) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultT)));
        }

        /// <summary>
        /// blocks Destroy https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/mute-block-report-users/api-reference/post-blocks-destroy
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="screenName"> (optional)</param>
        /// <param name="userId"> (optional, default to 44196397)</param>
        /// <returns>ResultT</returns>
        public ResultT BlocksDestroyUsingGET (string apiKey, string authToken, string ct0, string screenName = null, string userId = null)
        {
             ApiResponse<ResultT> localVarResponse = BlocksDestroyUsingGETWithHttpInfo(apiKey, authToken, ct0, screenName, userId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// blocks Destroy https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/mute-block-report-users/api-reference/post-blocks-destroy
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="screenName"> (optional)</param>
        /// <param name="userId"> (optional, default to 44196397)</param>
        /// <returns>ApiResponse of ResultT</returns>
        public ApiResponse< ResultT > BlocksDestroyUsingGETWithHttpInfo (string apiKey, string authToken, string ct0, string screenName = null, string userId = null)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling TwitterUsersApiToolsApi->BlocksDestroyUsingGET");
            // verify the required parameter 'authToken' is set
            if (authToken == null)
                throw new ApiException(400, "Missing required parameter 'authToken' when calling TwitterUsersApiToolsApi->BlocksDestroyUsingGET");
            // verify the required parameter 'ct0' is set
            if (ct0 == null)
                throw new ApiException(400, "Missing required parameter 'ct0' when calling TwitterUsersApiToolsApi->BlocksDestroyUsingGET");

            var localVarPath = "/base/apitools/blocksDestroy";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", apiKey)); // query parameter
            if (authToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "auth_token", authToken)); // query parameter
            if (ct0 != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ct0", ct0)); // query parameter
            if (screenName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "screenName", screenName)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BlocksDestroyUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultT>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultT) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultT)));
        }

        /// <summary>
        /// blocks Destroy https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/mute-block-report-users/api-reference/post-blocks-destroy
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="screenName"> (optional)</param>
        /// <param name="userId"> (optional, default to 44196397)</param>
        /// <returns>Task of ResultT</returns>
        public async System.Threading.Tasks.Task<ResultT> BlocksDestroyUsingGETAsync (string apiKey, string authToken, string ct0, string screenName = null, string userId = null)
        {
             ApiResponse<ResultT> localVarResponse = await BlocksDestroyUsingGETAsyncWithHttpInfo(apiKey, authToken, ct0, screenName, userId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// blocks Destroy https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/mute-block-report-users/api-reference/post-blocks-destroy
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="screenName"> (optional)</param>
        /// <param name="userId"> (optional, default to 44196397)</param>
        /// <returns>Task of ApiResponse (ResultT)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResultT>> BlocksDestroyUsingGETAsyncWithHttpInfo (string apiKey, string authToken, string ct0, string screenName = null, string userId = null)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling TwitterUsersApiToolsApi->BlocksDestroyUsingGET");
            // verify the required parameter 'authToken' is set
            if (authToken == null)
                throw new ApiException(400, "Missing required parameter 'authToken' when calling TwitterUsersApiToolsApi->BlocksDestroyUsingGET");
            // verify the required parameter 'ct0' is set
            if (ct0 == null)
                throw new ApiException(400, "Missing required parameter 'ct0' when calling TwitterUsersApiToolsApi->BlocksDestroyUsingGET");

            var localVarPath = "/base/apitools/blocksDestroy";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", apiKey)); // query parameter
            if (authToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "auth_token", authToken)); // query parameter
            if (ct0 != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ct0", ct0)); // query parameter
            if (screenName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "screenName", screenName)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BlocksDestroyUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultT>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultT) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultT)));
        }

        /// <summary>
        /// blocks Destroy https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/mute-block-report-users/api-reference/post-blocks-destroy
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="screenName"> (optional)</param>
        /// <param name="userId"> (optional, default to 44196397)</param>
        /// <returns>ResultT</returns>
        public ResultT BlocksDestroyUsingPOST (string apiKey, string authToken, string ct0, string screenName = null, string userId = null)
        {
             ApiResponse<ResultT> localVarResponse = BlocksDestroyUsingPOSTWithHttpInfo(apiKey, authToken, ct0, screenName, userId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// blocks Destroy https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/mute-block-report-users/api-reference/post-blocks-destroy
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="screenName"> (optional)</param>
        /// <param name="userId"> (optional, default to 44196397)</param>
        /// <returns>ApiResponse of ResultT</returns>
        public ApiResponse< ResultT > BlocksDestroyUsingPOSTWithHttpInfo (string apiKey, string authToken, string ct0, string screenName = null, string userId = null)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling TwitterUsersApiToolsApi->BlocksDestroyUsingPOST");
            // verify the required parameter 'authToken' is set
            if (authToken == null)
                throw new ApiException(400, "Missing required parameter 'authToken' when calling TwitterUsersApiToolsApi->BlocksDestroyUsingPOST");
            // verify the required parameter 'ct0' is set
            if (ct0 == null)
                throw new ApiException(400, "Missing required parameter 'ct0' when calling TwitterUsersApiToolsApi->BlocksDestroyUsingPOST");

            var localVarPath = "/base/apitools/blocksDestroy";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", apiKey)); // query parameter
            if (authToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "auth_token", authToken)); // query parameter
            if (ct0 != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ct0", ct0)); // query parameter
            if (screenName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "screenName", screenName)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BlocksDestroyUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultT>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultT) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultT)));
        }

        /// <summary>
        /// blocks Destroy https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/mute-block-report-users/api-reference/post-blocks-destroy
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="screenName"> (optional)</param>
        /// <param name="userId"> (optional, default to 44196397)</param>
        /// <returns>Task of ResultT</returns>
        public async System.Threading.Tasks.Task<ResultT> BlocksDestroyUsingPOSTAsync (string apiKey, string authToken, string ct0, string screenName = null, string userId = null)
        {
             ApiResponse<ResultT> localVarResponse = await BlocksDestroyUsingPOSTAsyncWithHttpInfo(apiKey, authToken, ct0, screenName, userId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// blocks Destroy https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/mute-block-report-users/api-reference/post-blocks-destroy
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="screenName"> (optional)</param>
        /// <param name="userId"> (optional, default to 44196397)</param>
        /// <returns>Task of ApiResponse (ResultT)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResultT>> BlocksDestroyUsingPOSTAsyncWithHttpInfo (string apiKey, string authToken, string ct0, string screenName = null, string userId = null)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling TwitterUsersApiToolsApi->BlocksDestroyUsingPOST");
            // verify the required parameter 'authToken' is set
            if (authToken == null)
                throw new ApiException(400, "Missing required parameter 'authToken' when calling TwitterUsersApiToolsApi->BlocksDestroyUsingPOST");
            // verify the required parameter 'ct0' is set
            if (ct0 == null)
                throw new ApiException(400, "Missing required parameter 'ct0' when calling TwitterUsersApiToolsApi->BlocksDestroyUsingPOST");

            var localVarPath = "/base/apitools/blocksDestroy";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", apiKey)); // query parameter
            if (authToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "auth_token", authToken)); // query parameter
            if (ct0 != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ct0", ct0)); // query parameter
            if (screenName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "screenName", screenName)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BlocksDestroyUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultT>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultT) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultT)));
        }

        /// <summary>
        /// Get List by user_id or screen_name(get-lists-list) See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/get-lists-list
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="screenName"> (optional, default to elonmusk)</param>
        /// <param name="userId"> (optional, default to 1574242047661207552)</param>
        /// <returns>ResultT</returns>
        public ResultT GetListByUserIdOrScreenNameUsingGET (string apiKey, string screenName = null, string userId = null)
        {
             ApiResponse<ResultT> localVarResponse = GetListByUserIdOrScreenNameUsingGETWithHttpInfo(apiKey, screenName, userId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get List by user_id or screen_name(get-lists-list) See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/get-lists-list
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="screenName"> (optional, default to elonmusk)</param>
        /// <param name="userId"> (optional, default to 1574242047661207552)</param>
        /// <returns>ApiResponse of ResultT</returns>
        public ApiResponse< ResultT > GetListByUserIdOrScreenNameUsingGETWithHttpInfo (string apiKey, string screenName = null, string userId = null)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling TwitterUsersApiToolsApi->GetListByUserIdOrScreenNameUsingGET");

            var localVarPath = "/base/apitools/listByUserIdOrScreenName";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", apiKey)); // query parameter
            if (screenName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "screenName", screenName)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetListByUserIdOrScreenNameUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultT>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultT) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultT)));
        }

        /// <summary>
        /// Get List by user_id or screen_name(get-lists-list) See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/get-lists-list
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="screenName"> (optional, default to elonmusk)</param>
        /// <param name="userId"> (optional, default to 1574242047661207552)</param>
        /// <returns>Task of ResultT</returns>
        public async System.Threading.Tasks.Task<ResultT> GetListByUserIdOrScreenNameUsingGETAsync (string apiKey, string screenName = null, string userId = null)
        {
             ApiResponse<ResultT> localVarResponse = await GetListByUserIdOrScreenNameUsingGETAsyncWithHttpInfo(apiKey, screenName, userId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get List by user_id or screen_name(get-lists-list) See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/get-lists-list
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="screenName"> (optional, default to elonmusk)</param>
        /// <param name="userId"> (optional, default to 1574242047661207552)</param>
        /// <returns>Task of ApiResponse (ResultT)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResultT>> GetListByUserIdOrScreenNameUsingGETAsyncWithHttpInfo (string apiKey, string screenName = null, string userId = null)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling TwitterUsersApiToolsApi->GetListByUserIdOrScreenNameUsingGET");

            var localVarPath = "/base/apitools/listByUserIdOrScreenName";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", apiKey)); // query parameter
            if (screenName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "screenName", screenName)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetListByUserIdOrScreenNameUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultT>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultT) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultT)));
        }

        /// <summary>
        /// Get List by user_id or screen_name(get-lists-list) See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/get-lists-list
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="screenName"> (optional, default to elonmusk)</param>
        /// <param name="userId"> (optional, default to 1574242047661207552)</param>
        /// <returns>ResultT</returns>
        public ResultT GetListByUserIdOrScreenNameUsingPOST (string apiKey, string screenName = null, string userId = null)
        {
             ApiResponse<ResultT> localVarResponse = GetListByUserIdOrScreenNameUsingPOSTWithHttpInfo(apiKey, screenName, userId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get List by user_id or screen_name(get-lists-list) See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/get-lists-list
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="screenName"> (optional, default to elonmusk)</param>
        /// <param name="userId"> (optional, default to 1574242047661207552)</param>
        /// <returns>ApiResponse of ResultT</returns>
        public ApiResponse< ResultT > GetListByUserIdOrScreenNameUsingPOSTWithHttpInfo (string apiKey, string screenName = null, string userId = null)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling TwitterUsersApiToolsApi->GetListByUserIdOrScreenNameUsingPOST");

            var localVarPath = "/base/apitools/listByUserIdOrScreenName";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", apiKey)); // query parameter
            if (screenName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "screenName", screenName)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetListByUserIdOrScreenNameUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultT>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultT) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultT)));
        }

        /// <summary>
        /// Get List by user_id or screen_name(get-lists-list) See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/get-lists-list
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="screenName"> (optional, default to elonmusk)</param>
        /// <param name="userId"> (optional, default to 1574242047661207552)</param>
        /// <returns>Task of ResultT</returns>
        public async System.Threading.Tasks.Task<ResultT> GetListByUserIdOrScreenNameUsingPOSTAsync (string apiKey, string screenName = null, string userId = null)
        {
             ApiResponse<ResultT> localVarResponse = await GetListByUserIdOrScreenNameUsingPOSTAsyncWithHttpInfo(apiKey, screenName, userId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get List by user_id or screen_name(get-lists-list) See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/get-lists-list
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="screenName"> (optional, default to elonmusk)</param>
        /// <param name="userId"> (optional, default to 1574242047661207552)</param>
        /// <returns>Task of ApiResponse (ResultT)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResultT>> GetListByUserIdOrScreenNameUsingPOSTAsyncWithHttpInfo (string apiKey, string screenName = null, string userId = null)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling TwitterUsersApiToolsApi->GetListByUserIdOrScreenNameUsingPOST");

            var localVarPath = "/base/apitools/listByUserIdOrScreenName";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", apiKey)); // query parameter
            if (screenName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "screenName", screenName)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetListByUserIdOrScreenNameUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultT>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultT) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultT)));
        }

        /// <summary>
        /// Get List Members By ListId (get-lists-members) See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/get-lists-members
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="listId"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>ResultT</returns>
        public ResultT GetListMembersByListIdUsingGET (string apiKey, string listId, string cursor = null)
        {
             ApiResponse<ResultT> localVarResponse = GetListMembersByListIdUsingGETWithHttpInfo(apiKey, listId, cursor);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get List Members By ListId (get-lists-members) See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/get-lists-members
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="listId"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>ApiResponse of ResultT</returns>
        public ApiResponse< ResultT > GetListMembersByListIdUsingGETWithHttpInfo (string apiKey, string listId, string cursor = null)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling TwitterUsersApiToolsApi->GetListMembersByListIdUsingGET");
            // verify the required parameter 'listId' is set
            if (listId == null)
                throw new ApiException(400, "Missing required parameter 'listId' when calling TwitterUsersApiToolsApi->GetListMembersByListIdUsingGET");

            var localVarPath = "/base/apitools/listMembersByListId";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", apiKey)); // query parameter
            if (cursor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cursor", cursor)); // query parameter
            if (listId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "listId", listId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetListMembersByListIdUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultT>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultT) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultT)));
        }

        /// <summary>
        /// Get List Members By ListId (get-lists-members) See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/get-lists-members
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="listId"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>Task of ResultT</returns>
        public async System.Threading.Tasks.Task<ResultT> GetListMembersByListIdUsingGETAsync (string apiKey, string listId, string cursor = null)
        {
             ApiResponse<ResultT> localVarResponse = await GetListMembersByListIdUsingGETAsyncWithHttpInfo(apiKey, listId, cursor);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get List Members By ListId (get-lists-members) See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/get-lists-members
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="listId"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>Task of ApiResponse (ResultT)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResultT>> GetListMembersByListIdUsingGETAsyncWithHttpInfo (string apiKey, string listId, string cursor = null)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling TwitterUsersApiToolsApi->GetListMembersByListIdUsingGET");
            // verify the required parameter 'listId' is set
            if (listId == null)
                throw new ApiException(400, "Missing required parameter 'listId' when calling TwitterUsersApiToolsApi->GetListMembersByListIdUsingGET");

            var localVarPath = "/base/apitools/listMembersByListId";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", apiKey)); // query parameter
            if (cursor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cursor", cursor)); // query parameter
            if (listId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "listId", listId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetListMembersByListIdUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultT>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultT) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultT)));
        }

        /// <summary>
        /// Get List Members By ListId (get-lists-members) See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/get-lists-members
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="listId"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>ResultT</returns>
        public ResultT GetListMembersByListIdUsingPOST (string apiKey, string listId, string cursor = null)
        {
             ApiResponse<ResultT> localVarResponse = GetListMembersByListIdUsingPOSTWithHttpInfo(apiKey, listId, cursor);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get List Members By ListId (get-lists-members) See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/get-lists-members
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="listId"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>ApiResponse of ResultT</returns>
        public ApiResponse< ResultT > GetListMembersByListIdUsingPOSTWithHttpInfo (string apiKey, string listId, string cursor = null)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling TwitterUsersApiToolsApi->GetListMembersByListIdUsingPOST");
            // verify the required parameter 'listId' is set
            if (listId == null)
                throw new ApiException(400, "Missing required parameter 'listId' when calling TwitterUsersApiToolsApi->GetListMembersByListIdUsingPOST");

            var localVarPath = "/base/apitools/listMembersByListId";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", apiKey)); // query parameter
            if (cursor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cursor", cursor)); // query parameter
            if (listId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "listId", listId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetListMembersByListIdUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultT>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultT) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultT)));
        }

        /// <summary>
        /// Get List Members By ListId (get-lists-members) See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/get-lists-members
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="listId"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>Task of ResultT</returns>
        public async System.Threading.Tasks.Task<ResultT> GetListMembersByListIdUsingPOSTAsync (string apiKey, string listId, string cursor = null)
        {
             ApiResponse<ResultT> localVarResponse = await GetListMembersByListIdUsingPOSTAsyncWithHttpInfo(apiKey, listId, cursor);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get List Members By ListId (get-lists-members) See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/get-lists-members
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="listId"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>Task of ApiResponse (ResultT)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResultT>> GetListMembersByListIdUsingPOSTAsyncWithHttpInfo (string apiKey, string listId, string cursor = null)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling TwitterUsersApiToolsApi->GetListMembersByListIdUsingPOST");
            // verify the required parameter 'listId' is set
            if (listId == null)
                throw new ApiException(400, "Missing required parameter 'listId' when calling TwitterUsersApiToolsApi->GetListMembersByListIdUsingPOST");

            var localVarPath = "/base/apitools/listMembersByListId";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", apiKey)); // query parameter
            if (cursor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cursor", cursor)); // query parameter
            if (listId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "listId", listId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetListMembersByListIdUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultT>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultT) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultT)));
        }

        /// <summary>
        /// Get user information based on username or id (lookup) See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-users-lookup
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="screenName"> (optional, default to elonmusk)</param>
        /// <param name="userId"> (optional, default to 1574242047661207552)</param>
        /// <returns>ResultT</returns>
        public ResultT GetUserByIdOrNameLookUpUsingGET (string apiKey, string screenName = null, string userId = null)
        {
             ApiResponse<ResultT> localVarResponse = GetUserByIdOrNameLookUpUsingGETWithHttpInfo(apiKey, screenName, userId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get user information based on username or id (lookup) See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-users-lookup
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="screenName"> (optional, default to elonmusk)</param>
        /// <param name="userId"> (optional, default to 1574242047661207552)</param>
        /// <returns>ApiResponse of ResultT</returns>
        public ApiResponse< ResultT > GetUserByIdOrNameLookUpUsingGETWithHttpInfo (string apiKey, string screenName = null, string userId = null)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling TwitterUsersApiToolsApi->GetUserByIdOrNameLookUpUsingGET");

            var localVarPath = "/base/apitools/uerByIdOrNameLookUp";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", apiKey)); // query parameter
            if (screenName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "screenName", screenName)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUserByIdOrNameLookUpUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultT>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultT) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultT)));
        }

        /// <summary>
        /// Get user information based on username or id (lookup) See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-users-lookup
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="screenName"> (optional, default to elonmusk)</param>
        /// <param name="userId"> (optional, default to 1574242047661207552)</param>
        /// <returns>Task of ResultT</returns>
        public async System.Threading.Tasks.Task<ResultT> GetUserByIdOrNameLookUpUsingGETAsync (string apiKey, string screenName = null, string userId = null)
        {
             ApiResponse<ResultT> localVarResponse = await GetUserByIdOrNameLookUpUsingGETAsyncWithHttpInfo(apiKey, screenName, userId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get user information based on username or id (lookup) See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-users-lookup
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="screenName"> (optional, default to elonmusk)</param>
        /// <param name="userId"> (optional, default to 1574242047661207552)</param>
        /// <returns>Task of ApiResponse (ResultT)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResultT>> GetUserByIdOrNameLookUpUsingGETAsyncWithHttpInfo (string apiKey, string screenName = null, string userId = null)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling TwitterUsersApiToolsApi->GetUserByIdOrNameLookUpUsingGET");

            var localVarPath = "/base/apitools/uerByIdOrNameLookUp";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", apiKey)); // query parameter
            if (screenName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "screenName", screenName)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUserByIdOrNameLookUpUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultT>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultT) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultT)));
        }

        /// <summary>
        /// Get user information based on username or id (lookup) See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-users-lookup
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="screenName"> (optional, default to elonmusk)</param>
        /// <param name="userId"> (optional, default to 1574242047661207552)</param>
        /// <returns>ResultT</returns>
        public ResultT GetUserByIdOrNameLookUpUsingPOST (string apiKey, string screenName = null, string userId = null)
        {
             ApiResponse<ResultT> localVarResponse = GetUserByIdOrNameLookUpUsingPOSTWithHttpInfo(apiKey, screenName, userId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get user information based on username or id (lookup) See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-users-lookup
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="screenName"> (optional, default to elonmusk)</param>
        /// <param name="userId"> (optional, default to 1574242047661207552)</param>
        /// <returns>ApiResponse of ResultT</returns>
        public ApiResponse< ResultT > GetUserByIdOrNameLookUpUsingPOSTWithHttpInfo (string apiKey, string screenName = null, string userId = null)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling TwitterUsersApiToolsApi->GetUserByIdOrNameLookUpUsingPOST");

            var localVarPath = "/base/apitools/uerByIdOrNameLookUp";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", apiKey)); // query parameter
            if (screenName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "screenName", screenName)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUserByIdOrNameLookUpUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultT>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultT) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultT)));
        }

        /// <summary>
        /// Get user information based on username or id (lookup) See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-users-lookup
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="screenName"> (optional, default to elonmusk)</param>
        /// <param name="userId"> (optional, default to 1574242047661207552)</param>
        /// <returns>Task of ResultT</returns>
        public async System.Threading.Tasks.Task<ResultT> GetUserByIdOrNameLookUpUsingPOSTAsync (string apiKey, string screenName = null, string userId = null)
        {
             ApiResponse<ResultT> localVarResponse = await GetUserByIdOrNameLookUpUsingPOSTAsyncWithHttpInfo(apiKey, screenName, userId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get user information based on username or id (lookup) See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-users-lookup
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="screenName"> (optional, default to elonmusk)</param>
        /// <param name="userId"> (optional, default to 1574242047661207552)</param>
        /// <returns>Task of ApiResponse (ResultT)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResultT>> GetUserByIdOrNameLookUpUsingPOSTAsyncWithHttpInfo (string apiKey, string screenName = null, string userId = null)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling TwitterUsersApiToolsApi->GetUserByIdOrNameLookUpUsingPOST");

            var localVarPath = "/base/apitools/uerByIdOrNameLookUp";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", apiKey)); // query parameter
            if (screenName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "screenName", screenName)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUserByIdOrNameLookUpUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultT>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultT) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultT)));
        }

        /// <summary>
        /// Get user information based on username or id (show) See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-users-show
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="screenName"> (optional, default to elonmusk)</param>
        /// <param name="userId"> (optional, default to 1574242047661207552)</param>
        /// <returns>ResultT</returns>
        public ResultT GetUserByIdOrNameShowUsingGET (string apiKey, string screenName = null, string userId = null)
        {
             ApiResponse<ResultT> localVarResponse = GetUserByIdOrNameShowUsingGETWithHttpInfo(apiKey, screenName, userId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get user information based on username or id (show) See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-users-show
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="screenName"> (optional, default to elonmusk)</param>
        /// <param name="userId"> (optional, default to 1574242047661207552)</param>
        /// <returns>ApiResponse of ResultT</returns>
        public ApiResponse< ResultT > GetUserByIdOrNameShowUsingGETWithHttpInfo (string apiKey, string screenName = null, string userId = null)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling TwitterUsersApiToolsApi->GetUserByIdOrNameShowUsingGET");

            var localVarPath = "/base/apitools/uerByIdOrNameShow";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", apiKey)); // query parameter
            if (screenName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "screenName", screenName)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUserByIdOrNameShowUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultT>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultT) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultT)));
        }

        /// <summary>
        /// Get user information based on username or id (show) See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-users-show
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="screenName"> (optional, default to elonmusk)</param>
        /// <param name="userId"> (optional, default to 1574242047661207552)</param>
        /// <returns>Task of ResultT</returns>
        public async System.Threading.Tasks.Task<ResultT> GetUserByIdOrNameShowUsingGETAsync (string apiKey, string screenName = null, string userId = null)
        {
             ApiResponse<ResultT> localVarResponse = await GetUserByIdOrNameShowUsingGETAsyncWithHttpInfo(apiKey, screenName, userId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get user information based on username or id (show) See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-users-show
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="screenName"> (optional, default to elonmusk)</param>
        /// <param name="userId"> (optional, default to 1574242047661207552)</param>
        /// <returns>Task of ApiResponse (ResultT)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResultT>> GetUserByIdOrNameShowUsingGETAsyncWithHttpInfo (string apiKey, string screenName = null, string userId = null)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling TwitterUsersApiToolsApi->GetUserByIdOrNameShowUsingGET");

            var localVarPath = "/base/apitools/uerByIdOrNameShow";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", apiKey)); // query parameter
            if (screenName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "screenName", screenName)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUserByIdOrNameShowUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultT>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultT) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultT)));
        }

        /// <summary>
        /// Get user information based on username or id (show) See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-users-show
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="screenName"> (optional, default to elonmusk)</param>
        /// <param name="userId"> (optional, default to 1574242047661207552)</param>
        /// <returns>ResultT</returns>
        public ResultT GetUserByIdOrNameShowUsingPOST (string apiKey, string screenName = null, string userId = null)
        {
             ApiResponse<ResultT> localVarResponse = GetUserByIdOrNameShowUsingPOSTWithHttpInfo(apiKey, screenName, userId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get user information based on username or id (show) See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-users-show
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="screenName"> (optional, default to elonmusk)</param>
        /// <param name="userId"> (optional, default to 1574242047661207552)</param>
        /// <returns>ApiResponse of ResultT</returns>
        public ApiResponse< ResultT > GetUserByIdOrNameShowUsingPOSTWithHttpInfo (string apiKey, string screenName = null, string userId = null)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling TwitterUsersApiToolsApi->GetUserByIdOrNameShowUsingPOST");

            var localVarPath = "/base/apitools/uerByIdOrNameShow";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", apiKey)); // query parameter
            if (screenName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "screenName", screenName)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUserByIdOrNameShowUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultT>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultT) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultT)));
        }

        /// <summary>
        /// Get user information based on username or id (show) See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-users-show
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="screenName"> (optional, default to elonmusk)</param>
        /// <param name="userId"> (optional, default to 1574242047661207552)</param>
        /// <returns>Task of ResultT</returns>
        public async System.Threading.Tasks.Task<ResultT> GetUserByIdOrNameShowUsingPOSTAsync (string apiKey, string screenName = null, string userId = null)
        {
             ApiResponse<ResultT> localVarResponse = await GetUserByIdOrNameShowUsingPOSTAsyncWithHttpInfo(apiKey, screenName, userId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get user information based on username or id (show) See details https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-users-show
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="screenName"> (optional, default to elonmusk)</param>
        /// <param name="userId"> (optional, default to 1574242047661207552)</param>
        /// <returns>Task of ApiResponse (ResultT)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResultT>> GetUserByIdOrNameShowUsingPOSTAsyncWithHttpInfo (string apiKey, string screenName = null, string userId = null)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling TwitterUsersApiToolsApi->GetUserByIdOrNameShowUsingPOST");

            var localVarPath = "/base/apitools/uerByIdOrNameShow";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", apiKey)); // query parameter
            if (screenName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "screenName", screenName)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUserByIdOrNameShowUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultT>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultT) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultT)));
        }

        /// <summary>
        /// Get uerByIdRestId by V2 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="userId"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>ResultT</returns>
        public ResultT UerByIdRestIdV2UsingGET (string apiKey, string userId, string cursor = null)
        {
             ApiResponse<ResultT> localVarResponse = UerByIdRestIdV2UsingGETWithHttpInfo(apiKey, userId, cursor);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get uerByIdRestId by V2 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="userId"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>ApiResponse of ResultT</returns>
        public ApiResponse< ResultT > UerByIdRestIdV2UsingGETWithHttpInfo (string apiKey, string userId, string cursor = null)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling TwitterUsersApiToolsApi->UerByIdRestIdV2UsingGET");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling TwitterUsersApiToolsApi->UerByIdRestIdV2UsingGET");

            var localVarPath = "/base/apitools/uerByIdRestIdV2";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", apiKey)); // query parameter
            if (cursor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cursor", cursor)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UerByIdRestIdV2UsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultT>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultT) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultT)));
        }

        /// <summary>
        /// Get uerByIdRestId by V2 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="userId"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>Task of ResultT</returns>
        public async System.Threading.Tasks.Task<ResultT> UerByIdRestIdV2UsingGETAsync (string apiKey, string userId, string cursor = null)
        {
             ApiResponse<ResultT> localVarResponse = await UerByIdRestIdV2UsingGETAsyncWithHttpInfo(apiKey, userId, cursor);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get uerByIdRestId by V2 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="userId"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>Task of ApiResponse (ResultT)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResultT>> UerByIdRestIdV2UsingGETAsyncWithHttpInfo (string apiKey, string userId, string cursor = null)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling TwitterUsersApiToolsApi->UerByIdRestIdV2UsingGET");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling TwitterUsersApiToolsApi->UerByIdRestIdV2UsingGET");

            var localVarPath = "/base/apitools/uerByIdRestIdV2";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", apiKey)); // query parameter
            if (cursor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cursor", cursor)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UerByIdRestIdV2UsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultT>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultT) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultT)));
        }

        /// <summary>
        /// Get uerByIdRestId by V2 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="userId"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>ResultT</returns>
        public ResultT UerByIdRestIdV2UsingPOST (string apiKey, string userId, string cursor = null)
        {
             ApiResponse<ResultT> localVarResponse = UerByIdRestIdV2UsingPOSTWithHttpInfo(apiKey, userId, cursor);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get uerByIdRestId by V2 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="userId"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>ApiResponse of ResultT</returns>
        public ApiResponse< ResultT > UerByIdRestIdV2UsingPOSTWithHttpInfo (string apiKey, string userId, string cursor = null)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling TwitterUsersApiToolsApi->UerByIdRestIdV2UsingPOST");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling TwitterUsersApiToolsApi->UerByIdRestIdV2UsingPOST");

            var localVarPath = "/base/apitools/uerByIdRestIdV2";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", apiKey)); // query parameter
            if (cursor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cursor", cursor)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UerByIdRestIdV2UsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultT>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultT) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultT)));
        }

        /// <summary>
        /// Get uerByIdRestId by V2 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="userId"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>Task of ResultT</returns>
        public async System.Threading.Tasks.Task<ResultT> UerByIdRestIdV2UsingPOSTAsync (string apiKey, string userId, string cursor = null)
        {
             ApiResponse<ResultT> localVarResponse = await UerByIdRestIdV2UsingPOSTAsyncWithHttpInfo(apiKey, userId, cursor);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get uerByIdRestId by V2 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="userId"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>Task of ApiResponse (ResultT)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResultT>> UerByIdRestIdV2UsingPOSTAsyncWithHttpInfo (string apiKey, string userId, string cursor = null)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling TwitterUsersApiToolsApi->UerByIdRestIdV2UsingPOST");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling TwitterUsersApiToolsApi->UerByIdRestIdV2UsingPOST");

            var localVarPath = "/base/apitools/uerByIdRestIdV2";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", apiKey)); // query parameter
            if (cursor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cursor", cursor)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UerByIdRestIdV2UsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultT>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultT) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultT)));
        }

        /// <summary>
        /// Get userByScreenName by V2 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="screenName"></param>
        /// <returns>ResultT</returns>
        public ResultT UserByScreenNameV2UsingGET (string apiKey, string screenName)
        {
             ApiResponse<ResultT> localVarResponse = UserByScreenNameV2UsingGETWithHttpInfo(apiKey, screenName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get userByScreenName by V2 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="screenName"></param>
        /// <returns>ApiResponse of ResultT</returns>
        public ApiResponse< ResultT > UserByScreenNameV2UsingGETWithHttpInfo (string apiKey, string screenName)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling TwitterUsersApiToolsApi->UserByScreenNameV2UsingGET");
            // verify the required parameter 'screenName' is set
            if (screenName == null)
                throw new ApiException(400, "Missing required parameter 'screenName' when calling TwitterUsersApiToolsApi->UserByScreenNameV2UsingGET");

            var localVarPath = "/base/apitools/userByScreenNameV2";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", apiKey)); // query parameter
            if (screenName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "screenName", screenName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserByScreenNameV2UsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultT>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultT) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultT)));
        }

        /// <summary>
        /// Get userByScreenName by V2 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="screenName"></param>
        /// <returns>Task of ResultT</returns>
        public async System.Threading.Tasks.Task<ResultT> UserByScreenNameV2UsingGETAsync (string apiKey, string screenName)
        {
             ApiResponse<ResultT> localVarResponse = await UserByScreenNameV2UsingGETAsyncWithHttpInfo(apiKey, screenName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get userByScreenName by V2 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="screenName"></param>
        /// <returns>Task of ApiResponse (ResultT)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResultT>> UserByScreenNameV2UsingGETAsyncWithHttpInfo (string apiKey, string screenName)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling TwitterUsersApiToolsApi->UserByScreenNameV2UsingGET");
            // verify the required parameter 'screenName' is set
            if (screenName == null)
                throw new ApiException(400, "Missing required parameter 'screenName' when calling TwitterUsersApiToolsApi->UserByScreenNameV2UsingGET");

            var localVarPath = "/base/apitools/userByScreenNameV2";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", apiKey)); // query parameter
            if (screenName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "screenName", screenName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserByScreenNameV2UsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultT>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultT) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultT)));
        }

        /// <summary>
        /// Get userByScreenName by V2 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="screenName"></param>
        /// <returns>ResultT</returns>
        public ResultT UserByScreenNameV2UsingPOST (string apiKey, string screenName)
        {
             ApiResponse<ResultT> localVarResponse = UserByScreenNameV2UsingPOSTWithHttpInfo(apiKey, screenName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get userByScreenName by V2 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="screenName"></param>
        /// <returns>ApiResponse of ResultT</returns>
        public ApiResponse< ResultT > UserByScreenNameV2UsingPOSTWithHttpInfo (string apiKey, string screenName)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling TwitterUsersApiToolsApi->UserByScreenNameV2UsingPOST");
            // verify the required parameter 'screenName' is set
            if (screenName == null)
                throw new ApiException(400, "Missing required parameter 'screenName' when calling TwitterUsersApiToolsApi->UserByScreenNameV2UsingPOST");

            var localVarPath = "/base/apitools/userByScreenNameV2";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", apiKey)); // query parameter
            if (screenName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "screenName", screenName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserByScreenNameV2UsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultT>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultT) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultT)));
        }

        /// <summary>
        /// Get userByScreenName by V2 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="screenName"></param>
        /// <returns>Task of ResultT</returns>
        public async System.Threading.Tasks.Task<ResultT> UserByScreenNameV2UsingPOSTAsync (string apiKey, string screenName)
        {
             ApiResponse<ResultT> localVarResponse = await UserByScreenNameV2UsingPOSTAsyncWithHttpInfo(apiKey, screenName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get userByScreenName by V2 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="screenName"></param>
        /// <returns>Task of ApiResponse (ResultT)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResultT>> UserByScreenNameV2UsingPOSTAsyncWithHttpInfo (string apiKey, string screenName)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling TwitterUsersApiToolsApi->UserByScreenNameV2UsingPOST");
            // verify the required parameter 'screenName' is set
            if (screenName == null)
                throw new ApiException(400, "Missing required parameter 'screenName' when calling TwitterUsersApiToolsApi->UserByScreenNameV2UsingPOST");

            var localVarPath = "/base/apitools/userByScreenNameV2";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", apiKey)); // query parameter
            if (screenName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "screenName", screenName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserByScreenNameV2UsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultT>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultT) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultT)));
        }

        /// <summary>
        /// Get UserTimeline  tweets info 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="userId"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>ResultT</returns>
        public ResultT UserTimelineUsingGET (string apiKey, string userId, string cursor = null)
        {
             ApiResponse<ResultT> localVarResponse = UserTimelineUsingGETWithHttpInfo(apiKey, userId, cursor);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get UserTimeline  tweets info 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="userId"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>ApiResponse of ResultT</returns>
        public ApiResponse< ResultT > UserTimelineUsingGETWithHttpInfo (string apiKey, string userId, string cursor = null)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling TwitterUsersApiToolsApi->UserTimelineUsingGET");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling TwitterUsersApiToolsApi->UserTimelineUsingGET");

            var localVarPath = "/base/apitools/userTimeline";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", apiKey)); // query parameter
            if (cursor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cursor", cursor)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserTimelineUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultT>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultT) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultT)));
        }

        /// <summary>
        /// Get UserTimeline  tweets info 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="userId"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>Task of ResultT</returns>
        public async System.Threading.Tasks.Task<ResultT> UserTimelineUsingGETAsync (string apiKey, string userId, string cursor = null)
        {
             ApiResponse<ResultT> localVarResponse = await UserTimelineUsingGETAsyncWithHttpInfo(apiKey, userId, cursor);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get UserTimeline  tweets info 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="userId"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>Task of ApiResponse (ResultT)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResultT>> UserTimelineUsingGETAsyncWithHttpInfo (string apiKey, string userId, string cursor = null)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling TwitterUsersApiToolsApi->UserTimelineUsingGET");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling TwitterUsersApiToolsApi->UserTimelineUsingGET");

            var localVarPath = "/base/apitools/userTimeline";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", apiKey)); // query parameter
            if (cursor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cursor", cursor)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserTimelineUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultT>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultT) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultT)));
        }

        /// <summary>
        /// Get UserTimeline  tweets info 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="userId"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>ResultT</returns>
        public ResultT UserTimelineUsingPOST (string apiKey, string userId, string cursor = null)
        {
             ApiResponse<ResultT> localVarResponse = UserTimelineUsingPOSTWithHttpInfo(apiKey, userId, cursor);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get UserTimeline  tweets info 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="userId"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>ApiResponse of ResultT</returns>
        public ApiResponse< ResultT > UserTimelineUsingPOSTWithHttpInfo (string apiKey, string userId, string cursor = null)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling TwitterUsersApiToolsApi->UserTimelineUsingPOST");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling TwitterUsersApiToolsApi->UserTimelineUsingPOST");

            var localVarPath = "/base/apitools/userTimeline";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", apiKey)); // query parameter
            if (cursor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cursor", cursor)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserTimelineUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultT>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultT) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultT)));
        }

        /// <summary>
        /// Get UserTimeline  tweets info 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="userId"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>Task of ResultT</returns>
        public async System.Threading.Tasks.Task<ResultT> UserTimelineUsingPOSTAsync (string apiKey, string userId, string cursor = null)
        {
             ApiResponse<ResultT> localVarResponse = await UserTimelineUsingPOSTAsyncWithHttpInfo(apiKey, userId, cursor);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get UserTimeline  tweets info 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="userId"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>Task of ApiResponse (ResultT)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResultT>> UserTimelineUsingPOSTAsyncWithHttpInfo (string apiKey, string userId, string cursor = null)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling TwitterUsersApiToolsApi->UserTimelineUsingPOST");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling TwitterUsersApiToolsApi->UserTimelineUsingPOST");

            var localVarPath = "/base/apitools/userTimeline";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", apiKey)); // query parameter
            if (cursor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cursor", cursor)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserTimelineUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultT>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultT) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultT)));
        }

        /// <summary>
        /// Get UserTweets by V2 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="userId"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>ResultT</returns>
        public ResultT UserTweetsV2UsingGET (string apiKey, string userId, string cursor = null)
        {
             ApiResponse<ResultT> localVarResponse = UserTweetsV2UsingGETWithHttpInfo(apiKey, userId, cursor);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get UserTweets by V2 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="userId"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>ApiResponse of ResultT</returns>
        public ApiResponse< ResultT > UserTweetsV2UsingGETWithHttpInfo (string apiKey, string userId, string cursor = null)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling TwitterUsersApiToolsApi->UserTweetsV2UsingGET");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling TwitterUsersApiToolsApi->UserTweetsV2UsingGET");

            var localVarPath = "/base/apitools/userTweetsV2";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", apiKey)); // query parameter
            if (cursor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cursor", cursor)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserTweetsV2UsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultT>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultT) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultT)));
        }

        /// <summary>
        /// Get UserTweets by V2 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="userId"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>Task of ResultT</returns>
        public async System.Threading.Tasks.Task<ResultT> UserTweetsV2UsingGETAsync (string apiKey, string userId, string cursor = null)
        {
             ApiResponse<ResultT> localVarResponse = await UserTweetsV2UsingGETAsyncWithHttpInfo(apiKey, userId, cursor);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get UserTweets by V2 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="userId"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>Task of ApiResponse (ResultT)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResultT>> UserTweetsV2UsingGETAsyncWithHttpInfo (string apiKey, string userId, string cursor = null)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling TwitterUsersApiToolsApi->UserTweetsV2UsingGET");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling TwitterUsersApiToolsApi->UserTweetsV2UsingGET");

            var localVarPath = "/base/apitools/userTweetsV2";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", apiKey)); // query parameter
            if (cursor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cursor", cursor)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserTweetsV2UsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultT>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultT) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultT)));
        }

        /// <summary>
        /// Get UserTweets by V2 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="userId"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>ResultT</returns>
        public ResultT UserTweetsV2UsingPOST (string apiKey, string userId, string cursor = null)
        {
             ApiResponse<ResultT> localVarResponse = UserTweetsV2UsingPOSTWithHttpInfo(apiKey, userId, cursor);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get UserTweets by V2 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="userId"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>ApiResponse of ResultT</returns>
        public ApiResponse< ResultT > UserTweetsV2UsingPOSTWithHttpInfo (string apiKey, string userId, string cursor = null)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling TwitterUsersApiToolsApi->UserTweetsV2UsingPOST");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling TwitterUsersApiToolsApi->UserTweetsV2UsingPOST");

            var localVarPath = "/base/apitools/userTweetsV2";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", apiKey)); // query parameter
            if (cursor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cursor", cursor)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserTweetsV2UsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultT>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultT) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultT)));
        }

        /// <summary>
        /// Get UserTweets by V2 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="userId"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>Task of ResultT</returns>
        public async System.Threading.Tasks.Task<ResultT> UserTweetsV2UsingPOSTAsync (string apiKey, string userId, string cursor = null)
        {
             ApiResponse<ResultT> localVarResponse = await UserTweetsV2UsingPOSTAsyncWithHttpInfo(apiKey, userId, cursor);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get UserTweets by V2 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="userId"></param>
        /// <param name="cursor"> (optional, default to -1)</param>
        /// <returns>Task of ApiResponse (ResultT)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResultT>> UserTweetsV2UsingPOSTAsyncWithHttpInfo (string apiKey, string userId, string cursor = null)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling TwitterUsersApiToolsApi->UserTweetsV2UsingPOST");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling TwitterUsersApiToolsApi->UserTweetsV2UsingPOST");

            var localVarPath = "/base/apitools/userTweetsV2";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", apiKey)); // query parameter
            if (cursor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cursor", cursor)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UserTweetsV2UsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultT>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultT) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultT)));
        }

    }
}
