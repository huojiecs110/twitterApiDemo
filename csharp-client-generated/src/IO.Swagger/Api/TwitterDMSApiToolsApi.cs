/* 
 * Utools_twitter_tools_api
 *
 * X (Twitter) API for search, Tweets, users, followers, images, media and more. Supports some v1.1 and v2 API endpoints, with more to come in the future!
 *
 * OpenAPI spec version: 1.1
 * Contact: huojiecs@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITwitterDMSApiToolsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// get DMS List
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="cursor"></param>
        /// <returns>ResultT</returns>
        ResultT GetDMSListV2UsingGET (string apiKey, string authToken, string ct0, string cursor);

        /// <summary>
        /// get DMS List
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="cursor"></param>
        /// <returns>ApiResponse of ResultT</returns>
        ApiResponse<ResultT> GetDMSListV2UsingGETWithHttpInfo (string apiKey, string authToken, string ct0, string cursor);
        /// <summary>
        /// get DMS List
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="cursor"></param>
        /// <returns>ResultT</returns>
        ResultT GetDMSListV2UsingPOST (string apiKey, string authToken, string ct0, string cursor);

        /// <summary>
        /// get DMS List
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="cursor"></param>
        /// <returns>ApiResponse of ResultT</returns>
        ApiResponse<ResultT> GetDMSListV2UsingPOSTWithHttpInfo (string apiKey, string authToken, string ct0, string cursor);
        /// <summary>
        /// receiving events
        /// </summary>
        /// <remarks>
        /// See details https://developer.twitter.com/en/docs/twitter-api/v1/direct-messages/sending-and-receiving/api-reference/get-event&lt;br&gt;  how to get &lt;b&gt;auth_token and ct0&lt;/b&gt;? &lt;br&gt; https://twitter.com/chen22218/status/1722138510680043555 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="id"></param>
        /// <returns>ResultT</returns>
        ResultT GetDMSUsingGET (string apiKey, string authToken, string ct0, string id);

        /// <summary>
        /// receiving events
        /// </summary>
        /// <remarks>
        /// See details https://developer.twitter.com/en/docs/twitter-api/v1/direct-messages/sending-and-receiving/api-reference/get-event&lt;br&gt;  how to get &lt;b&gt;auth_token and ct0&lt;/b&gt;? &lt;br&gt; https://twitter.com/chen22218/status/1722138510680043555 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="id"></param>
        /// <returns>ApiResponse of ResultT</returns>
        ApiResponse<ResultT> GetDMSUsingGETWithHttpInfo (string apiKey, string authToken, string ct0, string id);
        /// <summary>
        /// receiving events
        /// </summary>
        /// <remarks>
        /// See details https://developer.twitter.com/en/docs/twitter-api/v1/direct-messages/sending-and-receiving/api-reference/get-event&lt;br&gt;  how to get &lt;b&gt;auth_token and ct0&lt;/b&gt;? &lt;br&gt; https://twitter.com/chen22218/status/1722138510680043555 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="id"></param>
        /// <returns>ResultT</returns>
        ResultT GetDMSUsingPOST (string apiKey, string authToken, string ct0, string id);

        /// <summary>
        /// receiving events
        /// </summary>
        /// <remarks>
        /// See details https://developer.twitter.com/en/docs/twitter-api/v1/direct-messages/sending-and-receiving/api-reference/get-event&lt;br&gt;  how to get &lt;b&gt;auth_token and ct0&lt;/b&gt;? &lt;br&gt; https://twitter.com/chen22218/status/1722138510680043555 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="id"></param>
        /// <returns>ApiResponse of ResultT</returns>
        ApiResponse<ResultT> GetDMSUsingPOSTWithHttpInfo (string apiKey, string authToken, string ct0, string id);
        /// <summary>
        /// sendDMSMedia events.
        /// </summary>
        /// <remarks>
        /// See details https://developer.twitter.com/en/docs/twitter-api/v1/direct-messages/sending-and-receiving/api-reference/new-event&lt;br&gt;  how to get &lt;b&gt;auth_token and ct0&lt;/b&gt;? &lt;br&gt; https://twitter.com/chen22218/status/1722138510680043555 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="attachmentMediaId"></param>
        /// <param name="attachmentType"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="recipientId"></param>
        /// <param name="text"></param>
        /// <param name="type"></param>
        /// <param name="quickReplyType">Returns results with an ID less than (that is, older than) or equal to the specified ID. (optional)</param>
        /// <returns>ResultT</returns>
        ResultT SendDMSMediaUsingGET (string apiKey, string attachmentMediaId, string attachmentType, string authToken, string ct0, string recipientId, string text, string type, string quickReplyType = null);

        /// <summary>
        /// sendDMSMedia events.
        /// </summary>
        /// <remarks>
        /// See details https://developer.twitter.com/en/docs/twitter-api/v1/direct-messages/sending-and-receiving/api-reference/new-event&lt;br&gt;  how to get &lt;b&gt;auth_token and ct0&lt;/b&gt;? &lt;br&gt; https://twitter.com/chen22218/status/1722138510680043555 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="attachmentMediaId"></param>
        /// <param name="attachmentType"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="recipientId"></param>
        /// <param name="text"></param>
        /// <param name="type"></param>
        /// <param name="quickReplyType">Returns results with an ID less than (that is, older than) or equal to the specified ID. (optional)</param>
        /// <returns>ApiResponse of ResultT</returns>
        ApiResponse<ResultT> SendDMSMediaUsingGETWithHttpInfo (string apiKey, string attachmentMediaId, string attachmentType, string authToken, string ct0, string recipientId, string text, string type, string quickReplyType = null);
        /// <summary>
        /// sendDMSMedia events.
        /// </summary>
        /// <remarks>
        /// See details https://developer.twitter.com/en/docs/twitter-api/v1/direct-messages/sending-and-receiving/api-reference/new-event&lt;br&gt;  how to get &lt;b&gt;auth_token and ct0&lt;/b&gt;? &lt;br&gt; https://twitter.com/chen22218/status/1722138510680043555 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="attachmentMediaId"></param>
        /// <param name="attachmentType"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="recipientId"></param>
        /// <param name="text"></param>
        /// <param name="type"></param>
        /// <param name="quickReplyType">Returns results with an ID less than (that is, older than) or equal to the specified ID. (optional)</param>
        /// <returns>ResultT</returns>
        ResultT SendDMSMediaUsingPOST (string apiKey, string attachmentMediaId, string attachmentType, string authToken, string ct0, string recipientId, string text, string type, string quickReplyType = null);

        /// <summary>
        /// sendDMSMedia events.
        /// </summary>
        /// <remarks>
        /// See details https://developer.twitter.com/en/docs/twitter-api/v1/direct-messages/sending-and-receiving/api-reference/new-event&lt;br&gt;  how to get &lt;b&gt;auth_token and ct0&lt;/b&gt;? &lt;br&gt; https://twitter.com/chen22218/status/1722138510680043555 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="attachmentMediaId"></param>
        /// <param name="attachmentType"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="recipientId"></param>
        /// <param name="text"></param>
        /// <param name="type"></param>
        /// <param name="quickReplyType">Returns results with an ID less than (that is, older than) or equal to the specified ID. (optional)</param>
        /// <returns>ApiResponse of ResultT</returns>
        ApiResponse<ResultT> SendDMSMediaUsingPOSTWithHttpInfo (string apiKey, string attachmentMediaId, string attachmentType, string authToken, string ct0, string recipientId, string text, string type, string quickReplyType = null);
        /// <summary>
        /// sendDMS events.
        /// </summary>
        /// <remarks>
        /// See details https://developer.twitter.com/en/docs/twitter-api/v1/direct-messages/sending-and-receiving/api-reference/new-event&lt;br&gt;  how to get &lt;b&gt;auth_token and ct0&lt;/b&gt;? &lt;br&gt; https://twitter.com/chen22218/status/1722138510680043555 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="recipientId"></param>
        /// <param name="text"></param>
        /// <param name="type"></param>
        /// <returns>ResultT</returns>
        ResultT SendDMSUsingGET (string apiKey, string authToken, string ct0, string recipientId, string text, string type);

        /// <summary>
        /// sendDMS events.
        /// </summary>
        /// <remarks>
        /// See details https://developer.twitter.com/en/docs/twitter-api/v1/direct-messages/sending-and-receiving/api-reference/new-event&lt;br&gt;  how to get &lt;b&gt;auth_token and ct0&lt;/b&gt;? &lt;br&gt; https://twitter.com/chen22218/status/1722138510680043555 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="recipientId"></param>
        /// <param name="text"></param>
        /// <param name="type"></param>
        /// <returns>ApiResponse of ResultT</returns>
        ApiResponse<ResultT> SendDMSUsingGETWithHttpInfo (string apiKey, string authToken, string ct0, string recipientId, string text, string type);
        /// <summary>
        /// sendDMS events.
        /// </summary>
        /// <remarks>
        /// See details https://developer.twitter.com/en/docs/twitter-api/v1/direct-messages/sending-and-receiving/api-reference/new-event&lt;br&gt;  how to get &lt;b&gt;auth_token and ct0&lt;/b&gt;? &lt;br&gt; https://twitter.com/chen22218/status/1722138510680043555 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="recipientId"></param>
        /// <param name="text"></param>
        /// <param name="type"></param>
        /// <returns>ResultT</returns>
        ResultT SendDMSUsingPOST (string apiKey, string authToken, string ct0, string recipientId, string text, string type);

        /// <summary>
        /// sendDMS events.
        /// </summary>
        /// <remarks>
        /// See details https://developer.twitter.com/en/docs/twitter-api/v1/direct-messages/sending-and-receiving/api-reference/new-event&lt;br&gt;  how to get &lt;b&gt;auth_token and ct0&lt;/b&gt;? &lt;br&gt; https://twitter.com/chen22218/status/1722138510680043555 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="recipientId"></param>
        /// <param name="text"></param>
        /// <param name="type"></param>
        /// <returns>ApiResponse of ResultT</returns>
        ApiResponse<ResultT> SendDMSUsingPOSTWithHttpInfo (string apiKey, string authToken, string ct0, string recipientId, string text, string type);
        /// <summary>
        /// upload media for DM 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="_file">file</param>
        /// <returns>ResultT</returns>
        ResultT UploadMediaDMUsingGET (string apiKey, string authToken, string ct0, System.IO.Stream _file);

        /// <summary>
        /// upload media for DM 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="_file">file</param>
        /// <returns>ApiResponse of ResultT</returns>
        ApiResponse<ResultT> UploadMediaDMUsingGETWithHttpInfo (string apiKey, string authToken, string ct0, System.IO.Stream _file);
        /// <summary>
        /// upload media for DM 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="_file">file</param>
        /// <returns>ResultT</returns>
        ResultT UploadMediaDMUsingPOST (string apiKey, string authToken, string ct0, System.IO.Stream _file);

        /// <summary>
        /// upload media for DM 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="_file">file</param>
        /// <returns>ApiResponse of ResultT</returns>
        ApiResponse<ResultT> UploadMediaDMUsingPOSTWithHttpInfo (string apiKey, string authToken, string ct0, System.IO.Stream _file);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// get DMS List
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="cursor"></param>
        /// <returns>Task of ResultT</returns>
        System.Threading.Tasks.Task<ResultT> GetDMSListV2UsingGETAsync (string apiKey, string authToken, string ct0, string cursor);

        /// <summary>
        /// get DMS List
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="cursor"></param>
        /// <returns>Task of ApiResponse (ResultT)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResultT>> GetDMSListV2UsingGETAsyncWithHttpInfo (string apiKey, string authToken, string ct0, string cursor);
        /// <summary>
        /// get DMS List
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="cursor"></param>
        /// <returns>Task of ResultT</returns>
        System.Threading.Tasks.Task<ResultT> GetDMSListV2UsingPOSTAsync (string apiKey, string authToken, string ct0, string cursor);

        /// <summary>
        /// get DMS List
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="cursor"></param>
        /// <returns>Task of ApiResponse (ResultT)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResultT>> GetDMSListV2UsingPOSTAsyncWithHttpInfo (string apiKey, string authToken, string ct0, string cursor);
        /// <summary>
        /// receiving events
        /// </summary>
        /// <remarks>
        /// See details https://developer.twitter.com/en/docs/twitter-api/v1/direct-messages/sending-and-receiving/api-reference/get-event&lt;br&gt;  how to get &lt;b&gt;auth_token and ct0&lt;/b&gt;? &lt;br&gt; https://twitter.com/chen22218/status/1722138510680043555 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="id"></param>
        /// <returns>Task of ResultT</returns>
        System.Threading.Tasks.Task<ResultT> GetDMSUsingGETAsync (string apiKey, string authToken, string ct0, string id);

        /// <summary>
        /// receiving events
        /// </summary>
        /// <remarks>
        /// See details https://developer.twitter.com/en/docs/twitter-api/v1/direct-messages/sending-and-receiving/api-reference/get-event&lt;br&gt;  how to get &lt;b&gt;auth_token and ct0&lt;/b&gt;? &lt;br&gt; https://twitter.com/chen22218/status/1722138510680043555 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (ResultT)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResultT>> GetDMSUsingGETAsyncWithHttpInfo (string apiKey, string authToken, string ct0, string id);
        /// <summary>
        /// receiving events
        /// </summary>
        /// <remarks>
        /// See details https://developer.twitter.com/en/docs/twitter-api/v1/direct-messages/sending-and-receiving/api-reference/get-event&lt;br&gt;  how to get &lt;b&gt;auth_token and ct0&lt;/b&gt;? &lt;br&gt; https://twitter.com/chen22218/status/1722138510680043555 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="id"></param>
        /// <returns>Task of ResultT</returns>
        System.Threading.Tasks.Task<ResultT> GetDMSUsingPOSTAsync (string apiKey, string authToken, string ct0, string id);

        /// <summary>
        /// receiving events
        /// </summary>
        /// <remarks>
        /// See details https://developer.twitter.com/en/docs/twitter-api/v1/direct-messages/sending-and-receiving/api-reference/get-event&lt;br&gt;  how to get &lt;b&gt;auth_token and ct0&lt;/b&gt;? &lt;br&gt; https://twitter.com/chen22218/status/1722138510680043555 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (ResultT)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResultT>> GetDMSUsingPOSTAsyncWithHttpInfo (string apiKey, string authToken, string ct0, string id);
        /// <summary>
        /// sendDMSMedia events.
        /// </summary>
        /// <remarks>
        /// See details https://developer.twitter.com/en/docs/twitter-api/v1/direct-messages/sending-and-receiving/api-reference/new-event&lt;br&gt;  how to get &lt;b&gt;auth_token and ct0&lt;/b&gt;? &lt;br&gt; https://twitter.com/chen22218/status/1722138510680043555 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="attachmentMediaId"></param>
        /// <param name="attachmentType"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="recipientId"></param>
        /// <param name="text"></param>
        /// <param name="type"></param>
        /// <param name="quickReplyType">Returns results with an ID less than (that is, older than) or equal to the specified ID. (optional)</param>
        /// <returns>Task of ResultT</returns>
        System.Threading.Tasks.Task<ResultT> SendDMSMediaUsingGETAsync (string apiKey, string attachmentMediaId, string attachmentType, string authToken, string ct0, string recipientId, string text, string type, string quickReplyType = null);

        /// <summary>
        /// sendDMSMedia events.
        /// </summary>
        /// <remarks>
        /// See details https://developer.twitter.com/en/docs/twitter-api/v1/direct-messages/sending-and-receiving/api-reference/new-event&lt;br&gt;  how to get &lt;b&gt;auth_token and ct0&lt;/b&gt;? &lt;br&gt; https://twitter.com/chen22218/status/1722138510680043555 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="attachmentMediaId"></param>
        /// <param name="attachmentType"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="recipientId"></param>
        /// <param name="text"></param>
        /// <param name="type"></param>
        /// <param name="quickReplyType">Returns results with an ID less than (that is, older than) or equal to the specified ID. (optional)</param>
        /// <returns>Task of ApiResponse (ResultT)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResultT>> SendDMSMediaUsingGETAsyncWithHttpInfo (string apiKey, string attachmentMediaId, string attachmentType, string authToken, string ct0, string recipientId, string text, string type, string quickReplyType = null);
        /// <summary>
        /// sendDMSMedia events.
        /// </summary>
        /// <remarks>
        /// See details https://developer.twitter.com/en/docs/twitter-api/v1/direct-messages/sending-and-receiving/api-reference/new-event&lt;br&gt;  how to get &lt;b&gt;auth_token and ct0&lt;/b&gt;? &lt;br&gt; https://twitter.com/chen22218/status/1722138510680043555 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="attachmentMediaId"></param>
        /// <param name="attachmentType"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="recipientId"></param>
        /// <param name="text"></param>
        /// <param name="type"></param>
        /// <param name="quickReplyType">Returns results with an ID less than (that is, older than) or equal to the specified ID. (optional)</param>
        /// <returns>Task of ResultT</returns>
        System.Threading.Tasks.Task<ResultT> SendDMSMediaUsingPOSTAsync (string apiKey, string attachmentMediaId, string attachmentType, string authToken, string ct0, string recipientId, string text, string type, string quickReplyType = null);

        /// <summary>
        /// sendDMSMedia events.
        /// </summary>
        /// <remarks>
        /// See details https://developer.twitter.com/en/docs/twitter-api/v1/direct-messages/sending-and-receiving/api-reference/new-event&lt;br&gt;  how to get &lt;b&gt;auth_token and ct0&lt;/b&gt;? &lt;br&gt; https://twitter.com/chen22218/status/1722138510680043555 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="attachmentMediaId"></param>
        /// <param name="attachmentType"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="recipientId"></param>
        /// <param name="text"></param>
        /// <param name="type"></param>
        /// <param name="quickReplyType">Returns results with an ID less than (that is, older than) or equal to the specified ID. (optional)</param>
        /// <returns>Task of ApiResponse (ResultT)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResultT>> SendDMSMediaUsingPOSTAsyncWithHttpInfo (string apiKey, string attachmentMediaId, string attachmentType, string authToken, string ct0, string recipientId, string text, string type, string quickReplyType = null);
        /// <summary>
        /// sendDMS events.
        /// </summary>
        /// <remarks>
        /// See details https://developer.twitter.com/en/docs/twitter-api/v1/direct-messages/sending-and-receiving/api-reference/new-event&lt;br&gt;  how to get &lt;b&gt;auth_token and ct0&lt;/b&gt;? &lt;br&gt; https://twitter.com/chen22218/status/1722138510680043555 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="recipientId"></param>
        /// <param name="text"></param>
        /// <param name="type"></param>
        /// <returns>Task of ResultT</returns>
        System.Threading.Tasks.Task<ResultT> SendDMSUsingGETAsync (string apiKey, string authToken, string ct0, string recipientId, string text, string type);

        /// <summary>
        /// sendDMS events.
        /// </summary>
        /// <remarks>
        /// See details https://developer.twitter.com/en/docs/twitter-api/v1/direct-messages/sending-and-receiving/api-reference/new-event&lt;br&gt;  how to get &lt;b&gt;auth_token and ct0&lt;/b&gt;? &lt;br&gt; https://twitter.com/chen22218/status/1722138510680043555 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="recipientId"></param>
        /// <param name="text"></param>
        /// <param name="type"></param>
        /// <returns>Task of ApiResponse (ResultT)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResultT>> SendDMSUsingGETAsyncWithHttpInfo (string apiKey, string authToken, string ct0, string recipientId, string text, string type);
        /// <summary>
        /// sendDMS events.
        /// </summary>
        /// <remarks>
        /// See details https://developer.twitter.com/en/docs/twitter-api/v1/direct-messages/sending-and-receiving/api-reference/new-event&lt;br&gt;  how to get &lt;b&gt;auth_token and ct0&lt;/b&gt;? &lt;br&gt; https://twitter.com/chen22218/status/1722138510680043555 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="recipientId"></param>
        /// <param name="text"></param>
        /// <param name="type"></param>
        /// <returns>Task of ResultT</returns>
        System.Threading.Tasks.Task<ResultT> SendDMSUsingPOSTAsync (string apiKey, string authToken, string ct0, string recipientId, string text, string type);

        /// <summary>
        /// sendDMS events.
        /// </summary>
        /// <remarks>
        /// See details https://developer.twitter.com/en/docs/twitter-api/v1/direct-messages/sending-and-receiving/api-reference/new-event&lt;br&gt;  how to get &lt;b&gt;auth_token and ct0&lt;/b&gt;? &lt;br&gt; https://twitter.com/chen22218/status/1722138510680043555 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="recipientId"></param>
        /// <param name="text"></param>
        /// <param name="type"></param>
        /// <returns>Task of ApiResponse (ResultT)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResultT>> SendDMSUsingPOSTAsyncWithHttpInfo (string apiKey, string authToken, string ct0, string recipientId, string text, string type);
        /// <summary>
        /// upload media for DM 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="_file">file</param>
        /// <returns>Task of ResultT</returns>
        System.Threading.Tasks.Task<ResultT> UploadMediaDMUsingGETAsync (string apiKey, string authToken, string ct0, System.IO.Stream _file);

        /// <summary>
        /// upload media for DM 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="_file">file</param>
        /// <returns>Task of ApiResponse (ResultT)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResultT>> UploadMediaDMUsingGETAsyncWithHttpInfo (string apiKey, string authToken, string ct0, System.IO.Stream _file);
        /// <summary>
        /// upload media for DM 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="_file">file</param>
        /// <returns>Task of ResultT</returns>
        System.Threading.Tasks.Task<ResultT> UploadMediaDMUsingPOSTAsync (string apiKey, string authToken, string ct0, System.IO.Stream _file);

        /// <summary>
        /// upload media for DM 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="_file">file</param>
        /// <returns>Task of ApiResponse (ResultT)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResultT>> UploadMediaDMUsingPOSTAsyncWithHttpInfo (string apiKey, string authToken, string ct0, System.IO.Stream _file);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TwitterDMSApiToolsApi : ITwitterDMSApiToolsApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TwitterDMSApiToolsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TwitterDMSApiToolsApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TwitterDMSApiToolsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TwitterDMSApiToolsApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// get DMS List 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="cursor"></param>
        /// <returns>ResultT</returns>
        public ResultT GetDMSListV2UsingGET (string apiKey, string authToken, string ct0, string cursor)
        {
             ApiResponse<ResultT> localVarResponse = GetDMSListV2UsingGETWithHttpInfo(apiKey, authToken, ct0, cursor);
             return localVarResponse.Data;
        }

        /// <summary>
        /// get DMS List 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="cursor"></param>
        /// <returns>ApiResponse of ResultT</returns>
        public ApiResponse< ResultT > GetDMSListV2UsingGETWithHttpInfo (string apiKey, string authToken, string ct0, string cursor)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling TwitterDMSApiToolsApi->GetDMSListV2UsingGET");
            // verify the required parameter 'authToken' is set
            if (authToken == null)
                throw new ApiException(400, "Missing required parameter 'authToken' when calling TwitterDMSApiToolsApi->GetDMSListV2UsingGET");
            // verify the required parameter 'ct0' is set
            if (ct0 == null)
                throw new ApiException(400, "Missing required parameter 'ct0' when calling TwitterDMSApiToolsApi->GetDMSListV2UsingGET");
            // verify the required parameter 'cursor' is set
            if (cursor == null)
                throw new ApiException(400, "Missing required parameter 'cursor' when calling TwitterDMSApiToolsApi->GetDMSListV2UsingGET");

            var localVarPath = "/base/apitools/getDMSListV2";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", apiKey)); // query parameter
            if (authToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "auth_token", authToken)); // query parameter
            if (ct0 != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ct0", ct0)); // query parameter
            if (cursor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cursor", cursor)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDMSListV2UsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultT>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultT) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultT)));
        }

        /// <summary>
        /// get DMS List 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="cursor"></param>
        /// <returns>Task of ResultT</returns>
        public async System.Threading.Tasks.Task<ResultT> GetDMSListV2UsingGETAsync (string apiKey, string authToken, string ct0, string cursor)
        {
             ApiResponse<ResultT> localVarResponse = await GetDMSListV2UsingGETAsyncWithHttpInfo(apiKey, authToken, ct0, cursor);
             return localVarResponse.Data;

        }

        /// <summary>
        /// get DMS List 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="cursor"></param>
        /// <returns>Task of ApiResponse (ResultT)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResultT>> GetDMSListV2UsingGETAsyncWithHttpInfo (string apiKey, string authToken, string ct0, string cursor)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling TwitterDMSApiToolsApi->GetDMSListV2UsingGET");
            // verify the required parameter 'authToken' is set
            if (authToken == null)
                throw new ApiException(400, "Missing required parameter 'authToken' when calling TwitterDMSApiToolsApi->GetDMSListV2UsingGET");
            // verify the required parameter 'ct0' is set
            if (ct0 == null)
                throw new ApiException(400, "Missing required parameter 'ct0' when calling TwitterDMSApiToolsApi->GetDMSListV2UsingGET");
            // verify the required parameter 'cursor' is set
            if (cursor == null)
                throw new ApiException(400, "Missing required parameter 'cursor' when calling TwitterDMSApiToolsApi->GetDMSListV2UsingGET");

            var localVarPath = "/base/apitools/getDMSListV2";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", apiKey)); // query parameter
            if (authToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "auth_token", authToken)); // query parameter
            if (ct0 != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ct0", ct0)); // query parameter
            if (cursor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cursor", cursor)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDMSListV2UsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultT>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultT) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultT)));
        }

        /// <summary>
        /// get DMS List 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="cursor"></param>
        /// <returns>ResultT</returns>
        public ResultT GetDMSListV2UsingPOST (string apiKey, string authToken, string ct0, string cursor)
        {
             ApiResponse<ResultT> localVarResponse = GetDMSListV2UsingPOSTWithHttpInfo(apiKey, authToken, ct0, cursor);
             return localVarResponse.Data;
        }

        /// <summary>
        /// get DMS List 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="cursor"></param>
        /// <returns>ApiResponse of ResultT</returns>
        public ApiResponse< ResultT > GetDMSListV2UsingPOSTWithHttpInfo (string apiKey, string authToken, string ct0, string cursor)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling TwitterDMSApiToolsApi->GetDMSListV2UsingPOST");
            // verify the required parameter 'authToken' is set
            if (authToken == null)
                throw new ApiException(400, "Missing required parameter 'authToken' when calling TwitterDMSApiToolsApi->GetDMSListV2UsingPOST");
            // verify the required parameter 'ct0' is set
            if (ct0 == null)
                throw new ApiException(400, "Missing required parameter 'ct0' when calling TwitterDMSApiToolsApi->GetDMSListV2UsingPOST");
            // verify the required parameter 'cursor' is set
            if (cursor == null)
                throw new ApiException(400, "Missing required parameter 'cursor' when calling TwitterDMSApiToolsApi->GetDMSListV2UsingPOST");

            var localVarPath = "/base/apitools/getDMSListV2";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", apiKey)); // query parameter
            if (authToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "auth_token", authToken)); // query parameter
            if (ct0 != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ct0", ct0)); // query parameter
            if (cursor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cursor", cursor)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDMSListV2UsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultT>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultT) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultT)));
        }

        /// <summary>
        /// get DMS List 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="cursor"></param>
        /// <returns>Task of ResultT</returns>
        public async System.Threading.Tasks.Task<ResultT> GetDMSListV2UsingPOSTAsync (string apiKey, string authToken, string ct0, string cursor)
        {
             ApiResponse<ResultT> localVarResponse = await GetDMSListV2UsingPOSTAsyncWithHttpInfo(apiKey, authToken, ct0, cursor);
             return localVarResponse.Data;

        }

        /// <summary>
        /// get DMS List 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="cursor"></param>
        /// <returns>Task of ApiResponse (ResultT)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResultT>> GetDMSListV2UsingPOSTAsyncWithHttpInfo (string apiKey, string authToken, string ct0, string cursor)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling TwitterDMSApiToolsApi->GetDMSListV2UsingPOST");
            // verify the required parameter 'authToken' is set
            if (authToken == null)
                throw new ApiException(400, "Missing required parameter 'authToken' when calling TwitterDMSApiToolsApi->GetDMSListV2UsingPOST");
            // verify the required parameter 'ct0' is set
            if (ct0 == null)
                throw new ApiException(400, "Missing required parameter 'ct0' when calling TwitterDMSApiToolsApi->GetDMSListV2UsingPOST");
            // verify the required parameter 'cursor' is set
            if (cursor == null)
                throw new ApiException(400, "Missing required parameter 'cursor' when calling TwitterDMSApiToolsApi->GetDMSListV2UsingPOST");

            var localVarPath = "/base/apitools/getDMSListV2";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", apiKey)); // query parameter
            if (authToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "auth_token", authToken)); // query parameter
            if (ct0 != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ct0", ct0)); // query parameter
            if (cursor != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cursor", cursor)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDMSListV2UsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultT>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultT) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultT)));
        }

        /// <summary>
        /// receiving events See details https://developer.twitter.com/en/docs/twitter-api/v1/direct-messages/sending-and-receiving/api-reference/get-event&lt;br&gt;  how to get &lt;b&gt;auth_token and ct0&lt;/b&gt;? &lt;br&gt; https://twitter.com/chen22218/status/1722138510680043555 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="id"></param>
        /// <returns>ResultT</returns>
        public ResultT GetDMSUsingGET (string apiKey, string authToken, string ct0, string id)
        {
             ApiResponse<ResultT> localVarResponse = GetDMSUsingGETWithHttpInfo(apiKey, authToken, ct0, id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// receiving events See details https://developer.twitter.com/en/docs/twitter-api/v1/direct-messages/sending-and-receiving/api-reference/get-event&lt;br&gt;  how to get &lt;b&gt;auth_token and ct0&lt;/b&gt;? &lt;br&gt; https://twitter.com/chen22218/status/1722138510680043555 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="id"></param>
        /// <returns>ApiResponse of ResultT</returns>
        public ApiResponse< ResultT > GetDMSUsingGETWithHttpInfo (string apiKey, string authToken, string ct0, string id)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling TwitterDMSApiToolsApi->GetDMSUsingGET");
            // verify the required parameter 'authToken' is set
            if (authToken == null)
                throw new ApiException(400, "Missing required parameter 'authToken' when calling TwitterDMSApiToolsApi->GetDMSUsingGET");
            // verify the required parameter 'ct0' is set
            if (ct0 == null)
                throw new ApiException(400, "Missing required parameter 'ct0' when calling TwitterDMSApiToolsApi->GetDMSUsingGET");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TwitterDMSApiToolsApi->GetDMSUsingGET");

            var localVarPath = "/base/apitools/getDMS";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", apiKey)); // query parameter
            if (authToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "auth_token", authToken)); // query parameter
            if (ct0 != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ct0", ct0)); // query parameter
            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDMSUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultT>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultT) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultT)));
        }

        /// <summary>
        /// receiving events See details https://developer.twitter.com/en/docs/twitter-api/v1/direct-messages/sending-and-receiving/api-reference/get-event&lt;br&gt;  how to get &lt;b&gt;auth_token and ct0&lt;/b&gt;? &lt;br&gt; https://twitter.com/chen22218/status/1722138510680043555 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="id"></param>
        /// <returns>Task of ResultT</returns>
        public async System.Threading.Tasks.Task<ResultT> GetDMSUsingGETAsync (string apiKey, string authToken, string ct0, string id)
        {
             ApiResponse<ResultT> localVarResponse = await GetDMSUsingGETAsyncWithHttpInfo(apiKey, authToken, ct0, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// receiving events See details https://developer.twitter.com/en/docs/twitter-api/v1/direct-messages/sending-and-receiving/api-reference/get-event&lt;br&gt;  how to get &lt;b&gt;auth_token and ct0&lt;/b&gt;? &lt;br&gt; https://twitter.com/chen22218/status/1722138510680043555 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (ResultT)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResultT>> GetDMSUsingGETAsyncWithHttpInfo (string apiKey, string authToken, string ct0, string id)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling TwitterDMSApiToolsApi->GetDMSUsingGET");
            // verify the required parameter 'authToken' is set
            if (authToken == null)
                throw new ApiException(400, "Missing required parameter 'authToken' when calling TwitterDMSApiToolsApi->GetDMSUsingGET");
            // verify the required parameter 'ct0' is set
            if (ct0 == null)
                throw new ApiException(400, "Missing required parameter 'ct0' when calling TwitterDMSApiToolsApi->GetDMSUsingGET");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TwitterDMSApiToolsApi->GetDMSUsingGET");

            var localVarPath = "/base/apitools/getDMS";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", apiKey)); // query parameter
            if (authToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "auth_token", authToken)); // query parameter
            if (ct0 != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ct0", ct0)); // query parameter
            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDMSUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultT>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultT) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultT)));
        }

        /// <summary>
        /// receiving events See details https://developer.twitter.com/en/docs/twitter-api/v1/direct-messages/sending-and-receiving/api-reference/get-event&lt;br&gt;  how to get &lt;b&gt;auth_token and ct0&lt;/b&gt;? &lt;br&gt; https://twitter.com/chen22218/status/1722138510680043555 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="id"></param>
        /// <returns>ResultT</returns>
        public ResultT GetDMSUsingPOST (string apiKey, string authToken, string ct0, string id)
        {
             ApiResponse<ResultT> localVarResponse = GetDMSUsingPOSTWithHttpInfo(apiKey, authToken, ct0, id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// receiving events See details https://developer.twitter.com/en/docs/twitter-api/v1/direct-messages/sending-and-receiving/api-reference/get-event&lt;br&gt;  how to get &lt;b&gt;auth_token and ct0&lt;/b&gt;? &lt;br&gt; https://twitter.com/chen22218/status/1722138510680043555 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="id"></param>
        /// <returns>ApiResponse of ResultT</returns>
        public ApiResponse< ResultT > GetDMSUsingPOSTWithHttpInfo (string apiKey, string authToken, string ct0, string id)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling TwitterDMSApiToolsApi->GetDMSUsingPOST");
            // verify the required parameter 'authToken' is set
            if (authToken == null)
                throw new ApiException(400, "Missing required parameter 'authToken' when calling TwitterDMSApiToolsApi->GetDMSUsingPOST");
            // verify the required parameter 'ct0' is set
            if (ct0 == null)
                throw new ApiException(400, "Missing required parameter 'ct0' when calling TwitterDMSApiToolsApi->GetDMSUsingPOST");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TwitterDMSApiToolsApi->GetDMSUsingPOST");

            var localVarPath = "/base/apitools/getDMS";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", apiKey)); // query parameter
            if (authToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "auth_token", authToken)); // query parameter
            if (ct0 != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ct0", ct0)); // query parameter
            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDMSUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultT>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultT) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultT)));
        }

        /// <summary>
        /// receiving events See details https://developer.twitter.com/en/docs/twitter-api/v1/direct-messages/sending-and-receiving/api-reference/get-event&lt;br&gt;  how to get &lt;b&gt;auth_token and ct0&lt;/b&gt;? &lt;br&gt; https://twitter.com/chen22218/status/1722138510680043555 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="id"></param>
        /// <returns>Task of ResultT</returns>
        public async System.Threading.Tasks.Task<ResultT> GetDMSUsingPOSTAsync (string apiKey, string authToken, string ct0, string id)
        {
             ApiResponse<ResultT> localVarResponse = await GetDMSUsingPOSTAsyncWithHttpInfo(apiKey, authToken, ct0, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// receiving events See details https://developer.twitter.com/en/docs/twitter-api/v1/direct-messages/sending-and-receiving/api-reference/get-event&lt;br&gt;  how to get &lt;b&gt;auth_token and ct0&lt;/b&gt;? &lt;br&gt; https://twitter.com/chen22218/status/1722138510680043555 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (ResultT)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResultT>> GetDMSUsingPOSTAsyncWithHttpInfo (string apiKey, string authToken, string ct0, string id)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling TwitterDMSApiToolsApi->GetDMSUsingPOST");
            // verify the required parameter 'authToken' is set
            if (authToken == null)
                throw new ApiException(400, "Missing required parameter 'authToken' when calling TwitterDMSApiToolsApi->GetDMSUsingPOST");
            // verify the required parameter 'ct0' is set
            if (ct0 == null)
                throw new ApiException(400, "Missing required parameter 'ct0' when calling TwitterDMSApiToolsApi->GetDMSUsingPOST");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TwitterDMSApiToolsApi->GetDMSUsingPOST");

            var localVarPath = "/base/apitools/getDMS";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", apiKey)); // query parameter
            if (authToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "auth_token", authToken)); // query parameter
            if (ct0 != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ct0", ct0)); // query parameter
            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDMSUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultT>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultT) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultT)));
        }

        /// <summary>
        /// sendDMSMedia events. See details https://developer.twitter.com/en/docs/twitter-api/v1/direct-messages/sending-and-receiving/api-reference/new-event&lt;br&gt;  how to get &lt;b&gt;auth_token and ct0&lt;/b&gt;? &lt;br&gt; https://twitter.com/chen22218/status/1722138510680043555 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="attachmentMediaId"></param>
        /// <param name="attachmentType"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="recipientId"></param>
        /// <param name="text"></param>
        /// <param name="type"></param>
        /// <param name="quickReplyType">Returns results with an ID less than (that is, older than) or equal to the specified ID. (optional)</param>
        /// <returns>ResultT</returns>
        public ResultT SendDMSMediaUsingGET (string apiKey, string attachmentMediaId, string attachmentType, string authToken, string ct0, string recipientId, string text, string type, string quickReplyType = null)
        {
             ApiResponse<ResultT> localVarResponse = SendDMSMediaUsingGETWithHttpInfo(apiKey, attachmentMediaId, attachmentType, authToken, ct0, recipientId, text, type, quickReplyType);
             return localVarResponse.Data;
        }

        /// <summary>
        /// sendDMSMedia events. See details https://developer.twitter.com/en/docs/twitter-api/v1/direct-messages/sending-and-receiving/api-reference/new-event&lt;br&gt;  how to get &lt;b&gt;auth_token and ct0&lt;/b&gt;? &lt;br&gt; https://twitter.com/chen22218/status/1722138510680043555 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="attachmentMediaId"></param>
        /// <param name="attachmentType"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="recipientId"></param>
        /// <param name="text"></param>
        /// <param name="type"></param>
        /// <param name="quickReplyType">Returns results with an ID less than (that is, older than) or equal to the specified ID. (optional)</param>
        /// <returns>ApiResponse of ResultT</returns>
        public ApiResponse< ResultT > SendDMSMediaUsingGETWithHttpInfo (string apiKey, string attachmentMediaId, string attachmentType, string authToken, string ct0, string recipientId, string text, string type, string quickReplyType = null)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling TwitterDMSApiToolsApi->SendDMSMediaUsingGET");
            // verify the required parameter 'attachmentMediaId' is set
            if (attachmentMediaId == null)
                throw new ApiException(400, "Missing required parameter 'attachmentMediaId' when calling TwitterDMSApiToolsApi->SendDMSMediaUsingGET");
            // verify the required parameter 'attachmentType' is set
            if (attachmentType == null)
                throw new ApiException(400, "Missing required parameter 'attachmentType' when calling TwitterDMSApiToolsApi->SendDMSMediaUsingGET");
            // verify the required parameter 'authToken' is set
            if (authToken == null)
                throw new ApiException(400, "Missing required parameter 'authToken' when calling TwitterDMSApiToolsApi->SendDMSMediaUsingGET");
            // verify the required parameter 'ct0' is set
            if (ct0 == null)
                throw new ApiException(400, "Missing required parameter 'ct0' when calling TwitterDMSApiToolsApi->SendDMSMediaUsingGET");
            // verify the required parameter 'recipientId' is set
            if (recipientId == null)
                throw new ApiException(400, "Missing required parameter 'recipientId' when calling TwitterDMSApiToolsApi->SendDMSMediaUsingGET");
            // verify the required parameter 'text' is set
            if (text == null)
                throw new ApiException(400, "Missing required parameter 'text' when calling TwitterDMSApiToolsApi->SendDMSMediaUsingGET");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling TwitterDMSApiToolsApi->SendDMSMediaUsingGET");

            var localVarPath = "/base/apitools/sendDMSMedia";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", apiKey)); // query parameter
            if (attachmentMediaId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "attachment_media_id", attachmentMediaId)); // query parameter
            if (attachmentType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "attachment_type", attachmentType)); // query parameter
            if (authToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "auth_token", authToken)); // query parameter
            if (ct0 != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ct0", ct0)); // query parameter
            if (quickReplyType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "quick_reply_type", quickReplyType)); // query parameter
            if (recipientId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "recipient_id", recipientId)); // query parameter
            if (text != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "text", text)); // query parameter
            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SendDMSMediaUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultT>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultT) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultT)));
        }

        /// <summary>
        /// sendDMSMedia events. See details https://developer.twitter.com/en/docs/twitter-api/v1/direct-messages/sending-and-receiving/api-reference/new-event&lt;br&gt;  how to get &lt;b&gt;auth_token and ct0&lt;/b&gt;? &lt;br&gt; https://twitter.com/chen22218/status/1722138510680043555 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="attachmentMediaId"></param>
        /// <param name="attachmentType"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="recipientId"></param>
        /// <param name="text"></param>
        /// <param name="type"></param>
        /// <param name="quickReplyType">Returns results with an ID less than (that is, older than) or equal to the specified ID. (optional)</param>
        /// <returns>Task of ResultT</returns>
        public async System.Threading.Tasks.Task<ResultT> SendDMSMediaUsingGETAsync (string apiKey, string attachmentMediaId, string attachmentType, string authToken, string ct0, string recipientId, string text, string type, string quickReplyType = null)
        {
             ApiResponse<ResultT> localVarResponse = await SendDMSMediaUsingGETAsyncWithHttpInfo(apiKey, attachmentMediaId, attachmentType, authToken, ct0, recipientId, text, type, quickReplyType);
             return localVarResponse.Data;

        }

        /// <summary>
        /// sendDMSMedia events. See details https://developer.twitter.com/en/docs/twitter-api/v1/direct-messages/sending-and-receiving/api-reference/new-event&lt;br&gt;  how to get &lt;b&gt;auth_token and ct0&lt;/b&gt;? &lt;br&gt; https://twitter.com/chen22218/status/1722138510680043555 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="attachmentMediaId"></param>
        /// <param name="attachmentType"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="recipientId"></param>
        /// <param name="text"></param>
        /// <param name="type"></param>
        /// <param name="quickReplyType">Returns results with an ID less than (that is, older than) or equal to the specified ID. (optional)</param>
        /// <returns>Task of ApiResponse (ResultT)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResultT>> SendDMSMediaUsingGETAsyncWithHttpInfo (string apiKey, string attachmentMediaId, string attachmentType, string authToken, string ct0, string recipientId, string text, string type, string quickReplyType = null)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling TwitterDMSApiToolsApi->SendDMSMediaUsingGET");
            // verify the required parameter 'attachmentMediaId' is set
            if (attachmentMediaId == null)
                throw new ApiException(400, "Missing required parameter 'attachmentMediaId' when calling TwitterDMSApiToolsApi->SendDMSMediaUsingGET");
            // verify the required parameter 'attachmentType' is set
            if (attachmentType == null)
                throw new ApiException(400, "Missing required parameter 'attachmentType' when calling TwitterDMSApiToolsApi->SendDMSMediaUsingGET");
            // verify the required parameter 'authToken' is set
            if (authToken == null)
                throw new ApiException(400, "Missing required parameter 'authToken' when calling TwitterDMSApiToolsApi->SendDMSMediaUsingGET");
            // verify the required parameter 'ct0' is set
            if (ct0 == null)
                throw new ApiException(400, "Missing required parameter 'ct0' when calling TwitterDMSApiToolsApi->SendDMSMediaUsingGET");
            // verify the required parameter 'recipientId' is set
            if (recipientId == null)
                throw new ApiException(400, "Missing required parameter 'recipientId' when calling TwitterDMSApiToolsApi->SendDMSMediaUsingGET");
            // verify the required parameter 'text' is set
            if (text == null)
                throw new ApiException(400, "Missing required parameter 'text' when calling TwitterDMSApiToolsApi->SendDMSMediaUsingGET");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling TwitterDMSApiToolsApi->SendDMSMediaUsingGET");

            var localVarPath = "/base/apitools/sendDMSMedia";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", apiKey)); // query parameter
            if (attachmentMediaId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "attachment_media_id", attachmentMediaId)); // query parameter
            if (attachmentType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "attachment_type", attachmentType)); // query parameter
            if (authToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "auth_token", authToken)); // query parameter
            if (ct0 != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ct0", ct0)); // query parameter
            if (quickReplyType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "quick_reply_type", quickReplyType)); // query parameter
            if (recipientId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "recipient_id", recipientId)); // query parameter
            if (text != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "text", text)); // query parameter
            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SendDMSMediaUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultT>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultT) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultT)));
        }

        /// <summary>
        /// sendDMSMedia events. See details https://developer.twitter.com/en/docs/twitter-api/v1/direct-messages/sending-and-receiving/api-reference/new-event&lt;br&gt;  how to get &lt;b&gt;auth_token and ct0&lt;/b&gt;? &lt;br&gt; https://twitter.com/chen22218/status/1722138510680043555 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="attachmentMediaId"></param>
        /// <param name="attachmentType"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="recipientId"></param>
        /// <param name="text"></param>
        /// <param name="type"></param>
        /// <param name="quickReplyType">Returns results with an ID less than (that is, older than) or equal to the specified ID. (optional)</param>
        /// <returns>ResultT</returns>
        public ResultT SendDMSMediaUsingPOST (string apiKey, string attachmentMediaId, string attachmentType, string authToken, string ct0, string recipientId, string text, string type, string quickReplyType = null)
        {
             ApiResponse<ResultT> localVarResponse = SendDMSMediaUsingPOSTWithHttpInfo(apiKey, attachmentMediaId, attachmentType, authToken, ct0, recipientId, text, type, quickReplyType);
             return localVarResponse.Data;
        }

        /// <summary>
        /// sendDMSMedia events. See details https://developer.twitter.com/en/docs/twitter-api/v1/direct-messages/sending-and-receiving/api-reference/new-event&lt;br&gt;  how to get &lt;b&gt;auth_token and ct0&lt;/b&gt;? &lt;br&gt; https://twitter.com/chen22218/status/1722138510680043555 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="attachmentMediaId"></param>
        /// <param name="attachmentType"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="recipientId"></param>
        /// <param name="text"></param>
        /// <param name="type"></param>
        /// <param name="quickReplyType">Returns results with an ID less than (that is, older than) or equal to the specified ID. (optional)</param>
        /// <returns>ApiResponse of ResultT</returns>
        public ApiResponse< ResultT > SendDMSMediaUsingPOSTWithHttpInfo (string apiKey, string attachmentMediaId, string attachmentType, string authToken, string ct0, string recipientId, string text, string type, string quickReplyType = null)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling TwitterDMSApiToolsApi->SendDMSMediaUsingPOST");
            // verify the required parameter 'attachmentMediaId' is set
            if (attachmentMediaId == null)
                throw new ApiException(400, "Missing required parameter 'attachmentMediaId' when calling TwitterDMSApiToolsApi->SendDMSMediaUsingPOST");
            // verify the required parameter 'attachmentType' is set
            if (attachmentType == null)
                throw new ApiException(400, "Missing required parameter 'attachmentType' when calling TwitterDMSApiToolsApi->SendDMSMediaUsingPOST");
            // verify the required parameter 'authToken' is set
            if (authToken == null)
                throw new ApiException(400, "Missing required parameter 'authToken' when calling TwitterDMSApiToolsApi->SendDMSMediaUsingPOST");
            // verify the required parameter 'ct0' is set
            if (ct0 == null)
                throw new ApiException(400, "Missing required parameter 'ct0' when calling TwitterDMSApiToolsApi->SendDMSMediaUsingPOST");
            // verify the required parameter 'recipientId' is set
            if (recipientId == null)
                throw new ApiException(400, "Missing required parameter 'recipientId' when calling TwitterDMSApiToolsApi->SendDMSMediaUsingPOST");
            // verify the required parameter 'text' is set
            if (text == null)
                throw new ApiException(400, "Missing required parameter 'text' when calling TwitterDMSApiToolsApi->SendDMSMediaUsingPOST");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling TwitterDMSApiToolsApi->SendDMSMediaUsingPOST");

            var localVarPath = "/base/apitools/sendDMSMedia";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", apiKey)); // query parameter
            if (attachmentMediaId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "attachment_media_id", attachmentMediaId)); // query parameter
            if (attachmentType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "attachment_type", attachmentType)); // query parameter
            if (authToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "auth_token", authToken)); // query parameter
            if (ct0 != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ct0", ct0)); // query parameter
            if (quickReplyType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "quick_reply_type", quickReplyType)); // query parameter
            if (recipientId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "recipient_id", recipientId)); // query parameter
            if (text != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "text", text)); // query parameter
            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SendDMSMediaUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultT>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultT) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultT)));
        }

        /// <summary>
        /// sendDMSMedia events. See details https://developer.twitter.com/en/docs/twitter-api/v1/direct-messages/sending-and-receiving/api-reference/new-event&lt;br&gt;  how to get &lt;b&gt;auth_token and ct0&lt;/b&gt;? &lt;br&gt; https://twitter.com/chen22218/status/1722138510680043555 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="attachmentMediaId"></param>
        /// <param name="attachmentType"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="recipientId"></param>
        /// <param name="text"></param>
        /// <param name="type"></param>
        /// <param name="quickReplyType">Returns results with an ID less than (that is, older than) or equal to the specified ID. (optional)</param>
        /// <returns>Task of ResultT</returns>
        public async System.Threading.Tasks.Task<ResultT> SendDMSMediaUsingPOSTAsync (string apiKey, string attachmentMediaId, string attachmentType, string authToken, string ct0, string recipientId, string text, string type, string quickReplyType = null)
        {
             ApiResponse<ResultT> localVarResponse = await SendDMSMediaUsingPOSTAsyncWithHttpInfo(apiKey, attachmentMediaId, attachmentType, authToken, ct0, recipientId, text, type, quickReplyType);
             return localVarResponse.Data;

        }

        /// <summary>
        /// sendDMSMedia events. See details https://developer.twitter.com/en/docs/twitter-api/v1/direct-messages/sending-and-receiving/api-reference/new-event&lt;br&gt;  how to get &lt;b&gt;auth_token and ct0&lt;/b&gt;? &lt;br&gt; https://twitter.com/chen22218/status/1722138510680043555 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="attachmentMediaId"></param>
        /// <param name="attachmentType"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="recipientId"></param>
        /// <param name="text"></param>
        /// <param name="type"></param>
        /// <param name="quickReplyType">Returns results with an ID less than (that is, older than) or equal to the specified ID. (optional)</param>
        /// <returns>Task of ApiResponse (ResultT)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResultT>> SendDMSMediaUsingPOSTAsyncWithHttpInfo (string apiKey, string attachmentMediaId, string attachmentType, string authToken, string ct0, string recipientId, string text, string type, string quickReplyType = null)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling TwitterDMSApiToolsApi->SendDMSMediaUsingPOST");
            // verify the required parameter 'attachmentMediaId' is set
            if (attachmentMediaId == null)
                throw new ApiException(400, "Missing required parameter 'attachmentMediaId' when calling TwitterDMSApiToolsApi->SendDMSMediaUsingPOST");
            // verify the required parameter 'attachmentType' is set
            if (attachmentType == null)
                throw new ApiException(400, "Missing required parameter 'attachmentType' when calling TwitterDMSApiToolsApi->SendDMSMediaUsingPOST");
            // verify the required parameter 'authToken' is set
            if (authToken == null)
                throw new ApiException(400, "Missing required parameter 'authToken' when calling TwitterDMSApiToolsApi->SendDMSMediaUsingPOST");
            // verify the required parameter 'ct0' is set
            if (ct0 == null)
                throw new ApiException(400, "Missing required parameter 'ct0' when calling TwitterDMSApiToolsApi->SendDMSMediaUsingPOST");
            // verify the required parameter 'recipientId' is set
            if (recipientId == null)
                throw new ApiException(400, "Missing required parameter 'recipientId' when calling TwitterDMSApiToolsApi->SendDMSMediaUsingPOST");
            // verify the required parameter 'text' is set
            if (text == null)
                throw new ApiException(400, "Missing required parameter 'text' when calling TwitterDMSApiToolsApi->SendDMSMediaUsingPOST");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling TwitterDMSApiToolsApi->SendDMSMediaUsingPOST");

            var localVarPath = "/base/apitools/sendDMSMedia";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", apiKey)); // query parameter
            if (attachmentMediaId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "attachment_media_id", attachmentMediaId)); // query parameter
            if (attachmentType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "attachment_type", attachmentType)); // query parameter
            if (authToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "auth_token", authToken)); // query parameter
            if (ct0 != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ct0", ct0)); // query parameter
            if (quickReplyType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "quick_reply_type", quickReplyType)); // query parameter
            if (recipientId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "recipient_id", recipientId)); // query parameter
            if (text != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "text", text)); // query parameter
            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SendDMSMediaUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultT>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultT) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultT)));
        }

        /// <summary>
        /// sendDMS events. See details https://developer.twitter.com/en/docs/twitter-api/v1/direct-messages/sending-and-receiving/api-reference/new-event&lt;br&gt;  how to get &lt;b&gt;auth_token and ct0&lt;/b&gt;? &lt;br&gt; https://twitter.com/chen22218/status/1722138510680043555 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="recipientId"></param>
        /// <param name="text"></param>
        /// <param name="type"></param>
        /// <returns>ResultT</returns>
        public ResultT SendDMSUsingGET (string apiKey, string authToken, string ct0, string recipientId, string text, string type)
        {
             ApiResponse<ResultT> localVarResponse = SendDMSUsingGETWithHttpInfo(apiKey, authToken, ct0, recipientId, text, type);
             return localVarResponse.Data;
        }

        /// <summary>
        /// sendDMS events. See details https://developer.twitter.com/en/docs/twitter-api/v1/direct-messages/sending-and-receiving/api-reference/new-event&lt;br&gt;  how to get &lt;b&gt;auth_token and ct0&lt;/b&gt;? &lt;br&gt; https://twitter.com/chen22218/status/1722138510680043555 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="recipientId"></param>
        /// <param name="text"></param>
        /// <param name="type"></param>
        /// <returns>ApiResponse of ResultT</returns>
        public ApiResponse< ResultT > SendDMSUsingGETWithHttpInfo (string apiKey, string authToken, string ct0, string recipientId, string text, string type)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling TwitterDMSApiToolsApi->SendDMSUsingGET");
            // verify the required parameter 'authToken' is set
            if (authToken == null)
                throw new ApiException(400, "Missing required parameter 'authToken' when calling TwitterDMSApiToolsApi->SendDMSUsingGET");
            // verify the required parameter 'ct0' is set
            if (ct0 == null)
                throw new ApiException(400, "Missing required parameter 'ct0' when calling TwitterDMSApiToolsApi->SendDMSUsingGET");
            // verify the required parameter 'recipientId' is set
            if (recipientId == null)
                throw new ApiException(400, "Missing required parameter 'recipientId' when calling TwitterDMSApiToolsApi->SendDMSUsingGET");
            // verify the required parameter 'text' is set
            if (text == null)
                throw new ApiException(400, "Missing required parameter 'text' when calling TwitterDMSApiToolsApi->SendDMSUsingGET");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling TwitterDMSApiToolsApi->SendDMSUsingGET");

            var localVarPath = "/base/apitools/sendDMS";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", apiKey)); // query parameter
            if (authToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "auth_token", authToken)); // query parameter
            if (ct0 != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ct0", ct0)); // query parameter
            if (recipientId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "recipient_id", recipientId)); // query parameter
            if (text != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "text", text)); // query parameter
            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SendDMSUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultT>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultT) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultT)));
        }

        /// <summary>
        /// sendDMS events. See details https://developer.twitter.com/en/docs/twitter-api/v1/direct-messages/sending-and-receiving/api-reference/new-event&lt;br&gt;  how to get &lt;b&gt;auth_token and ct0&lt;/b&gt;? &lt;br&gt; https://twitter.com/chen22218/status/1722138510680043555 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="recipientId"></param>
        /// <param name="text"></param>
        /// <param name="type"></param>
        /// <returns>Task of ResultT</returns>
        public async System.Threading.Tasks.Task<ResultT> SendDMSUsingGETAsync (string apiKey, string authToken, string ct0, string recipientId, string text, string type)
        {
             ApiResponse<ResultT> localVarResponse = await SendDMSUsingGETAsyncWithHttpInfo(apiKey, authToken, ct0, recipientId, text, type);
             return localVarResponse.Data;

        }

        /// <summary>
        /// sendDMS events. See details https://developer.twitter.com/en/docs/twitter-api/v1/direct-messages/sending-and-receiving/api-reference/new-event&lt;br&gt;  how to get &lt;b&gt;auth_token and ct0&lt;/b&gt;? &lt;br&gt; https://twitter.com/chen22218/status/1722138510680043555 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="recipientId"></param>
        /// <param name="text"></param>
        /// <param name="type"></param>
        /// <returns>Task of ApiResponse (ResultT)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResultT>> SendDMSUsingGETAsyncWithHttpInfo (string apiKey, string authToken, string ct0, string recipientId, string text, string type)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling TwitterDMSApiToolsApi->SendDMSUsingGET");
            // verify the required parameter 'authToken' is set
            if (authToken == null)
                throw new ApiException(400, "Missing required parameter 'authToken' when calling TwitterDMSApiToolsApi->SendDMSUsingGET");
            // verify the required parameter 'ct0' is set
            if (ct0 == null)
                throw new ApiException(400, "Missing required parameter 'ct0' when calling TwitterDMSApiToolsApi->SendDMSUsingGET");
            // verify the required parameter 'recipientId' is set
            if (recipientId == null)
                throw new ApiException(400, "Missing required parameter 'recipientId' when calling TwitterDMSApiToolsApi->SendDMSUsingGET");
            // verify the required parameter 'text' is set
            if (text == null)
                throw new ApiException(400, "Missing required parameter 'text' when calling TwitterDMSApiToolsApi->SendDMSUsingGET");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling TwitterDMSApiToolsApi->SendDMSUsingGET");

            var localVarPath = "/base/apitools/sendDMS";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", apiKey)); // query parameter
            if (authToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "auth_token", authToken)); // query parameter
            if (ct0 != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ct0", ct0)); // query parameter
            if (recipientId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "recipient_id", recipientId)); // query parameter
            if (text != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "text", text)); // query parameter
            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SendDMSUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultT>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultT) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultT)));
        }

        /// <summary>
        /// sendDMS events. See details https://developer.twitter.com/en/docs/twitter-api/v1/direct-messages/sending-and-receiving/api-reference/new-event&lt;br&gt;  how to get &lt;b&gt;auth_token and ct0&lt;/b&gt;? &lt;br&gt; https://twitter.com/chen22218/status/1722138510680043555 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="recipientId"></param>
        /// <param name="text"></param>
        /// <param name="type"></param>
        /// <returns>ResultT</returns>
        public ResultT SendDMSUsingPOST (string apiKey, string authToken, string ct0, string recipientId, string text, string type)
        {
             ApiResponse<ResultT> localVarResponse = SendDMSUsingPOSTWithHttpInfo(apiKey, authToken, ct0, recipientId, text, type);
             return localVarResponse.Data;
        }

        /// <summary>
        /// sendDMS events. See details https://developer.twitter.com/en/docs/twitter-api/v1/direct-messages/sending-and-receiving/api-reference/new-event&lt;br&gt;  how to get &lt;b&gt;auth_token and ct0&lt;/b&gt;? &lt;br&gt; https://twitter.com/chen22218/status/1722138510680043555 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="recipientId"></param>
        /// <param name="text"></param>
        /// <param name="type"></param>
        /// <returns>ApiResponse of ResultT</returns>
        public ApiResponse< ResultT > SendDMSUsingPOSTWithHttpInfo (string apiKey, string authToken, string ct0, string recipientId, string text, string type)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling TwitterDMSApiToolsApi->SendDMSUsingPOST");
            // verify the required parameter 'authToken' is set
            if (authToken == null)
                throw new ApiException(400, "Missing required parameter 'authToken' when calling TwitterDMSApiToolsApi->SendDMSUsingPOST");
            // verify the required parameter 'ct0' is set
            if (ct0 == null)
                throw new ApiException(400, "Missing required parameter 'ct0' when calling TwitterDMSApiToolsApi->SendDMSUsingPOST");
            // verify the required parameter 'recipientId' is set
            if (recipientId == null)
                throw new ApiException(400, "Missing required parameter 'recipientId' when calling TwitterDMSApiToolsApi->SendDMSUsingPOST");
            // verify the required parameter 'text' is set
            if (text == null)
                throw new ApiException(400, "Missing required parameter 'text' when calling TwitterDMSApiToolsApi->SendDMSUsingPOST");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling TwitterDMSApiToolsApi->SendDMSUsingPOST");

            var localVarPath = "/base/apitools/sendDMS";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", apiKey)); // query parameter
            if (authToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "auth_token", authToken)); // query parameter
            if (ct0 != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ct0", ct0)); // query parameter
            if (recipientId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "recipient_id", recipientId)); // query parameter
            if (text != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "text", text)); // query parameter
            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SendDMSUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultT>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultT) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultT)));
        }

        /// <summary>
        /// sendDMS events. See details https://developer.twitter.com/en/docs/twitter-api/v1/direct-messages/sending-and-receiving/api-reference/new-event&lt;br&gt;  how to get &lt;b&gt;auth_token and ct0&lt;/b&gt;? &lt;br&gt; https://twitter.com/chen22218/status/1722138510680043555 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="recipientId"></param>
        /// <param name="text"></param>
        /// <param name="type"></param>
        /// <returns>Task of ResultT</returns>
        public async System.Threading.Tasks.Task<ResultT> SendDMSUsingPOSTAsync (string apiKey, string authToken, string ct0, string recipientId, string text, string type)
        {
             ApiResponse<ResultT> localVarResponse = await SendDMSUsingPOSTAsyncWithHttpInfo(apiKey, authToken, ct0, recipientId, text, type);
             return localVarResponse.Data;

        }

        /// <summary>
        /// sendDMS events. See details https://developer.twitter.com/en/docs/twitter-api/v1/direct-messages/sending-and-receiving/api-reference/new-event&lt;br&gt;  how to get &lt;b&gt;auth_token and ct0&lt;/b&gt;? &lt;br&gt; https://twitter.com/chen22218/status/1722138510680043555 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="recipientId"></param>
        /// <param name="text"></param>
        /// <param name="type"></param>
        /// <returns>Task of ApiResponse (ResultT)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResultT>> SendDMSUsingPOSTAsyncWithHttpInfo (string apiKey, string authToken, string ct0, string recipientId, string text, string type)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling TwitterDMSApiToolsApi->SendDMSUsingPOST");
            // verify the required parameter 'authToken' is set
            if (authToken == null)
                throw new ApiException(400, "Missing required parameter 'authToken' when calling TwitterDMSApiToolsApi->SendDMSUsingPOST");
            // verify the required parameter 'ct0' is set
            if (ct0 == null)
                throw new ApiException(400, "Missing required parameter 'ct0' when calling TwitterDMSApiToolsApi->SendDMSUsingPOST");
            // verify the required parameter 'recipientId' is set
            if (recipientId == null)
                throw new ApiException(400, "Missing required parameter 'recipientId' when calling TwitterDMSApiToolsApi->SendDMSUsingPOST");
            // verify the required parameter 'text' is set
            if (text == null)
                throw new ApiException(400, "Missing required parameter 'text' when calling TwitterDMSApiToolsApi->SendDMSUsingPOST");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling TwitterDMSApiToolsApi->SendDMSUsingPOST");

            var localVarPath = "/base/apitools/sendDMS";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", apiKey)); // query parameter
            if (authToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "auth_token", authToken)); // query parameter
            if (ct0 != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ct0", ct0)); // query parameter
            if (recipientId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "recipient_id", recipientId)); // query parameter
            if (text != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "text", text)); // query parameter
            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SendDMSUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultT>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultT) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultT)));
        }

        /// <summary>
        /// upload media for DM  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="_file">file</param>
        /// <returns>ResultT</returns>
        public ResultT UploadMediaDMUsingGET (string apiKey, string authToken, string ct0, System.IO.Stream _file)
        {
             ApiResponse<ResultT> localVarResponse = UploadMediaDMUsingGETWithHttpInfo(apiKey, authToken, ct0, _file);
             return localVarResponse.Data;
        }

        /// <summary>
        /// upload media for DM  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="_file">file</param>
        /// <returns>ApiResponse of ResultT</returns>
        public ApiResponse< ResultT > UploadMediaDMUsingGETWithHttpInfo (string apiKey, string authToken, string ct0, System.IO.Stream _file)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling TwitterDMSApiToolsApi->UploadMediaDMUsingGET");
            // verify the required parameter 'authToken' is set
            if (authToken == null)
                throw new ApiException(400, "Missing required parameter 'authToken' when calling TwitterDMSApiToolsApi->UploadMediaDMUsingGET");
            // verify the required parameter 'ct0' is set
            if (ct0 == null)
                throw new ApiException(400, "Missing required parameter 'ct0' when calling TwitterDMSApiToolsApi->UploadMediaDMUsingGET");
            // verify the required parameter '_file' is set
            if (_file == null)
                throw new ApiException(400, "Missing required parameter '_file' when calling TwitterDMSApiToolsApi->UploadMediaDMUsingGET");

            var localVarPath = "/base/apitools/uploadMediaDM";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", apiKey)); // query parameter
            if (authToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "auth_token", authToken)); // query parameter
            if (ct0 != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ct0", ct0)); // query parameter
            if (_file != null) localVarFileParams.Add("file", this.Configuration.ApiClient.ParameterToFile("file", _file));


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UploadMediaDMUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultT>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultT) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultT)));
        }

        /// <summary>
        /// upload media for DM  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="_file">file</param>
        /// <returns>Task of ResultT</returns>
        public async System.Threading.Tasks.Task<ResultT> UploadMediaDMUsingGETAsync (string apiKey, string authToken, string ct0, System.IO.Stream _file)
        {
             ApiResponse<ResultT> localVarResponse = await UploadMediaDMUsingGETAsyncWithHttpInfo(apiKey, authToken, ct0, _file);
             return localVarResponse.Data;

        }

        /// <summary>
        /// upload media for DM  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="_file">file</param>
        /// <returns>Task of ApiResponse (ResultT)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResultT>> UploadMediaDMUsingGETAsyncWithHttpInfo (string apiKey, string authToken, string ct0, System.IO.Stream _file)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling TwitterDMSApiToolsApi->UploadMediaDMUsingGET");
            // verify the required parameter 'authToken' is set
            if (authToken == null)
                throw new ApiException(400, "Missing required parameter 'authToken' when calling TwitterDMSApiToolsApi->UploadMediaDMUsingGET");
            // verify the required parameter 'ct0' is set
            if (ct0 == null)
                throw new ApiException(400, "Missing required parameter 'ct0' when calling TwitterDMSApiToolsApi->UploadMediaDMUsingGET");
            // verify the required parameter '_file' is set
            if (_file == null)
                throw new ApiException(400, "Missing required parameter '_file' when calling TwitterDMSApiToolsApi->UploadMediaDMUsingGET");

            var localVarPath = "/base/apitools/uploadMediaDM";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", apiKey)); // query parameter
            if (authToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "auth_token", authToken)); // query parameter
            if (ct0 != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ct0", ct0)); // query parameter
            if (_file != null) localVarFileParams.Add("file", this.Configuration.ApiClient.ParameterToFile("file", _file));


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UploadMediaDMUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultT>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultT) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultT)));
        }

        /// <summary>
        /// upload media for DM  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="_file">file</param>
        /// <returns>ResultT</returns>
        public ResultT UploadMediaDMUsingPOST (string apiKey, string authToken, string ct0, System.IO.Stream _file)
        {
             ApiResponse<ResultT> localVarResponse = UploadMediaDMUsingPOSTWithHttpInfo(apiKey, authToken, ct0, _file);
             return localVarResponse.Data;
        }

        /// <summary>
        /// upload media for DM  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="_file">file</param>
        /// <returns>ApiResponse of ResultT</returns>
        public ApiResponse< ResultT > UploadMediaDMUsingPOSTWithHttpInfo (string apiKey, string authToken, string ct0, System.IO.Stream _file)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling TwitterDMSApiToolsApi->UploadMediaDMUsingPOST");
            // verify the required parameter 'authToken' is set
            if (authToken == null)
                throw new ApiException(400, "Missing required parameter 'authToken' when calling TwitterDMSApiToolsApi->UploadMediaDMUsingPOST");
            // verify the required parameter 'ct0' is set
            if (ct0 == null)
                throw new ApiException(400, "Missing required parameter 'ct0' when calling TwitterDMSApiToolsApi->UploadMediaDMUsingPOST");
            // verify the required parameter '_file' is set
            if (_file == null)
                throw new ApiException(400, "Missing required parameter '_file' when calling TwitterDMSApiToolsApi->UploadMediaDMUsingPOST");

            var localVarPath = "/base/apitools/uploadMediaDM";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", apiKey)); // query parameter
            if (authToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "auth_token", authToken)); // query parameter
            if (ct0 != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ct0", ct0)); // query parameter
            if (_file != null) localVarFileParams.Add("file", this.Configuration.ApiClient.ParameterToFile("file", _file));


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UploadMediaDMUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultT>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultT) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultT)));
        }

        /// <summary>
        /// upload media for DM  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="_file">file</param>
        /// <returns>Task of ResultT</returns>
        public async System.Threading.Tasks.Task<ResultT> UploadMediaDMUsingPOSTAsync (string apiKey, string authToken, string ct0, System.IO.Stream _file)
        {
             ApiResponse<ResultT> localVarResponse = await UploadMediaDMUsingPOSTAsyncWithHttpInfo(apiKey, authToken, ct0, _file);
             return localVarResponse.Data;

        }

        /// <summary>
        /// upload media for DM  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="authToken"></param>
        /// <param name="ct0"></param>
        /// <param name="_file">file</param>
        /// <returns>Task of ApiResponse (ResultT)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResultT>> UploadMediaDMUsingPOSTAsyncWithHttpInfo (string apiKey, string authToken, string ct0, System.IO.Stream _file)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling TwitterDMSApiToolsApi->UploadMediaDMUsingPOST");
            // verify the required parameter 'authToken' is set
            if (authToken == null)
                throw new ApiException(400, "Missing required parameter 'authToken' when calling TwitterDMSApiToolsApi->UploadMediaDMUsingPOST");
            // verify the required parameter 'ct0' is set
            if (ct0 == null)
                throw new ApiException(400, "Missing required parameter 'ct0' when calling TwitterDMSApiToolsApi->UploadMediaDMUsingPOST");
            // verify the required parameter '_file' is set
            if (_file == null)
                throw new ApiException(400, "Missing required parameter '_file' when calling TwitterDMSApiToolsApi->UploadMediaDMUsingPOST");

            var localVarPath = "/base/apitools/uploadMediaDM";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apiKey", apiKey)); // query parameter
            if (authToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "auth_token", authToken)); // query parameter
            if (ct0 != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ct0", ct0)); // query parameter
            if (_file != null) localVarFileParams.Add("file", this.Configuration.ApiClient.ParameterToFile("file", _file));


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UploadMediaDMUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultT>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResultT) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultT)));
        }

    }
}
