/* 
 * Utools_twitter_tools_api
 *
 * X (Twitter) API for search, Tweets, users, followers, images, media and more. Supports some v1.1 and v2 API endpoints, with more to come in the future!
 *
 * OpenAPI spec version: 1.1
 * Contact: huojiecs@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing TwitterDMSApiToolsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class TwitterDMSApiToolsApiTests
    {
        private TwitterDMSApiToolsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new TwitterDMSApiToolsApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of TwitterDMSApiToolsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' TwitterDMSApiToolsApi
            //Assert.IsInstanceOfType(typeof(TwitterDMSApiToolsApi), instance, "instance is a TwitterDMSApiToolsApi");
        }

        
        /// <summary>
        /// Test GetDMSListV2UsingGET
        /// </summary>
        [Test]
        public void GetDMSListV2UsingGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apiKey = null;
            //string authToken = null;
            //string ct0 = null;
            //string cursor = null;
            //var response = instance.GetDMSListV2UsingGET(apiKey, authToken, ct0, cursor);
            //Assert.IsInstanceOf<ResultT> (response, "response is ResultT");
        }
        
        /// <summary>
        /// Test GetDMSListV2UsingPOST
        /// </summary>
        [Test]
        public void GetDMSListV2UsingPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apiKey = null;
            //string authToken = null;
            //string ct0 = null;
            //string cursor = null;
            //var response = instance.GetDMSListV2UsingPOST(apiKey, authToken, ct0, cursor);
            //Assert.IsInstanceOf<ResultT> (response, "response is ResultT");
        }
        
        /// <summary>
        /// Test GetDMSUsingGET
        /// </summary>
        [Test]
        public void GetDMSUsingGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apiKey = null;
            //string authToken = null;
            //string ct0 = null;
            //string id = null;
            //var response = instance.GetDMSUsingGET(apiKey, authToken, ct0, id);
            //Assert.IsInstanceOf<ResultT> (response, "response is ResultT");
        }
        
        /// <summary>
        /// Test GetDMSUsingPOST
        /// </summary>
        [Test]
        public void GetDMSUsingPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apiKey = null;
            //string authToken = null;
            //string ct0 = null;
            //string id = null;
            //var response = instance.GetDMSUsingPOST(apiKey, authToken, ct0, id);
            //Assert.IsInstanceOf<ResultT> (response, "response is ResultT");
        }
        
        /// <summary>
        /// Test SendDMSMediaUsingGET
        /// </summary>
        [Test]
        public void SendDMSMediaUsingGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apiKey = null;
            //string attachmentMediaId = null;
            //string attachmentType = null;
            //string authToken = null;
            //string ct0 = null;
            //string recipientId = null;
            //string text = null;
            //string type = null;
            //string quickReplyType = null;
            //var response = instance.SendDMSMediaUsingGET(apiKey, attachmentMediaId, attachmentType, authToken, ct0, recipientId, text, type, quickReplyType);
            //Assert.IsInstanceOf<ResultT> (response, "response is ResultT");
        }
        
        /// <summary>
        /// Test SendDMSMediaUsingPOST
        /// </summary>
        [Test]
        public void SendDMSMediaUsingPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apiKey = null;
            //string attachmentMediaId = null;
            //string attachmentType = null;
            //string authToken = null;
            //string ct0 = null;
            //string recipientId = null;
            //string text = null;
            //string type = null;
            //string quickReplyType = null;
            //var response = instance.SendDMSMediaUsingPOST(apiKey, attachmentMediaId, attachmentType, authToken, ct0, recipientId, text, type, quickReplyType);
            //Assert.IsInstanceOf<ResultT> (response, "response is ResultT");
        }
        
        /// <summary>
        /// Test SendDMSUsingGET
        /// </summary>
        [Test]
        public void SendDMSUsingGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apiKey = null;
            //string authToken = null;
            //string ct0 = null;
            //string recipientId = null;
            //string text = null;
            //string type = null;
            //var response = instance.SendDMSUsingGET(apiKey, authToken, ct0, recipientId, text, type);
            //Assert.IsInstanceOf<ResultT> (response, "response is ResultT");
        }
        
        /// <summary>
        /// Test SendDMSUsingPOST
        /// </summary>
        [Test]
        public void SendDMSUsingPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apiKey = null;
            //string authToken = null;
            //string ct0 = null;
            //string recipientId = null;
            //string text = null;
            //string type = null;
            //var response = instance.SendDMSUsingPOST(apiKey, authToken, ct0, recipientId, text, type);
            //Assert.IsInstanceOf<ResultT> (response, "response is ResultT");
        }
        
        /// <summary>
        /// Test UploadMediaDMUsingGET
        /// </summary>
        [Test]
        public void UploadMediaDMUsingGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apiKey = null;
            //string authToken = null;
            //string ct0 = null;
            //System.IO.Stream _file = null;
            //var response = instance.UploadMediaDMUsingGET(apiKey, authToken, ct0, _file);
            //Assert.IsInstanceOf<ResultT> (response, "response is ResultT");
        }
        
        /// <summary>
        /// Test UploadMediaDMUsingPOST
        /// </summary>
        [Test]
        public void UploadMediaDMUsingPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apiKey = null;
            //string authToken = null;
            //string ct0 = null;
            //System.IO.Stream _file = null;
            //var response = instance.UploadMediaDMUsingPOST(apiKey, authToken, ct0, _file);
            //Assert.IsInstanceOf<ResultT> (response, "response is ResultT");
        }
        
    }

}
