/* 
 * Utools_twitter_tools_api
 *
 * X (Twitter) API for search, Tweets, users, followers, images, media and more. Supports some v1.1 and v2 API endpoints, with more to come in the future!
 *
 * OpenAPI spec version: 1.1
 * Contact: huojiecs@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing TwitterSearchApiToolsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class TwitterSearchApiToolsApiTests
    {
        private TwitterSearchApiToolsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new TwitterSearchApiToolsApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of TwitterSearchApiToolsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' TwitterSearchApiToolsApi
            //Assert.IsInstanceOfType(typeof(TwitterSearchApiToolsApi), instance, "instance is a TwitterSearchApiToolsApi");
        }

        
        /// <summary>
        /// Test SearchUsingGET
        /// </summary>
        [Test]
        public void SearchUsingGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apiKey = null;
            //string words = null;
            //string any = null;
            //string cursor = null;
            //string from = null;
            //string likes = null;
            //string mentioning = null;
            //string none = null;
            //string phrase = null;
            //string replies = null;
            //string retweets = null;
            //string since = null;
            //string tag = null;
            //string to = null;
            //string until = null;
            //var response = instance.SearchUsingGET(apiKey, words, any, cursor, from, likes, mentioning, none, phrase, replies, retweets, since, tag, to, until);
            //Assert.IsInstanceOf<ResultT> (response, "response is ResultT");
        }
        
        /// <summary>
        /// Test SearchUsingPOST
        /// </summary>
        [Test]
        public void SearchUsingPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apiKey = null;
            //string words = null;
            //string any = null;
            //string cursor = null;
            //string from = null;
            //string likes = null;
            //string mentioning = null;
            //string none = null;
            //string phrase = null;
            //string replies = null;
            //string retweets = null;
            //string since = null;
            //string tag = null;
            //string to = null;
            //string until = null;
            //var response = instance.SearchUsingPOST(apiKey, words, any, cursor, from, likes, mentioning, none, phrase, replies, retweets, since, tag, to, until);
            //Assert.IsInstanceOf<ResultT> (response, "response is ResultT");
        }
        
        /// <summary>
        /// Test TrendsUsingGET
        /// </summary>
        [Test]
        public void TrendsUsingGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apiKey = null;
            //string id = null;
            //var response = instance.TrendsUsingGET(apiKey, id);
            //Assert.IsInstanceOf<ResultT> (response, "response is ResultT");
        }
        
        /// <summary>
        /// Test TrendsUsingPOST
        /// </summary>
        [Test]
        public void TrendsUsingPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apiKey = null;
            //string id = null;
            //var response = instance.TrendsUsingPOST(apiKey, id);
            //Assert.IsInstanceOf<ResultT> (response, "response is ResultT");
        }
        
    }

}
