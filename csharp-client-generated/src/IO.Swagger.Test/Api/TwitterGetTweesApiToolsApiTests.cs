/* 
 * Utools_twitter_tools_api
 *
 * X (Twitter) API for search, Tweets, users, followers, images, media and more. Supports some v1.1 and v2 API endpoints, with more to come in the future!
 *
 * OpenAPI spec version: 1.1
 * Contact: huojiecs@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing TwitterGetTweesApiToolsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class TwitterGetTweesApiToolsApiTests
    {
        private TwitterGetTweesApiToolsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new TwitterGetTweesApiToolsApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of TwitterGetTweesApiToolsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' TwitterGetTweesApiToolsApi
            //Assert.IsInstanceOfType(typeof(TwitterGetTweesApiToolsApi), instance, "instance is a TwitterGetTweesApiToolsApi");
        }

        
        /// <summary>
        /// Test FavoritersV2UsingGET
        /// </summary>
        [Test]
        public void FavoritersV2UsingGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apiKey = null;
            //string tweetId = null;
            //string cursor = null;
            //var response = instance.FavoritersV2UsingGET(apiKey, tweetId, cursor);
            //Assert.IsInstanceOf<ResultT> (response, "response is ResultT");
        }
        
        /// <summary>
        /// Test FavoritersV2UsingPOST
        /// </summary>
        [Test]
        public void FavoritersV2UsingPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apiKey = null;
            //string tweetId = null;
            //string cursor = null;
            //var response = instance.FavoritersV2UsingPOST(apiKey, tweetId, cursor);
            //Assert.IsInstanceOf<ResultT> (response, "response is ResultT");
        }
        
        /// <summary>
        /// Test FavoritesListUsingGET
        /// </summary>
        [Test]
        public void FavoritesListUsingGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apiKey = null;
            //string userId = null;
            //string maxId = null;
            //string screenName = null;
            //string sinceId = null;
            //var response = instance.FavoritesListUsingGET(apiKey, userId, maxId, screenName, sinceId);
            //Assert.IsInstanceOf<ResultT> (response, "response is ResultT");
        }
        
        /// <summary>
        /// Test FavoritesListUsingPOST
        /// </summary>
        [Test]
        public void FavoritesListUsingPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apiKey = null;
            //string userId = null;
            //string maxId = null;
            //string screenName = null;
            //string sinceId = null;
            //var response = instance.FavoritesListUsingPOST(apiKey, userId, maxId, screenName, sinceId);
            //Assert.IsInstanceOf<ResultT> (response, "response is ResultT");
        }
        
        /// <summary>
        /// Test MentionsTimelineUsingGET
        /// </summary>
        [Test]
        public void MentionsTimelineUsingGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apiKey = null;
            //string authToken = null;
            //string ct0 = null;
            //string includeEntities = null;
            //string maxId = null;
            //string sinceId = null;
            //string trimUser = null;
            //var response = instance.MentionsTimelineUsingGET(apiKey, authToken, ct0, includeEntities, maxId, sinceId, trimUser);
            //Assert.IsInstanceOf<ResultT> (response, "response is ResultT");
        }
        
        /// <summary>
        /// Test MentionsTimelineUsingPOST
        /// </summary>
        [Test]
        public void MentionsTimelineUsingPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apiKey = null;
            //string authToken = null;
            //string ct0 = null;
            //string includeEntities = null;
            //string maxId = null;
            //string sinceId = null;
            //string trimUser = null;
            //var response = instance.MentionsTimelineUsingPOST(apiKey, authToken, ct0, includeEntities, maxId, sinceId, trimUser);
            //Assert.IsInstanceOf<ResultT> (response, "response is ResultT");
        }
        
        /// <summary>
        /// Test QuotesV2UsingGET
        /// </summary>
        [Test]
        public void QuotesV2UsingGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apiKey = null;
            //string tweetId = null;
            //string cursor = null;
            //var response = instance.QuotesV2UsingGET(apiKey, tweetId, cursor);
            //Assert.IsInstanceOf<ResultT> (response, "response is ResultT");
        }
        
        /// <summary>
        /// Test QuotesV2UsingPOST
        /// </summary>
        [Test]
        public void QuotesV2UsingPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apiKey = null;
            //string tweetId = null;
            //string cursor = null;
            //var response = instance.QuotesV2UsingPOST(apiKey, tweetId, cursor);
            //Assert.IsInstanceOf<ResultT> (response, "response is ResultT");
        }
        
        /// <summary>
        /// Test RetweetersIdsUsingGET
        /// </summary>
        [Test]
        public void RetweetersIdsUsingGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apiKey = null;
            //string id = null;
            //string cursor = null;
            //var response = instance.RetweetersIdsUsingGET(apiKey, id, cursor);
            //Assert.IsInstanceOf<ResultT> (response, "response is ResultT");
        }
        
        /// <summary>
        /// Test RetweetersIdsUsingPOST
        /// </summary>
        [Test]
        public void RetweetersIdsUsingPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apiKey = null;
            //string id = null;
            //string cursor = null;
            //var response = instance.RetweetersIdsUsingPOST(apiKey, id, cursor);
            //Assert.IsInstanceOf<ResultT> (response, "response is ResultT");
        }
        
        /// <summary>
        /// Test RetweetersV2UsingGET
        /// </summary>
        [Test]
        public void RetweetersV2UsingGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apiKey = null;
            //string tweetId = null;
            //string cursor = null;
            //var response = instance.RetweetersV2UsingGET(apiKey, tweetId, cursor);
            //Assert.IsInstanceOf<ResultT> (response, "response is ResultT");
        }
        
        /// <summary>
        /// Test RetweetersV2UsingPOST
        /// </summary>
        [Test]
        public void RetweetersV2UsingPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apiKey = null;
            //string tweetId = null;
            //string cursor = null;
            //var response = instance.RetweetersV2UsingPOST(apiKey, tweetId, cursor);
            //Assert.IsInstanceOf<ResultT> (response, "response is ResultT");
        }
        
        /// <summary>
        /// Test TweetSimpleUsingGET
        /// </summary>
        [Test]
        public void TweetSimpleUsingGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apiKey = null;
            //string id = null;
            //string cursor = null;
            //var response = instance.TweetSimpleUsingGET(apiKey, id, cursor);
            //Assert.IsInstanceOf<ResultT> (response, "response is ResultT");
        }
        
        /// <summary>
        /// Test TweetSimpleUsingPOST
        /// </summary>
        [Test]
        public void TweetSimpleUsingPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apiKey = null;
            //string id = null;
            //string cursor = null;
            //var response = instance.TweetSimpleUsingPOST(apiKey, id, cursor);
            //Assert.IsInstanceOf<ResultT> (response, "response is ResultT");
        }
        
        /// <summary>
        /// Test TweetTimelineUsingGET
        /// </summary>
        [Test]
        public void TweetTimelineUsingGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apiKey = null;
            //string id = null;
            //string cursor = null;
            //var response = instance.TweetTimelineUsingGET(apiKey, id, cursor);
            //Assert.IsInstanceOf<ResultT> (response, "response is ResultT");
        }
        
        /// <summary>
        /// Test TweetTimelineUsingPOST
        /// </summary>
        [Test]
        public void TweetTimelineUsingPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apiKey = null;
            //string id = null;
            //string cursor = null;
            //var response = instance.TweetTimelineUsingPOST(apiKey, id, cursor);
            //Assert.IsInstanceOf<ResultT> (response, "response is ResultT");
        }
        
        /// <summary>
        /// Test UserTweetReplyUsingGET
        /// </summary>
        [Test]
        public void UserTweetReplyUsingGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apiKey = null;
            //string userId = null;
            //string cursor = null;
            //var response = instance.UserTweetReplyUsingGET(apiKey, userId, cursor);
            //Assert.IsInstanceOf<ResultT> (response, "response is ResultT");
        }
        
        /// <summary>
        /// Test UserTweetReplyUsingPOST
        /// </summary>
        [Test]
        public void UserTweetReplyUsingPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apiKey = null;
            //string userId = null;
            //string cursor = null;
            //var response = instance.UserTweetReplyUsingPOST(apiKey, userId, cursor);
            //Assert.IsInstanceOf<ResultT> (response, "response is ResultT");
        }
        
    }

}
