/* 
 * Utools_twitter_tools_api
 *
 * X (Twitter) API for search, Tweets, users, followers, images, media and more. Supports some v1.1 and v2 API endpoints, with more to come in the future!
 *
 * OpenAPI spec version: 1.1
 * Contact: huojiecs@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing TwitterSendTweesApiToolsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class TwitterSendTweesApiToolsApiTests
    {
        private TwitterSendTweesApiToolsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new TwitterSendTweesApiToolsApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of TwitterSendTweesApiToolsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' TwitterSendTweesApiToolsApi
            //Assert.IsInstanceOfType(typeof(TwitterSendTweesApiToolsApi), instance, "instance is a TwitterSendTweesApiToolsApi");
        }

        
        /// <summary>
        /// Test CreateRetweetUsingGET
        /// </summary>
        [Test]
        public void CreateRetweetUsingGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apiKey = null;
            //string authToken = null;
            //string ct0 = null;
            //string tweetId = null;
            //var response = instance.CreateRetweetUsingGET(apiKey, authToken, ct0, tweetId);
            //Assert.IsInstanceOf<ResultT> (response, "response is ResultT");
        }
        
        /// <summary>
        /// Test CreateRetweetUsingPOST
        /// </summary>
        [Test]
        public void CreateRetweetUsingPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apiKey = null;
            //string authToken = null;
            //string ct0 = null;
            //string tweetId = null;
            //var response = instance.CreateRetweetUsingPOST(apiKey, authToken, ct0, tweetId);
            //Assert.IsInstanceOf<ResultT> (response, "response is ResultT");
        }
        
        /// <summary>
        /// Test CreateTweetUsingGET
        /// </summary>
        [Test]
        public void CreateTweetUsingGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apiKey = null;
            //string authToken = null;
            //string ct0 = null;
            //string text = null;
            //List<string> medias = null;
            //var response = instance.CreateTweetUsingGET(apiKey, authToken, ct0, text, medias);
            //Assert.IsInstanceOf<ResultT> (response, "response is ResultT");
        }
        
        /// <summary>
        /// Test CreateTweetUsingPOST
        /// </summary>
        [Test]
        public void CreateTweetUsingPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apiKey = null;
            //string authToken = null;
            //string ct0 = null;
            //string text = null;
            //List<string> medias = null;
            //var response = instance.CreateTweetUsingPOST(apiKey, authToken, ct0, text, medias);
            //Assert.IsInstanceOf<ResultT> (response, "response is ResultT");
        }
        
        /// <summary>
        /// Test LikeTweetUsingGET
        /// </summary>
        [Test]
        public void LikeTweetUsingGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apiKey = null;
            //string authToken = null;
            //string ct0 = null;
            //string id = null;
            //var response = instance.LikeTweetUsingGET(apiKey, authToken, ct0, id);
            //Assert.IsInstanceOf<ResultT> (response, "response is ResultT");
        }
        
        /// <summary>
        /// Test LikeTweetUsingPOST
        /// </summary>
        [Test]
        public void LikeTweetUsingPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apiKey = null;
            //string authToken = null;
            //string ct0 = null;
            //string id = null;
            //var response = instance.LikeTweetUsingPOST(apiKey, authToken, ct0, id);
            //Assert.IsInstanceOf<ResultT> (response, "response is ResultT");
        }
        
        /// <summary>
        /// Test TweetReplyUsingGET
        /// </summary>
        [Test]
        public void TweetReplyUsingGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apiKey = null;
            //string authToken = null;
            //string ct0 = null;
            //string text = null;
            //string tweetId = null;
            //List<string> medias = null;
            //var response = instance.TweetReplyUsingGET(apiKey, authToken, ct0, text, tweetId, medias);
            //Assert.IsInstanceOf<ResultT> (response, "response is ResultT");
        }
        
        /// <summary>
        /// Test TweetReplyUsingPOST
        /// </summary>
        [Test]
        public void TweetReplyUsingPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apiKey = null;
            //string authToken = null;
            //string ct0 = null;
            //string text = null;
            //string tweetId = null;
            //List<string> medias = null;
            //var response = instance.TweetReplyUsingPOST(apiKey, authToken, ct0, text, tweetId, medias);
            //Assert.IsInstanceOf<ResultT> (response, "response is ResultT");
        }
        
        /// <summary>
        /// Test UnlikeTweetUsingGET
        /// </summary>
        [Test]
        public void UnlikeTweetUsingGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apiKey = null;
            //string authToken = null;
            //string ct0 = null;
            //string id = null;
            //var response = instance.UnlikeTweetUsingGET(apiKey, authToken, ct0, id);
            //Assert.IsInstanceOf<ResultT> (response, "response is ResultT");
        }
        
        /// <summary>
        /// Test UnlikeTweetUsingPOST
        /// </summary>
        [Test]
        public void UnlikeTweetUsingPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apiKey = null;
            //string authToken = null;
            //string ct0 = null;
            //string id = null;
            //var response = instance.UnlikeTweetUsingPOST(apiKey, authToken, ct0, id);
            //Assert.IsInstanceOf<ResultT> (response, "response is ResultT");
        }
        
        /// <summary>
        /// Test UploadMediaUsingGET
        /// </summary>
        [Test]
        public void UploadMediaUsingGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apiKey = null;
            //string authToken = null;
            //string ct0 = null;
            //string mediaUrl = null;
            //var response = instance.UploadMediaUsingGET(apiKey, authToken, ct0, mediaUrl);
            //Assert.IsInstanceOf<ResultT> (response, "response is ResultT");
        }
        
        /// <summary>
        /// Test UploadMediaUsingPOST
        /// </summary>
        [Test]
        public void UploadMediaUsingPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apiKey = null;
            //string authToken = null;
            //string ct0 = null;
            //string mediaUrl = null;
            //var response = instance.UploadMediaUsingPOST(apiKey, authToken, ct0, mediaUrl);
            //Assert.IsInstanceOf<ResultT> (response, "response is ResultT");
        }
        
    }

}
