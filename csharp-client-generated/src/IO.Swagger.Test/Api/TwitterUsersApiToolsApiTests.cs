/* 
 * Utools_twitter_tools_api
 *
 * X (Twitter) API for search, Tweets, users, followers, images, media and more. Supports some v1.1 and v2 API endpoints, with more to come in the future!
 *
 * OpenAPI spec version: 1.1
 * Contact: huojiecs@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing TwitterUsersApiToolsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class TwitterUsersApiToolsApiTests
    {
        private TwitterUsersApiToolsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new TwitterUsersApiToolsApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of TwitterUsersApiToolsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' TwitterUsersApiToolsApi
            //Assert.IsInstanceOfType(typeof(TwitterUsersApiToolsApi), instance, "instance is a TwitterUsersApiToolsApi");
        }

        
        /// <summary>
        /// Test BlocksCreateUsingGET
        /// </summary>
        [Test]
        public void BlocksCreateUsingGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apiKey = null;
            //string authToken = null;
            //string ct0 = null;
            //string screenName = null;
            //string userId = null;
            //var response = instance.BlocksCreateUsingGET(apiKey, authToken, ct0, screenName, userId);
            //Assert.IsInstanceOf<ResultT> (response, "response is ResultT");
        }
        
        /// <summary>
        /// Test BlocksCreateUsingPOST
        /// </summary>
        [Test]
        public void BlocksCreateUsingPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apiKey = null;
            //string authToken = null;
            //string ct0 = null;
            //string screenName = null;
            //string userId = null;
            //var response = instance.BlocksCreateUsingPOST(apiKey, authToken, ct0, screenName, userId);
            //Assert.IsInstanceOf<ResultT> (response, "response is ResultT");
        }
        
        /// <summary>
        /// Test BlocksDestroyUsingGET
        /// </summary>
        [Test]
        public void BlocksDestroyUsingGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apiKey = null;
            //string authToken = null;
            //string ct0 = null;
            //string screenName = null;
            //string userId = null;
            //var response = instance.BlocksDestroyUsingGET(apiKey, authToken, ct0, screenName, userId);
            //Assert.IsInstanceOf<ResultT> (response, "response is ResultT");
        }
        
        /// <summary>
        /// Test BlocksDestroyUsingPOST
        /// </summary>
        [Test]
        public void BlocksDestroyUsingPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apiKey = null;
            //string authToken = null;
            //string ct0 = null;
            //string screenName = null;
            //string userId = null;
            //var response = instance.BlocksDestroyUsingPOST(apiKey, authToken, ct0, screenName, userId);
            //Assert.IsInstanceOf<ResultT> (response, "response is ResultT");
        }
        
        /// <summary>
        /// Test GetListByUserIdOrScreenNameUsingGET
        /// </summary>
        [Test]
        public void GetListByUserIdOrScreenNameUsingGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apiKey = null;
            //string screenName = null;
            //string userId = null;
            //var response = instance.GetListByUserIdOrScreenNameUsingGET(apiKey, screenName, userId);
            //Assert.IsInstanceOf<ResultT> (response, "response is ResultT");
        }
        
        /// <summary>
        /// Test GetListByUserIdOrScreenNameUsingPOST
        /// </summary>
        [Test]
        public void GetListByUserIdOrScreenNameUsingPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apiKey = null;
            //string screenName = null;
            //string userId = null;
            //var response = instance.GetListByUserIdOrScreenNameUsingPOST(apiKey, screenName, userId);
            //Assert.IsInstanceOf<ResultT> (response, "response is ResultT");
        }
        
        /// <summary>
        /// Test GetListMembersByListIdUsingGET
        /// </summary>
        [Test]
        public void GetListMembersByListIdUsingGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apiKey = null;
            //string listId = null;
            //string cursor = null;
            //var response = instance.GetListMembersByListIdUsingGET(apiKey, listId, cursor);
            //Assert.IsInstanceOf<ResultT> (response, "response is ResultT");
        }
        
        /// <summary>
        /// Test GetListMembersByListIdUsingPOST
        /// </summary>
        [Test]
        public void GetListMembersByListIdUsingPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apiKey = null;
            //string listId = null;
            //string cursor = null;
            //var response = instance.GetListMembersByListIdUsingPOST(apiKey, listId, cursor);
            //Assert.IsInstanceOf<ResultT> (response, "response is ResultT");
        }
        
        /// <summary>
        /// Test GetUserByIdOrNameLookUpUsingGET
        /// </summary>
        [Test]
        public void GetUserByIdOrNameLookUpUsingGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apiKey = null;
            //string screenName = null;
            //string userId = null;
            //var response = instance.GetUserByIdOrNameLookUpUsingGET(apiKey, screenName, userId);
            //Assert.IsInstanceOf<ResultT> (response, "response is ResultT");
        }
        
        /// <summary>
        /// Test GetUserByIdOrNameLookUpUsingPOST
        /// </summary>
        [Test]
        public void GetUserByIdOrNameLookUpUsingPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apiKey = null;
            //string screenName = null;
            //string userId = null;
            //var response = instance.GetUserByIdOrNameLookUpUsingPOST(apiKey, screenName, userId);
            //Assert.IsInstanceOf<ResultT> (response, "response is ResultT");
        }
        
        /// <summary>
        /// Test GetUserByIdOrNameShowUsingGET
        /// </summary>
        [Test]
        public void GetUserByIdOrNameShowUsingGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apiKey = null;
            //string screenName = null;
            //string userId = null;
            //var response = instance.GetUserByIdOrNameShowUsingGET(apiKey, screenName, userId);
            //Assert.IsInstanceOf<ResultT> (response, "response is ResultT");
        }
        
        /// <summary>
        /// Test GetUserByIdOrNameShowUsingPOST
        /// </summary>
        [Test]
        public void GetUserByIdOrNameShowUsingPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apiKey = null;
            //string screenName = null;
            //string userId = null;
            //var response = instance.GetUserByIdOrNameShowUsingPOST(apiKey, screenName, userId);
            //Assert.IsInstanceOf<ResultT> (response, "response is ResultT");
        }
        
        /// <summary>
        /// Test UerByIdRestIdV2UsingGET
        /// </summary>
        [Test]
        public void UerByIdRestIdV2UsingGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apiKey = null;
            //string userId = null;
            //string cursor = null;
            //var response = instance.UerByIdRestIdV2UsingGET(apiKey, userId, cursor);
            //Assert.IsInstanceOf<ResultT> (response, "response is ResultT");
        }
        
        /// <summary>
        /// Test UerByIdRestIdV2UsingPOST
        /// </summary>
        [Test]
        public void UerByIdRestIdV2UsingPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apiKey = null;
            //string userId = null;
            //string cursor = null;
            //var response = instance.UerByIdRestIdV2UsingPOST(apiKey, userId, cursor);
            //Assert.IsInstanceOf<ResultT> (response, "response is ResultT");
        }
        
        /// <summary>
        /// Test UserByScreenNameV2UsingGET
        /// </summary>
        [Test]
        public void UserByScreenNameV2UsingGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apiKey = null;
            //string screenName = null;
            //var response = instance.UserByScreenNameV2UsingGET(apiKey, screenName);
            //Assert.IsInstanceOf<ResultT> (response, "response is ResultT");
        }
        
        /// <summary>
        /// Test UserByScreenNameV2UsingPOST
        /// </summary>
        [Test]
        public void UserByScreenNameV2UsingPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apiKey = null;
            //string screenName = null;
            //var response = instance.UserByScreenNameV2UsingPOST(apiKey, screenName);
            //Assert.IsInstanceOf<ResultT> (response, "response is ResultT");
        }
        
        /// <summary>
        /// Test UserTimelineUsingGET
        /// </summary>
        [Test]
        public void UserTimelineUsingGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apiKey = null;
            //string userId = null;
            //string cursor = null;
            //var response = instance.UserTimelineUsingGET(apiKey, userId, cursor);
            //Assert.IsInstanceOf<ResultT> (response, "response is ResultT");
        }
        
        /// <summary>
        /// Test UserTimelineUsingPOST
        /// </summary>
        [Test]
        public void UserTimelineUsingPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apiKey = null;
            //string userId = null;
            //string cursor = null;
            //var response = instance.UserTimelineUsingPOST(apiKey, userId, cursor);
            //Assert.IsInstanceOf<ResultT> (response, "response is ResultT");
        }
        
        /// <summary>
        /// Test UserTweetsV2UsingGET
        /// </summary>
        [Test]
        public void UserTweetsV2UsingGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apiKey = null;
            //string userId = null;
            //string cursor = null;
            //var response = instance.UserTweetsV2UsingGET(apiKey, userId, cursor);
            //Assert.IsInstanceOf<ResultT> (response, "response is ResultT");
        }
        
        /// <summary>
        /// Test UserTweetsV2UsingPOST
        /// </summary>
        [Test]
        public void UserTweetsV2UsingPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apiKey = null;
            //string userId = null;
            //string cursor = null;
            //var response = instance.UserTweetsV2UsingPOST(apiKey, userId, cursor);
            //Assert.IsInstanceOf<ResultT> (response, "response is ResultT");
        }
        
    }

}
