/* 
 * Utools_twitter_tools_api
 *
 * X (Twitter) API for search, Tweets, users, followers, images, media and more. Supports some v1.1 and v2 API endpoints, with more to come in the future!
 *
 * OpenAPI spec version: 1.1
 * Contact: huojiecs@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing TwitterFollowsApiToolsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class TwitterFollowsApiToolsApiTests
    {
        private TwitterFollowsApiToolsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new TwitterFollowsApiToolsApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of TwitterFollowsApiToolsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' TwitterFollowsApiToolsApi
            //Assert.IsInstanceOfType(typeof(TwitterFollowsApiToolsApi), instance, "instance is a TwitterFollowsApiToolsApi");
        }

        
        /// <summary>
        /// Test BlueVerifiedFollowersV2UsingGET
        /// </summary>
        [Test]
        public void BlueVerifiedFollowersV2UsingGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apiKey = null;
            //string userId = null;
            //string cursor = null;
            //var response = instance.BlueVerifiedFollowersV2UsingGET(apiKey, userId, cursor);
            //Assert.IsInstanceOf<ResultT> (response, "response is ResultT");
        }
        
        /// <summary>
        /// Test BlueVerifiedFollowersV2UsingPOST
        /// </summary>
        [Test]
        public void BlueVerifiedFollowersV2UsingPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apiKey = null;
            //string userId = null;
            //string cursor = null;
            //var response = instance.BlueVerifiedFollowersV2UsingPOST(apiKey, userId, cursor);
            //Assert.IsInstanceOf<ResultT> (response, "response is ResultT");
        }
        
        /// <summary>
        /// Test FollowUsingGET
        /// </summary>
        [Test]
        public void FollowUsingGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apiKey = null;
            //string authToken = null;
            //string ct0 = null;
            //string screenName = null;
            //string userId = null;
            //var response = instance.FollowUsingGET(apiKey, authToken, ct0, screenName, userId);
            //Assert.IsInstanceOf<ResultT> (response, "response is ResultT");
        }
        
        /// <summary>
        /// Test FollowUsingPOST
        /// </summary>
        [Test]
        public void FollowUsingPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apiKey = null;
            //string authToken = null;
            //string ct0 = null;
            //string screenName = null;
            //string userId = null;
            //var response = instance.FollowUsingPOST(apiKey, authToken, ct0, screenName, userId);
            //Assert.IsInstanceOf<ResultT> (response, "response is ResultT");
        }
        
        /// <summary>
        /// Test FollowersIdsUsingGET
        /// </summary>
        [Test]
        public void FollowersIdsUsingGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apiKey = null;
            //string cursor = null;
            //string screenName = null;
            //string userId = null;
            //var response = instance.FollowersIdsUsingGET(apiKey, cursor, screenName, userId);
            //Assert.IsInstanceOf<ResultT> (response, "response is ResultT");
        }
        
        /// <summary>
        /// Test FollowersIdsUsingPOST
        /// </summary>
        [Test]
        public void FollowersIdsUsingPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apiKey = null;
            //string cursor = null;
            //string screenName = null;
            //string userId = null;
            //var response = instance.FollowersIdsUsingPOST(apiKey, cursor, screenName, userId);
            //Assert.IsInstanceOf<ResultT> (response, "response is ResultT");
        }
        
        /// <summary>
        /// Test FollowersListUsingGET
        /// </summary>
        [Test]
        public void FollowersListUsingGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apiKey = null;
            //string cursor = null;
            //string screenName = null;
            //string userId = null;
            //var response = instance.FollowersListUsingGET(apiKey, cursor, screenName, userId);
            //Assert.IsInstanceOf<ResultT> (response, "response is ResultT");
        }
        
        /// <summary>
        /// Test FollowersListUsingPOST
        /// </summary>
        [Test]
        public void FollowersListUsingPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apiKey = null;
            //string cursor = null;
            //string screenName = null;
            //string userId = null;
            //var response = instance.FollowersListUsingPOST(apiKey, cursor, screenName, userId);
            //Assert.IsInstanceOf<ResultT> (response, "response is ResultT");
        }
        
        /// <summary>
        /// Test FollowersListV2UsingGET
        /// </summary>
        [Test]
        public void FollowersListV2UsingGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apiKey = null;
            //string userId = null;
            //string cursor = null;
            //var response = instance.FollowersListV2UsingGET(apiKey, userId, cursor);
            //Assert.IsInstanceOf<ResultT> (response, "response is ResultT");
        }
        
        /// <summary>
        /// Test FollowersListV2UsingPOST
        /// </summary>
        [Test]
        public void FollowersListV2UsingPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apiKey = null;
            //string userId = null;
            //string cursor = null;
            //var response = instance.FollowersListV2UsingPOST(apiKey, userId, cursor);
            //Assert.IsInstanceOf<ResultT> (response, "response is ResultT");
        }
        
        /// <summary>
        /// Test FollowingsIdsUsingGET
        /// </summary>
        [Test]
        public void FollowingsIdsUsingGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apiKey = null;
            //string cursor = null;
            //string screenName = null;
            //string userId = null;
            //var response = instance.FollowingsIdsUsingGET(apiKey, cursor, screenName, userId);
            //Assert.IsInstanceOf<ResultT> (response, "response is ResultT");
        }
        
        /// <summary>
        /// Test FollowingsIdsUsingPOST
        /// </summary>
        [Test]
        public void FollowingsIdsUsingPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apiKey = null;
            //string cursor = null;
            //string screenName = null;
            //string userId = null;
            //var response = instance.FollowingsIdsUsingPOST(apiKey, cursor, screenName, userId);
            //Assert.IsInstanceOf<ResultT> (response, "response is ResultT");
        }
        
        /// <summary>
        /// Test FollowingsListUsingGET
        /// </summary>
        [Test]
        public void FollowingsListUsingGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apiKey = null;
            //string cursor = null;
            //string screenName = null;
            //string userId = null;
            //var response = instance.FollowingsListUsingGET(apiKey, cursor, screenName, userId);
            //Assert.IsInstanceOf<ResultT> (response, "response is ResultT");
        }
        
        /// <summary>
        /// Test FollowingsListUsingPOST
        /// </summary>
        [Test]
        public void FollowingsListUsingPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apiKey = null;
            //string cursor = null;
            //string screenName = null;
            //string userId = null;
            //var response = instance.FollowingsListUsingPOST(apiKey, cursor, screenName, userId);
            //Assert.IsInstanceOf<ResultT> (response, "response is ResultT");
        }
        
        /// <summary>
        /// Test FollowingsListV2UsingGET
        /// </summary>
        [Test]
        public void FollowingsListV2UsingGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apiKey = null;
            //string userId = null;
            //string cursor = null;
            //var response = instance.FollowingsListV2UsingGET(apiKey, userId, cursor);
            //Assert.IsInstanceOf<ResultT> (response, "response is ResultT");
        }
        
        /// <summary>
        /// Test FollowingsListV2UsingPOST
        /// </summary>
        [Test]
        public void FollowingsListV2UsingPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apiKey = null;
            //string userId = null;
            //string cursor = null;
            //var response = instance.FollowingsListV2UsingPOST(apiKey, userId, cursor);
            //Assert.IsInstanceOf<ResultT> (response, "response is ResultT");
        }
        
        /// <summary>
        /// Test GetFriendshipsShowUsingGET
        /// </summary>
        [Test]
        public void GetFriendshipsShowUsingGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apiKey = null;
            //string sourceId = null;
            //string sourceScreenName = null;
            //string targetId = null;
            //string targetScreenName = null;
            //var response = instance.GetFriendshipsShowUsingGET(apiKey, sourceId, sourceScreenName, targetId, targetScreenName);
            //Assert.IsInstanceOf<ResultT> (response, "response is ResultT");
        }
        
        /// <summary>
        /// Test GetFriendshipsShowUsingPOST
        /// </summary>
        [Test]
        public void GetFriendshipsShowUsingPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apiKey = null;
            //string sourceId = null;
            //string sourceScreenName = null;
            //string targetId = null;
            //string targetScreenName = null;
            //var response = instance.GetFriendshipsShowUsingPOST(apiKey, sourceId, sourceScreenName, targetId, targetScreenName);
            //Assert.IsInstanceOf<ResultT> (response, "response is ResultT");
        }
        
        /// <summary>
        /// Test UnfollowUsingGET
        /// </summary>
        [Test]
        public void UnfollowUsingGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apiKey = null;
            //string authToken = null;
            //string ct0 = null;
            //string screenName = null;
            //string userId = null;
            //var response = instance.UnfollowUsingGET(apiKey, authToken, ct0, screenName, userId);
            //Assert.IsInstanceOf<ResultT> (response, "response is ResultT");
        }
        
        /// <summary>
        /// Test UnfollowUsingPOST
        /// </summary>
        [Test]
        public void UnfollowUsingPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apiKey = null;
            //string authToken = null;
            //string ct0 = null;
            //string screenName = null;
            //string userId = null;
            //var response = instance.UnfollowUsingPOST(apiKey, authToken, ct0, screenName, userId);
            //Assert.IsInstanceOf<ResultT> (response, "response is ResultT");
        }
        
    }

}
