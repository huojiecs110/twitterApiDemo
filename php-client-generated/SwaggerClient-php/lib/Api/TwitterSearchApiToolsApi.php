<?php
/**
 * TwitterSearchApiToolsApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Utools_twitter_tools_api
 *
 * X (Twitter) API for search, Tweets, users, followers, images, media and more. Supports some v1.1 and v2 API endpoints, with more to come in the future!
 *
 * OpenAPI spec version: 1.1
 * Contact: huojiecs@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.37
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * TwitterSearchApiToolsApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TwitterSearchApiToolsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation searchUsingGET
     *
     * Advanced Search
     *
     * @param  string $api_key api_key (required)
     * @param  string $words words (required)
     * @param  string $any Any of these words (Example: cats dogs �� contains either ��cats�� or ��dogs�� (or both)) (optional)
     * @param  string $cursor cursor (Example: AACCgACF91iNpzAJxAKAAMX3WI2nL-x4AgABAAAAA ) (optional)
     * @param  string $from From these accounts (Example: @Twitter �� sent from @Twitter) (optional)
     * @param  string $likes Minimum likes (Example: 280 �� Tweets with at least 280 likes)) (optional)
     * @param  string $mentioning Mentioning these accounts (Example: @SFBART @Caltrain �� mentions @SFBART or mentions @Caltrain) (optional)
     * @param  string $none None of these words (Example: cats dogs �� does not contain ��cats�� and does not contain ��dogs��) (optional)
     * @param  string $phrase This exact phrase (Example: happy hour �� contains the exact phrase ��happy hour��) (optional)
     * @param  string $replies Minimum replies (Example: 280 �� Tweets with at least 280 replies) (optional)
     * @param  string $retweets Minimum retweets (Example: 280 �� Tweets with at least 280 likes) (optional)
     * @param  string $since start time (Example: 2020-01-01 ) (optional)
     * @param  string $tag These hashtags (Example: #ThrowbackThursday �� contains the hashtag #ThrowbackThursday) (optional)
     * @param  string $to To these accounts (Example: @Twitter �� sent in reply to @Twitter) (optional)
     * @param  string $until end time (Example: 2021-02-02) (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ResultT
     */
    public function searchUsingGET($api_key, $words, $any = null, $cursor = null, $from = null, $likes = null, $mentioning = null, $none = null, $phrase = null, $replies = null, $retweets = null, $since = null, $tag = null, $to = null, $until = null)
    {
        list($response) = $this->searchUsingGETWithHttpInfo($api_key, $words, $any, $cursor, $from, $likes, $mentioning, $none, $phrase, $replies, $retweets, $since, $tag, $to, $until);
        return $response;
    }

    /**
     * Operation searchUsingGETWithHttpInfo
     *
     * Advanced Search
     *
     * @param  string $api_key (required)
     * @param  string $words (required)
     * @param  string $any Any of these words (Example: cats dogs �� contains either ��cats�� or ��dogs�� (or both)) (optional)
     * @param  string $cursor cursor (Example: AACCgACF91iNpzAJxAKAAMX3WI2nL-x4AgABAAAAA ) (optional)
     * @param  string $from From these accounts (Example: @Twitter �� sent from @Twitter) (optional)
     * @param  string $likes Minimum likes (Example: 280 �� Tweets with at least 280 likes)) (optional)
     * @param  string $mentioning Mentioning these accounts (Example: @SFBART @Caltrain �� mentions @SFBART or mentions @Caltrain) (optional)
     * @param  string $none None of these words (Example: cats dogs �� does not contain ��cats�� and does not contain ��dogs��) (optional)
     * @param  string $phrase This exact phrase (Example: happy hour �� contains the exact phrase ��happy hour��) (optional)
     * @param  string $replies Minimum replies (Example: 280 �� Tweets with at least 280 replies) (optional)
     * @param  string $retweets Minimum retweets (Example: 280 �� Tweets with at least 280 likes) (optional)
     * @param  string $since start time (Example: 2020-01-01 ) (optional)
     * @param  string $tag These hashtags (Example: #ThrowbackThursday �� contains the hashtag #ThrowbackThursday) (optional)
     * @param  string $to To these accounts (Example: @Twitter �� sent in reply to @Twitter) (optional)
     * @param  string $until end time (Example: 2021-02-02) (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ResultT, HTTP status code, HTTP response headers (array of strings)
     */
    public function searchUsingGETWithHttpInfo($api_key, $words, $any = null, $cursor = null, $from = null, $likes = null, $mentioning = null, $none = null, $phrase = null, $replies = null, $retweets = null, $since = null, $tag = null, $to = null, $until = null)
    {
        $returnType = '\Swagger\Client\Model\ResultT';
        $request = $this->searchUsingGETRequest($api_key, $words, $any, $cursor, $from, $likes, $mentioning, $none, $phrase, $replies, $retweets, $since, $tag, $to, $until);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ResultT',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation searchUsingGETAsync
     *
     * Advanced Search
     *
     * @param  string $api_key (required)
     * @param  string $words (required)
     * @param  string $any Any of these words (Example: cats dogs �� contains either ��cats�� or ��dogs�� (or both)) (optional)
     * @param  string $cursor cursor (Example: AACCgACF91iNpzAJxAKAAMX3WI2nL-x4AgABAAAAA ) (optional)
     * @param  string $from From these accounts (Example: @Twitter �� sent from @Twitter) (optional)
     * @param  string $likes Minimum likes (Example: 280 �� Tweets with at least 280 likes)) (optional)
     * @param  string $mentioning Mentioning these accounts (Example: @SFBART @Caltrain �� mentions @SFBART or mentions @Caltrain) (optional)
     * @param  string $none None of these words (Example: cats dogs �� does not contain ��cats�� and does not contain ��dogs��) (optional)
     * @param  string $phrase This exact phrase (Example: happy hour �� contains the exact phrase ��happy hour��) (optional)
     * @param  string $replies Minimum replies (Example: 280 �� Tweets with at least 280 replies) (optional)
     * @param  string $retweets Minimum retweets (Example: 280 �� Tweets with at least 280 likes) (optional)
     * @param  string $since start time (Example: 2020-01-01 ) (optional)
     * @param  string $tag These hashtags (Example: #ThrowbackThursday �� contains the hashtag #ThrowbackThursday) (optional)
     * @param  string $to To these accounts (Example: @Twitter �� sent in reply to @Twitter) (optional)
     * @param  string $until end time (Example: 2021-02-02) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchUsingGETAsync($api_key, $words, $any = null, $cursor = null, $from = null, $likes = null, $mentioning = null, $none = null, $phrase = null, $replies = null, $retweets = null, $since = null, $tag = null, $to = null, $until = null)
    {
        return $this->searchUsingGETAsyncWithHttpInfo($api_key, $words, $any, $cursor, $from, $likes, $mentioning, $none, $phrase, $replies, $retweets, $since, $tag, $to, $until)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation searchUsingGETAsyncWithHttpInfo
     *
     * Advanced Search
     *
     * @param  string $api_key (required)
     * @param  string $words (required)
     * @param  string $any Any of these words (Example: cats dogs �� contains either ��cats�� or ��dogs�� (or both)) (optional)
     * @param  string $cursor cursor (Example: AACCgACF91iNpzAJxAKAAMX3WI2nL-x4AgABAAAAA ) (optional)
     * @param  string $from From these accounts (Example: @Twitter �� sent from @Twitter) (optional)
     * @param  string $likes Minimum likes (Example: 280 �� Tweets with at least 280 likes)) (optional)
     * @param  string $mentioning Mentioning these accounts (Example: @SFBART @Caltrain �� mentions @SFBART or mentions @Caltrain) (optional)
     * @param  string $none None of these words (Example: cats dogs �� does not contain ��cats�� and does not contain ��dogs��) (optional)
     * @param  string $phrase This exact phrase (Example: happy hour �� contains the exact phrase ��happy hour��) (optional)
     * @param  string $replies Minimum replies (Example: 280 �� Tweets with at least 280 replies) (optional)
     * @param  string $retweets Minimum retweets (Example: 280 �� Tweets with at least 280 likes) (optional)
     * @param  string $since start time (Example: 2020-01-01 ) (optional)
     * @param  string $tag These hashtags (Example: #ThrowbackThursday �� contains the hashtag #ThrowbackThursday) (optional)
     * @param  string $to To these accounts (Example: @Twitter �� sent in reply to @Twitter) (optional)
     * @param  string $until end time (Example: 2021-02-02) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchUsingGETAsyncWithHttpInfo($api_key, $words, $any = null, $cursor = null, $from = null, $likes = null, $mentioning = null, $none = null, $phrase = null, $replies = null, $retweets = null, $since = null, $tag = null, $to = null, $until = null)
    {
        $returnType = '\Swagger\Client\Model\ResultT';
        $request = $this->searchUsingGETRequest($api_key, $words, $any, $cursor, $from, $likes, $mentioning, $none, $phrase, $replies, $retweets, $since, $tag, $to, $until);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'searchUsingGET'
     *
     * @param  string $api_key (required)
     * @param  string $words (required)
     * @param  string $any Any of these words (Example: cats dogs �� contains either ��cats�� or ��dogs�� (or both)) (optional)
     * @param  string $cursor cursor (Example: AACCgACF91iNpzAJxAKAAMX3WI2nL-x4AgABAAAAA ) (optional)
     * @param  string $from From these accounts (Example: @Twitter �� sent from @Twitter) (optional)
     * @param  string $likes Minimum likes (Example: 280 �� Tweets with at least 280 likes)) (optional)
     * @param  string $mentioning Mentioning these accounts (Example: @SFBART @Caltrain �� mentions @SFBART or mentions @Caltrain) (optional)
     * @param  string $none None of these words (Example: cats dogs �� does not contain ��cats�� and does not contain ��dogs��) (optional)
     * @param  string $phrase This exact phrase (Example: happy hour �� contains the exact phrase ��happy hour��) (optional)
     * @param  string $replies Minimum replies (Example: 280 �� Tweets with at least 280 replies) (optional)
     * @param  string $retweets Minimum retweets (Example: 280 �� Tweets with at least 280 likes) (optional)
     * @param  string $since start time (Example: 2020-01-01 ) (optional)
     * @param  string $tag These hashtags (Example: #ThrowbackThursday �� contains the hashtag #ThrowbackThursday) (optional)
     * @param  string $to To these accounts (Example: @Twitter �� sent in reply to @Twitter) (optional)
     * @param  string $until end time (Example: 2021-02-02) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function searchUsingGETRequest($api_key, $words, $any = null, $cursor = null, $from = null, $likes = null, $mentioning = null, $none = null, $phrase = null, $replies = null, $retweets = null, $since = null, $tag = null, $to = null, $until = null)
    {
        // verify the required parameter 'api_key' is set
        if ($api_key === null || (is_array($api_key) && count($api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_key when calling searchUsingGET'
            );
        }
        // verify the required parameter 'words' is set
        if ($words === null || (is_array($words) && count($words) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $words when calling searchUsingGET'
            );
        }

        $resourcePath = '/base/apitools/search';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($any !== null) {
            $queryParams['any'] = ObjectSerializer::toQueryValue($any);
        }
        // query params
        if ($api_key !== null) {
            $queryParams['apiKey'] = ObjectSerializer::toQueryValue($api_key);
        }
        // query params
        if ($cursor !== null) {
            $queryParams['cursor'] = ObjectSerializer::toQueryValue($cursor);
        }
        // query params
        if ($from !== null) {
            $queryParams['from'] = ObjectSerializer::toQueryValue($from);
        }
        // query params
        if ($likes !== null) {
            $queryParams['likes'] = ObjectSerializer::toQueryValue($likes);
        }
        // query params
        if ($mentioning !== null) {
            $queryParams['mentioning'] = ObjectSerializer::toQueryValue($mentioning);
        }
        // query params
        if ($none !== null) {
            $queryParams['none'] = ObjectSerializer::toQueryValue($none);
        }
        // query params
        if ($phrase !== null) {
            $queryParams['phrase'] = ObjectSerializer::toQueryValue($phrase);
        }
        // query params
        if ($replies !== null) {
            $queryParams['replies'] = ObjectSerializer::toQueryValue($replies);
        }
        // query params
        if ($retweets !== null) {
            $queryParams['retweets'] = ObjectSerializer::toQueryValue($retweets);
        }
        // query params
        if ($since !== null) {
            $queryParams['since'] = ObjectSerializer::toQueryValue($since);
        }
        // query params
        if ($tag !== null) {
            $queryParams['tag'] = ObjectSerializer::toQueryValue($tag);
        }
        // query params
        if ($to !== null) {
            $queryParams['to'] = ObjectSerializer::toQueryValue($to);
        }
        // query params
        if ($until !== null) {
            $queryParams['until'] = ObjectSerializer::toQueryValue($until);
        }
        // query params
        if ($words !== null) {
            $queryParams['words'] = ObjectSerializer::toQueryValue($words);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation searchUsingPOST
     *
     * Advanced Search
     *
     * @param  string $api_key api_key (required)
     * @param  string $words words (required)
     * @param  string $any Any of these words (Example: cats dogs �� contains either ��cats�� or ��dogs�� (or both)) (optional)
     * @param  string $cursor cursor (Example: AACCgACF91iNpzAJxAKAAMX3WI2nL-x4AgABAAAAA ) (optional)
     * @param  string $from From these accounts (Example: @Twitter �� sent from @Twitter) (optional)
     * @param  string $likes Minimum likes (Example: 280 �� Tweets with at least 280 likes)) (optional)
     * @param  string $mentioning Mentioning these accounts (Example: @SFBART @Caltrain �� mentions @SFBART or mentions @Caltrain) (optional)
     * @param  string $none None of these words (Example: cats dogs �� does not contain ��cats�� and does not contain ��dogs��) (optional)
     * @param  string $phrase This exact phrase (Example: happy hour �� contains the exact phrase ��happy hour��) (optional)
     * @param  string $replies Minimum replies (Example: 280 �� Tweets with at least 280 replies) (optional)
     * @param  string $retweets Minimum retweets (Example: 280 �� Tweets with at least 280 likes) (optional)
     * @param  string $since start time (Example: 2020-01-01 ) (optional)
     * @param  string $tag These hashtags (Example: #ThrowbackThursday �� contains the hashtag #ThrowbackThursday) (optional)
     * @param  string $to To these accounts (Example: @Twitter �� sent in reply to @Twitter) (optional)
     * @param  string $until end time (Example: 2021-02-02) (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ResultT
     */
    public function searchUsingPOST($api_key, $words, $any = null, $cursor = null, $from = null, $likes = null, $mentioning = null, $none = null, $phrase = null, $replies = null, $retweets = null, $since = null, $tag = null, $to = null, $until = null)
    {
        list($response) = $this->searchUsingPOSTWithHttpInfo($api_key, $words, $any, $cursor, $from, $likes, $mentioning, $none, $phrase, $replies, $retweets, $since, $tag, $to, $until);
        return $response;
    }

    /**
     * Operation searchUsingPOSTWithHttpInfo
     *
     * Advanced Search
     *
     * @param  string $api_key (required)
     * @param  string $words (required)
     * @param  string $any Any of these words (Example: cats dogs �� contains either ��cats�� or ��dogs�� (or both)) (optional)
     * @param  string $cursor cursor (Example: AACCgACF91iNpzAJxAKAAMX3WI2nL-x4AgABAAAAA ) (optional)
     * @param  string $from From these accounts (Example: @Twitter �� sent from @Twitter) (optional)
     * @param  string $likes Minimum likes (Example: 280 �� Tweets with at least 280 likes)) (optional)
     * @param  string $mentioning Mentioning these accounts (Example: @SFBART @Caltrain �� mentions @SFBART or mentions @Caltrain) (optional)
     * @param  string $none None of these words (Example: cats dogs �� does not contain ��cats�� and does not contain ��dogs��) (optional)
     * @param  string $phrase This exact phrase (Example: happy hour �� contains the exact phrase ��happy hour��) (optional)
     * @param  string $replies Minimum replies (Example: 280 �� Tweets with at least 280 replies) (optional)
     * @param  string $retweets Minimum retweets (Example: 280 �� Tweets with at least 280 likes) (optional)
     * @param  string $since start time (Example: 2020-01-01 ) (optional)
     * @param  string $tag These hashtags (Example: #ThrowbackThursday �� contains the hashtag #ThrowbackThursday) (optional)
     * @param  string $to To these accounts (Example: @Twitter �� sent in reply to @Twitter) (optional)
     * @param  string $until end time (Example: 2021-02-02) (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ResultT, HTTP status code, HTTP response headers (array of strings)
     */
    public function searchUsingPOSTWithHttpInfo($api_key, $words, $any = null, $cursor = null, $from = null, $likes = null, $mentioning = null, $none = null, $phrase = null, $replies = null, $retweets = null, $since = null, $tag = null, $to = null, $until = null)
    {
        $returnType = '\Swagger\Client\Model\ResultT';
        $request = $this->searchUsingPOSTRequest($api_key, $words, $any, $cursor, $from, $likes, $mentioning, $none, $phrase, $replies, $retweets, $since, $tag, $to, $until);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ResultT',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation searchUsingPOSTAsync
     *
     * Advanced Search
     *
     * @param  string $api_key (required)
     * @param  string $words (required)
     * @param  string $any Any of these words (Example: cats dogs �� contains either ��cats�� or ��dogs�� (or both)) (optional)
     * @param  string $cursor cursor (Example: AACCgACF91iNpzAJxAKAAMX3WI2nL-x4AgABAAAAA ) (optional)
     * @param  string $from From these accounts (Example: @Twitter �� sent from @Twitter) (optional)
     * @param  string $likes Minimum likes (Example: 280 �� Tweets with at least 280 likes)) (optional)
     * @param  string $mentioning Mentioning these accounts (Example: @SFBART @Caltrain �� mentions @SFBART or mentions @Caltrain) (optional)
     * @param  string $none None of these words (Example: cats dogs �� does not contain ��cats�� and does not contain ��dogs��) (optional)
     * @param  string $phrase This exact phrase (Example: happy hour �� contains the exact phrase ��happy hour��) (optional)
     * @param  string $replies Minimum replies (Example: 280 �� Tweets with at least 280 replies) (optional)
     * @param  string $retweets Minimum retweets (Example: 280 �� Tweets with at least 280 likes) (optional)
     * @param  string $since start time (Example: 2020-01-01 ) (optional)
     * @param  string $tag These hashtags (Example: #ThrowbackThursday �� contains the hashtag #ThrowbackThursday) (optional)
     * @param  string $to To these accounts (Example: @Twitter �� sent in reply to @Twitter) (optional)
     * @param  string $until end time (Example: 2021-02-02) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchUsingPOSTAsync($api_key, $words, $any = null, $cursor = null, $from = null, $likes = null, $mentioning = null, $none = null, $phrase = null, $replies = null, $retweets = null, $since = null, $tag = null, $to = null, $until = null)
    {
        return $this->searchUsingPOSTAsyncWithHttpInfo($api_key, $words, $any, $cursor, $from, $likes, $mentioning, $none, $phrase, $replies, $retweets, $since, $tag, $to, $until)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation searchUsingPOSTAsyncWithHttpInfo
     *
     * Advanced Search
     *
     * @param  string $api_key (required)
     * @param  string $words (required)
     * @param  string $any Any of these words (Example: cats dogs �� contains either ��cats�� or ��dogs�� (or both)) (optional)
     * @param  string $cursor cursor (Example: AACCgACF91iNpzAJxAKAAMX3WI2nL-x4AgABAAAAA ) (optional)
     * @param  string $from From these accounts (Example: @Twitter �� sent from @Twitter) (optional)
     * @param  string $likes Minimum likes (Example: 280 �� Tweets with at least 280 likes)) (optional)
     * @param  string $mentioning Mentioning these accounts (Example: @SFBART @Caltrain �� mentions @SFBART or mentions @Caltrain) (optional)
     * @param  string $none None of these words (Example: cats dogs �� does not contain ��cats�� and does not contain ��dogs��) (optional)
     * @param  string $phrase This exact phrase (Example: happy hour �� contains the exact phrase ��happy hour��) (optional)
     * @param  string $replies Minimum replies (Example: 280 �� Tweets with at least 280 replies) (optional)
     * @param  string $retweets Minimum retweets (Example: 280 �� Tweets with at least 280 likes) (optional)
     * @param  string $since start time (Example: 2020-01-01 ) (optional)
     * @param  string $tag These hashtags (Example: #ThrowbackThursday �� contains the hashtag #ThrowbackThursday) (optional)
     * @param  string $to To these accounts (Example: @Twitter �� sent in reply to @Twitter) (optional)
     * @param  string $until end time (Example: 2021-02-02) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchUsingPOSTAsyncWithHttpInfo($api_key, $words, $any = null, $cursor = null, $from = null, $likes = null, $mentioning = null, $none = null, $phrase = null, $replies = null, $retweets = null, $since = null, $tag = null, $to = null, $until = null)
    {
        $returnType = '\Swagger\Client\Model\ResultT';
        $request = $this->searchUsingPOSTRequest($api_key, $words, $any, $cursor, $from, $likes, $mentioning, $none, $phrase, $replies, $retweets, $since, $tag, $to, $until);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'searchUsingPOST'
     *
     * @param  string $api_key (required)
     * @param  string $words (required)
     * @param  string $any Any of these words (Example: cats dogs �� contains either ��cats�� or ��dogs�� (or both)) (optional)
     * @param  string $cursor cursor (Example: AACCgACF91iNpzAJxAKAAMX3WI2nL-x4AgABAAAAA ) (optional)
     * @param  string $from From these accounts (Example: @Twitter �� sent from @Twitter) (optional)
     * @param  string $likes Minimum likes (Example: 280 �� Tweets with at least 280 likes)) (optional)
     * @param  string $mentioning Mentioning these accounts (Example: @SFBART @Caltrain �� mentions @SFBART or mentions @Caltrain) (optional)
     * @param  string $none None of these words (Example: cats dogs �� does not contain ��cats�� and does not contain ��dogs��) (optional)
     * @param  string $phrase This exact phrase (Example: happy hour �� contains the exact phrase ��happy hour��) (optional)
     * @param  string $replies Minimum replies (Example: 280 �� Tweets with at least 280 replies) (optional)
     * @param  string $retweets Minimum retweets (Example: 280 �� Tweets with at least 280 likes) (optional)
     * @param  string $since start time (Example: 2020-01-01 ) (optional)
     * @param  string $tag These hashtags (Example: #ThrowbackThursday �� contains the hashtag #ThrowbackThursday) (optional)
     * @param  string $to To these accounts (Example: @Twitter �� sent in reply to @Twitter) (optional)
     * @param  string $until end time (Example: 2021-02-02) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function searchUsingPOSTRequest($api_key, $words, $any = null, $cursor = null, $from = null, $likes = null, $mentioning = null, $none = null, $phrase = null, $replies = null, $retweets = null, $since = null, $tag = null, $to = null, $until = null)
    {
        // verify the required parameter 'api_key' is set
        if ($api_key === null || (is_array($api_key) && count($api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_key when calling searchUsingPOST'
            );
        }
        // verify the required parameter 'words' is set
        if ($words === null || (is_array($words) && count($words) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $words when calling searchUsingPOST'
            );
        }

        $resourcePath = '/base/apitools/search';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($any !== null) {
            $queryParams['any'] = ObjectSerializer::toQueryValue($any);
        }
        // query params
        if ($api_key !== null) {
            $queryParams['apiKey'] = ObjectSerializer::toQueryValue($api_key);
        }
        // query params
        if ($cursor !== null) {
            $queryParams['cursor'] = ObjectSerializer::toQueryValue($cursor);
        }
        // query params
        if ($from !== null) {
            $queryParams['from'] = ObjectSerializer::toQueryValue($from);
        }
        // query params
        if ($likes !== null) {
            $queryParams['likes'] = ObjectSerializer::toQueryValue($likes);
        }
        // query params
        if ($mentioning !== null) {
            $queryParams['mentioning'] = ObjectSerializer::toQueryValue($mentioning);
        }
        // query params
        if ($none !== null) {
            $queryParams['none'] = ObjectSerializer::toQueryValue($none);
        }
        // query params
        if ($phrase !== null) {
            $queryParams['phrase'] = ObjectSerializer::toQueryValue($phrase);
        }
        // query params
        if ($replies !== null) {
            $queryParams['replies'] = ObjectSerializer::toQueryValue($replies);
        }
        // query params
        if ($retweets !== null) {
            $queryParams['retweets'] = ObjectSerializer::toQueryValue($retweets);
        }
        // query params
        if ($since !== null) {
            $queryParams['since'] = ObjectSerializer::toQueryValue($since);
        }
        // query params
        if ($tag !== null) {
            $queryParams['tag'] = ObjectSerializer::toQueryValue($tag);
        }
        // query params
        if ($to !== null) {
            $queryParams['to'] = ObjectSerializer::toQueryValue($to);
        }
        // query params
        if ($until !== null) {
            $queryParams['until'] = ObjectSerializer::toQueryValue($until);
        }
        // query params
        if ($words !== null) {
            $queryParams['words'] = ObjectSerializer::toQueryValue($words);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation trendsUsingGET
     *
     * trends Search
     *
     * @param  string $api_key api_key (required)
     * @param  string $id id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ResultT
     */
    public function trendsUsingGET($api_key, $id)
    {
        list($response) = $this->trendsUsingGETWithHttpInfo($api_key, $id);
        return $response;
    }

    /**
     * Operation trendsUsingGETWithHttpInfo
     *
     * trends Search
     *
     * @param  string $api_key (required)
     * @param  string $id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ResultT, HTTP status code, HTTP response headers (array of strings)
     */
    public function trendsUsingGETWithHttpInfo($api_key, $id)
    {
        $returnType = '\Swagger\Client\Model\ResultT';
        $request = $this->trendsUsingGETRequest($api_key, $id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ResultT',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation trendsUsingGETAsync
     *
     * trends Search
     *
     * @param  string $api_key (required)
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function trendsUsingGETAsync($api_key, $id)
    {
        return $this->trendsUsingGETAsyncWithHttpInfo($api_key, $id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation trendsUsingGETAsyncWithHttpInfo
     *
     * trends Search
     *
     * @param  string $api_key (required)
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function trendsUsingGETAsyncWithHttpInfo($api_key, $id)
    {
        $returnType = '\Swagger\Client\Model\ResultT';
        $request = $this->trendsUsingGETRequest($api_key, $id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'trendsUsingGET'
     *
     * @param  string $api_key (required)
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function trendsUsingGETRequest($api_key, $id)
    {
        // verify the required parameter 'api_key' is set
        if ($api_key === null || (is_array($api_key) && count($api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_key when calling trendsUsingGET'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling trendsUsingGET'
            );
        }

        $resourcePath = '/base/apitools/trends';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($api_key !== null) {
            $queryParams['apiKey'] = ObjectSerializer::toQueryValue($api_key);
        }
        // query params
        if ($id !== null) {
            $queryParams['id'] = ObjectSerializer::toQueryValue($id);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation trendsUsingPOST
     *
     * trends Search
     *
     * @param  string $api_key api_key (required)
     * @param  string $id id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ResultT
     */
    public function trendsUsingPOST($api_key, $id)
    {
        list($response) = $this->trendsUsingPOSTWithHttpInfo($api_key, $id);
        return $response;
    }

    /**
     * Operation trendsUsingPOSTWithHttpInfo
     *
     * trends Search
     *
     * @param  string $api_key (required)
     * @param  string $id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ResultT, HTTP status code, HTTP response headers (array of strings)
     */
    public function trendsUsingPOSTWithHttpInfo($api_key, $id)
    {
        $returnType = '\Swagger\Client\Model\ResultT';
        $request = $this->trendsUsingPOSTRequest($api_key, $id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ResultT',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation trendsUsingPOSTAsync
     *
     * trends Search
     *
     * @param  string $api_key (required)
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function trendsUsingPOSTAsync($api_key, $id)
    {
        return $this->trendsUsingPOSTAsyncWithHttpInfo($api_key, $id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation trendsUsingPOSTAsyncWithHttpInfo
     *
     * trends Search
     *
     * @param  string $api_key (required)
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function trendsUsingPOSTAsyncWithHttpInfo($api_key, $id)
    {
        $returnType = '\Swagger\Client\Model\ResultT';
        $request = $this->trendsUsingPOSTRequest($api_key, $id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'trendsUsingPOST'
     *
     * @param  string $api_key (required)
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function trendsUsingPOSTRequest($api_key, $id)
    {
        // verify the required parameter 'api_key' is set
        if ($api_key === null || (is_array($api_key) && count($api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_key when calling trendsUsingPOST'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling trendsUsingPOST'
            );
        }

        $resourcePath = '/base/apitools/trends';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($api_key !== null) {
            $queryParams['apiKey'] = ObjectSerializer::toQueryValue($api_key);
        }
        // query params
        if ($id !== null) {
            $queryParams['id'] = ObjectSerializer::toQueryValue($id);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
