<?php
/**
 * TwitterSendTweesApiToolsApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Utools_twitter_tools_api
 *
 * X (Twitter) API for search, Tweets, users, followers, images, media and more. Supports some v1.1 and v2 API endpoints, with more to come in the future!
 *
 * OpenAPI spec version: 1.1
 * Contact: huojiecs@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.37
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * TwitterSendTweesApiToolsApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TwitterSendTweesApiToolsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createRetweetUsingGET
     *
     * retweet a Tweet
     *
     * @param  string $api_key api_key (required)
     * @param  string $auth_token auth_token (required)
     * @param  string $ct0 ct0 (required)
     * @param  string $tweet_id tweet_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ResultT
     */
    public function createRetweetUsingGET($api_key, $auth_token, $ct0, $tweet_id)
    {
        list($response) = $this->createRetweetUsingGETWithHttpInfo($api_key, $auth_token, $ct0, $tweet_id);
        return $response;
    }

    /**
     * Operation createRetweetUsingGETWithHttpInfo
     *
     * retweet a Tweet
     *
     * @param  string $api_key (required)
     * @param  string $auth_token (required)
     * @param  string $ct0 (required)
     * @param  string $tweet_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ResultT, HTTP status code, HTTP response headers (array of strings)
     */
    public function createRetweetUsingGETWithHttpInfo($api_key, $auth_token, $ct0, $tweet_id)
    {
        $returnType = '\Swagger\Client\Model\ResultT';
        $request = $this->createRetweetUsingGETRequest($api_key, $auth_token, $ct0, $tweet_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ResultT',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createRetweetUsingGETAsync
     *
     * retweet a Tweet
     *
     * @param  string $api_key (required)
     * @param  string $auth_token (required)
     * @param  string $ct0 (required)
     * @param  string $tweet_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createRetweetUsingGETAsync($api_key, $auth_token, $ct0, $tweet_id)
    {
        return $this->createRetweetUsingGETAsyncWithHttpInfo($api_key, $auth_token, $ct0, $tweet_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createRetweetUsingGETAsyncWithHttpInfo
     *
     * retweet a Tweet
     *
     * @param  string $api_key (required)
     * @param  string $auth_token (required)
     * @param  string $ct0 (required)
     * @param  string $tweet_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createRetweetUsingGETAsyncWithHttpInfo($api_key, $auth_token, $ct0, $tweet_id)
    {
        $returnType = '\Swagger\Client\Model\ResultT';
        $request = $this->createRetweetUsingGETRequest($api_key, $auth_token, $ct0, $tweet_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createRetweetUsingGET'
     *
     * @param  string $api_key (required)
     * @param  string $auth_token (required)
     * @param  string $ct0 (required)
     * @param  string $tweet_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createRetweetUsingGETRequest($api_key, $auth_token, $ct0, $tweet_id)
    {
        // verify the required parameter 'api_key' is set
        if ($api_key === null || (is_array($api_key) && count($api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_key when calling createRetweetUsingGET'
            );
        }
        // verify the required parameter 'auth_token' is set
        if ($auth_token === null || (is_array($auth_token) && count($auth_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $auth_token when calling createRetweetUsingGET'
            );
        }
        // verify the required parameter 'ct0' is set
        if ($ct0 === null || (is_array($ct0) && count($ct0) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ct0 when calling createRetweetUsingGET'
            );
        }
        // verify the required parameter 'tweet_id' is set
        if ($tweet_id === null || (is_array($tweet_id) && count($tweet_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tweet_id when calling createRetweetUsingGET'
            );
        }

        $resourcePath = '/base/apitools/createRetweet';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($api_key !== null) {
            $queryParams['apiKey'] = ObjectSerializer::toQueryValue($api_key);
        }
        // query params
        if ($auth_token !== null) {
            $queryParams['auth_token'] = ObjectSerializer::toQueryValue($auth_token);
        }
        // query params
        if ($ct0 !== null) {
            $queryParams['ct0'] = ObjectSerializer::toQueryValue($ct0);
        }
        // query params
        if ($tweet_id !== null) {
            $queryParams['tweetId'] = ObjectSerializer::toQueryValue($tweet_id);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createRetweetUsingPOST
     *
     * retweet a Tweet
     *
     * @param  string $api_key api_key (required)
     * @param  string $auth_token auth_token (required)
     * @param  string $ct0 ct0 (required)
     * @param  string $tweet_id tweet_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ResultT
     */
    public function createRetweetUsingPOST($api_key, $auth_token, $ct0, $tweet_id)
    {
        list($response) = $this->createRetweetUsingPOSTWithHttpInfo($api_key, $auth_token, $ct0, $tweet_id);
        return $response;
    }

    /**
     * Operation createRetweetUsingPOSTWithHttpInfo
     *
     * retweet a Tweet
     *
     * @param  string $api_key (required)
     * @param  string $auth_token (required)
     * @param  string $ct0 (required)
     * @param  string $tweet_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ResultT, HTTP status code, HTTP response headers (array of strings)
     */
    public function createRetweetUsingPOSTWithHttpInfo($api_key, $auth_token, $ct0, $tweet_id)
    {
        $returnType = '\Swagger\Client\Model\ResultT';
        $request = $this->createRetweetUsingPOSTRequest($api_key, $auth_token, $ct0, $tweet_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ResultT',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createRetweetUsingPOSTAsync
     *
     * retweet a Tweet
     *
     * @param  string $api_key (required)
     * @param  string $auth_token (required)
     * @param  string $ct0 (required)
     * @param  string $tweet_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createRetweetUsingPOSTAsync($api_key, $auth_token, $ct0, $tweet_id)
    {
        return $this->createRetweetUsingPOSTAsyncWithHttpInfo($api_key, $auth_token, $ct0, $tweet_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createRetweetUsingPOSTAsyncWithHttpInfo
     *
     * retweet a Tweet
     *
     * @param  string $api_key (required)
     * @param  string $auth_token (required)
     * @param  string $ct0 (required)
     * @param  string $tweet_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createRetweetUsingPOSTAsyncWithHttpInfo($api_key, $auth_token, $ct0, $tweet_id)
    {
        $returnType = '\Swagger\Client\Model\ResultT';
        $request = $this->createRetweetUsingPOSTRequest($api_key, $auth_token, $ct0, $tweet_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createRetweetUsingPOST'
     *
     * @param  string $api_key (required)
     * @param  string $auth_token (required)
     * @param  string $ct0 (required)
     * @param  string $tweet_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createRetweetUsingPOSTRequest($api_key, $auth_token, $ct0, $tweet_id)
    {
        // verify the required parameter 'api_key' is set
        if ($api_key === null || (is_array($api_key) && count($api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_key when calling createRetweetUsingPOST'
            );
        }
        // verify the required parameter 'auth_token' is set
        if ($auth_token === null || (is_array($auth_token) && count($auth_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $auth_token when calling createRetweetUsingPOST'
            );
        }
        // verify the required parameter 'ct0' is set
        if ($ct0 === null || (is_array($ct0) && count($ct0) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ct0 when calling createRetweetUsingPOST'
            );
        }
        // verify the required parameter 'tweet_id' is set
        if ($tweet_id === null || (is_array($tweet_id) && count($tweet_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tweet_id when calling createRetweetUsingPOST'
            );
        }

        $resourcePath = '/base/apitools/createRetweet';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($api_key !== null) {
            $queryParams['apiKey'] = ObjectSerializer::toQueryValue($api_key);
        }
        // query params
        if ($auth_token !== null) {
            $queryParams['auth_token'] = ObjectSerializer::toQueryValue($auth_token);
        }
        // query params
        if ($ct0 !== null) {
            $queryParams['ct0'] = ObjectSerializer::toQueryValue($ct0);
        }
        // query params
        if ($tweet_id !== null) {
            $queryParams['tweetId'] = ObjectSerializer::toQueryValue($tweet_id);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createTweetUsingGET
     *
     * create a Tweet
     *
     * @param  string $api_key api_key (required)
     * @param  string $auth_token auth_token (required)
     * @param  string $ct0 ct0 (required)
     * @param  string $text text (required)
     * @param  string[] $medias medias ids (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ResultT
     */
    public function createTweetUsingGET($api_key, $auth_token, $ct0, $text, $medias = null)
    {
        list($response) = $this->createTweetUsingGETWithHttpInfo($api_key, $auth_token, $ct0, $text, $medias);
        return $response;
    }

    /**
     * Operation createTweetUsingGETWithHttpInfo
     *
     * create a Tweet
     *
     * @param  string $api_key (required)
     * @param  string $auth_token (required)
     * @param  string $ct0 (required)
     * @param  string $text (required)
     * @param  string[] $medias medias ids (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ResultT, HTTP status code, HTTP response headers (array of strings)
     */
    public function createTweetUsingGETWithHttpInfo($api_key, $auth_token, $ct0, $text, $medias = null)
    {
        $returnType = '\Swagger\Client\Model\ResultT';
        $request = $this->createTweetUsingGETRequest($api_key, $auth_token, $ct0, $text, $medias);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ResultT',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createTweetUsingGETAsync
     *
     * create a Tweet
     *
     * @param  string $api_key (required)
     * @param  string $auth_token (required)
     * @param  string $ct0 (required)
     * @param  string $text (required)
     * @param  string[] $medias medias ids (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createTweetUsingGETAsync($api_key, $auth_token, $ct0, $text, $medias = null)
    {
        return $this->createTweetUsingGETAsyncWithHttpInfo($api_key, $auth_token, $ct0, $text, $medias)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createTweetUsingGETAsyncWithHttpInfo
     *
     * create a Tweet
     *
     * @param  string $api_key (required)
     * @param  string $auth_token (required)
     * @param  string $ct0 (required)
     * @param  string $text (required)
     * @param  string[] $medias medias ids (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createTweetUsingGETAsyncWithHttpInfo($api_key, $auth_token, $ct0, $text, $medias = null)
    {
        $returnType = '\Swagger\Client\Model\ResultT';
        $request = $this->createTweetUsingGETRequest($api_key, $auth_token, $ct0, $text, $medias);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createTweetUsingGET'
     *
     * @param  string $api_key (required)
     * @param  string $auth_token (required)
     * @param  string $ct0 (required)
     * @param  string $text (required)
     * @param  string[] $medias medias ids (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createTweetUsingGETRequest($api_key, $auth_token, $ct0, $text, $medias = null)
    {
        // verify the required parameter 'api_key' is set
        if ($api_key === null || (is_array($api_key) && count($api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_key when calling createTweetUsingGET'
            );
        }
        // verify the required parameter 'auth_token' is set
        if ($auth_token === null || (is_array($auth_token) && count($auth_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $auth_token when calling createTweetUsingGET'
            );
        }
        // verify the required parameter 'ct0' is set
        if ($ct0 === null || (is_array($ct0) && count($ct0) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ct0 when calling createTweetUsingGET'
            );
        }
        // verify the required parameter 'text' is set
        if ($text === null || (is_array($text) && count($text) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $text when calling createTweetUsingGET'
            );
        }

        $resourcePath = '/base/apitools/createTweet';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($api_key !== null) {
            $queryParams['apiKey'] = ObjectSerializer::toQueryValue($api_key);
        }
        // query params
        if ($auth_token !== null) {
            $queryParams['auth_token'] = ObjectSerializer::toQueryValue($auth_token);
        }
        // query params
        if ($ct0 !== null) {
            $queryParams['ct0'] = ObjectSerializer::toQueryValue($ct0);
        }
        // query params
        if (is_array($medias)) {
            $queryParams['medias'] = $medias;
        } else
        if ($medias !== null) {
            $queryParams['medias'] = ObjectSerializer::toQueryValue($medias);
        }
        // query params
        if ($text !== null) {
            $queryParams['text'] = ObjectSerializer::toQueryValue($text);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createTweetUsingPOST
     *
     * create a Tweet
     *
     * @param  string $api_key api_key (required)
     * @param  string $auth_token auth_token (required)
     * @param  string $ct0 ct0 (required)
     * @param  string $text text (required)
     * @param  string[] $medias medias ids (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ResultT
     */
    public function createTweetUsingPOST($api_key, $auth_token, $ct0, $text, $medias = null)
    {
        list($response) = $this->createTweetUsingPOSTWithHttpInfo($api_key, $auth_token, $ct0, $text, $medias);
        return $response;
    }

    /**
     * Operation createTweetUsingPOSTWithHttpInfo
     *
     * create a Tweet
     *
     * @param  string $api_key (required)
     * @param  string $auth_token (required)
     * @param  string $ct0 (required)
     * @param  string $text (required)
     * @param  string[] $medias medias ids (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ResultT, HTTP status code, HTTP response headers (array of strings)
     */
    public function createTweetUsingPOSTWithHttpInfo($api_key, $auth_token, $ct0, $text, $medias = null)
    {
        $returnType = '\Swagger\Client\Model\ResultT';
        $request = $this->createTweetUsingPOSTRequest($api_key, $auth_token, $ct0, $text, $medias);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ResultT',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createTweetUsingPOSTAsync
     *
     * create a Tweet
     *
     * @param  string $api_key (required)
     * @param  string $auth_token (required)
     * @param  string $ct0 (required)
     * @param  string $text (required)
     * @param  string[] $medias medias ids (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createTweetUsingPOSTAsync($api_key, $auth_token, $ct0, $text, $medias = null)
    {
        return $this->createTweetUsingPOSTAsyncWithHttpInfo($api_key, $auth_token, $ct0, $text, $medias)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createTweetUsingPOSTAsyncWithHttpInfo
     *
     * create a Tweet
     *
     * @param  string $api_key (required)
     * @param  string $auth_token (required)
     * @param  string $ct0 (required)
     * @param  string $text (required)
     * @param  string[] $medias medias ids (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createTweetUsingPOSTAsyncWithHttpInfo($api_key, $auth_token, $ct0, $text, $medias = null)
    {
        $returnType = '\Swagger\Client\Model\ResultT';
        $request = $this->createTweetUsingPOSTRequest($api_key, $auth_token, $ct0, $text, $medias);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createTweetUsingPOST'
     *
     * @param  string $api_key (required)
     * @param  string $auth_token (required)
     * @param  string $ct0 (required)
     * @param  string $text (required)
     * @param  string[] $medias medias ids (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createTweetUsingPOSTRequest($api_key, $auth_token, $ct0, $text, $medias = null)
    {
        // verify the required parameter 'api_key' is set
        if ($api_key === null || (is_array($api_key) && count($api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_key when calling createTweetUsingPOST'
            );
        }
        // verify the required parameter 'auth_token' is set
        if ($auth_token === null || (is_array($auth_token) && count($auth_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $auth_token when calling createTweetUsingPOST'
            );
        }
        // verify the required parameter 'ct0' is set
        if ($ct0 === null || (is_array($ct0) && count($ct0) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ct0 when calling createTweetUsingPOST'
            );
        }
        // verify the required parameter 'text' is set
        if ($text === null || (is_array($text) && count($text) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $text when calling createTweetUsingPOST'
            );
        }

        $resourcePath = '/base/apitools/createTweet';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($api_key !== null) {
            $queryParams['apiKey'] = ObjectSerializer::toQueryValue($api_key);
        }
        // query params
        if ($auth_token !== null) {
            $queryParams['auth_token'] = ObjectSerializer::toQueryValue($auth_token);
        }
        // query params
        if ($ct0 !== null) {
            $queryParams['ct0'] = ObjectSerializer::toQueryValue($ct0);
        }
        // query params
        if (is_array($medias)) {
            $queryParams['medias'] = $medias;
        } else
        if ($medias !== null) {
            $queryParams['medias'] = ObjectSerializer::toQueryValue($medias);
        }
        // query params
        if ($text !== null) {
            $queryParams['text'] = ObjectSerializer::toQueryValue($text);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation likeTweetUsingGET
     *
     * like(favorites) Tweet
     *
     * @param  string $api_key api_key (required)
     * @param  string $auth_token auth_token (required)
     * @param  string $ct0 ct0 (required)
     * @param  string $id id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ResultT
     */
    public function likeTweetUsingGET($api_key, $auth_token, $ct0, $id)
    {
        list($response) = $this->likeTweetUsingGETWithHttpInfo($api_key, $auth_token, $ct0, $id);
        return $response;
    }

    /**
     * Operation likeTweetUsingGETWithHttpInfo
     *
     * like(favorites) Tweet
     *
     * @param  string $api_key (required)
     * @param  string $auth_token (required)
     * @param  string $ct0 (required)
     * @param  string $id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ResultT, HTTP status code, HTTP response headers (array of strings)
     */
    public function likeTweetUsingGETWithHttpInfo($api_key, $auth_token, $ct0, $id)
    {
        $returnType = '\Swagger\Client\Model\ResultT';
        $request = $this->likeTweetUsingGETRequest($api_key, $auth_token, $ct0, $id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ResultT',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation likeTweetUsingGETAsync
     *
     * like(favorites) Tweet
     *
     * @param  string $api_key (required)
     * @param  string $auth_token (required)
     * @param  string $ct0 (required)
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function likeTweetUsingGETAsync($api_key, $auth_token, $ct0, $id)
    {
        return $this->likeTweetUsingGETAsyncWithHttpInfo($api_key, $auth_token, $ct0, $id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation likeTweetUsingGETAsyncWithHttpInfo
     *
     * like(favorites) Tweet
     *
     * @param  string $api_key (required)
     * @param  string $auth_token (required)
     * @param  string $ct0 (required)
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function likeTweetUsingGETAsyncWithHttpInfo($api_key, $auth_token, $ct0, $id)
    {
        $returnType = '\Swagger\Client\Model\ResultT';
        $request = $this->likeTweetUsingGETRequest($api_key, $auth_token, $ct0, $id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'likeTweetUsingGET'
     *
     * @param  string $api_key (required)
     * @param  string $auth_token (required)
     * @param  string $ct0 (required)
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function likeTweetUsingGETRequest($api_key, $auth_token, $ct0, $id)
    {
        // verify the required parameter 'api_key' is set
        if ($api_key === null || (is_array($api_key) && count($api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_key when calling likeTweetUsingGET'
            );
        }
        // verify the required parameter 'auth_token' is set
        if ($auth_token === null || (is_array($auth_token) && count($auth_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $auth_token when calling likeTweetUsingGET'
            );
        }
        // verify the required parameter 'ct0' is set
        if ($ct0 === null || (is_array($ct0) && count($ct0) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ct0 when calling likeTweetUsingGET'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling likeTweetUsingGET'
            );
        }

        $resourcePath = '/base/apitools/likeTweet';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($api_key !== null) {
            $queryParams['apiKey'] = ObjectSerializer::toQueryValue($api_key);
        }
        // query params
        if ($auth_token !== null) {
            $queryParams['auth_token'] = ObjectSerializer::toQueryValue($auth_token);
        }
        // query params
        if ($ct0 !== null) {
            $queryParams['ct0'] = ObjectSerializer::toQueryValue($ct0);
        }
        // query params
        if ($id !== null) {
            $queryParams['id'] = ObjectSerializer::toQueryValue($id);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation likeTweetUsingPOST
     *
     * like(favorites) Tweet
     *
     * @param  string $api_key api_key (required)
     * @param  string $auth_token auth_token (required)
     * @param  string $ct0 ct0 (required)
     * @param  string $id id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ResultT
     */
    public function likeTweetUsingPOST($api_key, $auth_token, $ct0, $id)
    {
        list($response) = $this->likeTweetUsingPOSTWithHttpInfo($api_key, $auth_token, $ct0, $id);
        return $response;
    }

    /**
     * Operation likeTweetUsingPOSTWithHttpInfo
     *
     * like(favorites) Tweet
     *
     * @param  string $api_key (required)
     * @param  string $auth_token (required)
     * @param  string $ct0 (required)
     * @param  string $id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ResultT, HTTP status code, HTTP response headers (array of strings)
     */
    public function likeTweetUsingPOSTWithHttpInfo($api_key, $auth_token, $ct0, $id)
    {
        $returnType = '\Swagger\Client\Model\ResultT';
        $request = $this->likeTweetUsingPOSTRequest($api_key, $auth_token, $ct0, $id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ResultT',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation likeTweetUsingPOSTAsync
     *
     * like(favorites) Tweet
     *
     * @param  string $api_key (required)
     * @param  string $auth_token (required)
     * @param  string $ct0 (required)
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function likeTweetUsingPOSTAsync($api_key, $auth_token, $ct0, $id)
    {
        return $this->likeTweetUsingPOSTAsyncWithHttpInfo($api_key, $auth_token, $ct0, $id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation likeTweetUsingPOSTAsyncWithHttpInfo
     *
     * like(favorites) Tweet
     *
     * @param  string $api_key (required)
     * @param  string $auth_token (required)
     * @param  string $ct0 (required)
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function likeTweetUsingPOSTAsyncWithHttpInfo($api_key, $auth_token, $ct0, $id)
    {
        $returnType = '\Swagger\Client\Model\ResultT';
        $request = $this->likeTweetUsingPOSTRequest($api_key, $auth_token, $ct0, $id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'likeTweetUsingPOST'
     *
     * @param  string $api_key (required)
     * @param  string $auth_token (required)
     * @param  string $ct0 (required)
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function likeTweetUsingPOSTRequest($api_key, $auth_token, $ct0, $id)
    {
        // verify the required parameter 'api_key' is set
        if ($api_key === null || (is_array($api_key) && count($api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_key when calling likeTweetUsingPOST'
            );
        }
        // verify the required parameter 'auth_token' is set
        if ($auth_token === null || (is_array($auth_token) && count($auth_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $auth_token when calling likeTweetUsingPOST'
            );
        }
        // verify the required parameter 'ct0' is set
        if ($ct0 === null || (is_array($ct0) && count($ct0) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ct0 when calling likeTweetUsingPOST'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling likeTweetUsingPOST'
            );
        }

        $resourcePath = '/base/apitools/likeTweet';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($api_key !== null) {
            $queryParams['apiKey'] = ObjectSerializer::toQueryValue($api_key);
        }
        // query params
        if ($auth_token !== null) {
            $queryParams['auth_token'] = ObjectSerializer::toQueryValue($auth_token);
        }
        // query params
        if ($ct0 !== null) {
            $queryParams['ct0'] = ObjectSerializer::toQueryValue($ct0);
        }
        // query params
        if ($id !== null) {
            $queryParams['id'] = ObjectSerializer::toQueryValue($id);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation tweetReplyUsingGET
     *
     * reply to tweet
     *
     * @param  string $api_key api_key (required)
     * @param  string $auth_token auth_token (required)
     * @param  string $ct0 ct0 (required)
     * @param  string $text text (required)
     * @param  string $tweet_id tweet_id (required)
     * @param  string[] $medias medias ids (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ResultT
     */
    public function tweetReplyUsingGET($api_key, $auth_token, $ct0, $text, $tweet_id, $medias = null)
    {
        list($response) = $this->tweetReplyUsingGETWithHttpInfo($api_key, $auth_token, $ct0, $text, $tweet_id, $medias);
        return $response;
    }

    /**
     * Operation tweetReplyUsingGETWithHttpInfo
     *
     * reply to tweet
     *
     * @param  string $api_key (required)
     * @param  string $auth_token (required)
     * @param  string $ct0 (required)
     * @param  string $text (required)
     * @param  string $tweet_id (required)
     * @param  string[] $medias medias ids (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ResultT, HTTP status code, HTTP response headers (array of strings)
     */
    public function tweetReplyUsingGETWithHttpInfo($api_key, $auth_token, $ct0, $text, $tweet_id, $medias = null)
    {
        $returnType = '\Swagger\Client\Model\ResultT';
        $request = $this->tweetReplyUsingGETRequest($api_key, $auth_token, $ct0, $text, $tweet_id, $medias);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ResultT',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation tweetReplyUsingGETAsync
     *
     * reply to tweet
     *
     * @param  string $api_key (required)
     * @param  string $auth_token (required)
     * @param  string $ct0 (required)
     * @param  string $text (required)
     * @param  string $tweet_id (required)
     * @param  string[] $medias medias ids (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function tweetReplyUsingGETAsync($api_key, $auth_token, $ct0, $text, $tweet_id, $medias = null)
    {
        return $this->tweetReplyUsingGETAsyncWithHttpInfo($api_key, $auth_token, $ct0, $text, $tweet_id, $medias)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation tweetReplyUsingGETAsyncWithHttpInfo
     *
     * reply to tweet
     *
     * @param  string $api_key (required)
     * @param  string $auth_token (required)
     * @param  string $ct0 (required)
     * @param  string $text (required)
     * @param  string $tweet_id (required)
     * @param  string[] $medias medias ids (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function tweetReplyUsingGETAsyncWithHttpInfo($api_key, $auth_token, $ct0, $text, $tweet_id, $medias = null)
    {
        $returnType = '\Swagger\Client\Model\ResultT';
        $request = $this->tweetReplyUsingGETRequest($api_key, $auth_token, $ct0, $text, $tweet_id, $medias);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'tweetReplyUsingGET'
     *
     * @param  string $api_key (required)
     * @param  string $auth_token (required)
     * @param  string $ct0 (required)
     * @param  string $text (required)
     * @param  string $tweet_id (required)
     * @param  string[] $medias medias ids (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function tweetReplyUsingGETRequest($api_key, $auth_token, $ct0, $text, $tweet_id, $medias = null)
    {
        // verify the required parameter 'api_key' is set
        if ($api_key === null || (is_array($api_key) && count($api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_key when calling tweetReplyUsingGET'
            );
        }
        // verify the required parameter 'auth_token' is set
        if ($auth_token === null || (is_array($auth_token) && count($auth_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $auth_token when calling tweetReplyUsingGET'
            );
        }
        // verify the required parameter 'ct0' is set
        if ($ct0 === null || (is_array($ct0) && count($ct0) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ct0 when calling tweetReplyUsingGET'
            );
        }
        // verify the required parameter 'text' is set
        if ($text === null || (is_array($text) && count($text) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $text when calling tweetReplyUsingGET'
            );
        }
        // verify the required parameter 'tweet_id' is set
        if ($tweet_id === null || (is_array($tweet_id) && count($tweet_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tweet_id when calling tweetReplyUsingGET'
            );
        }

        $resourcePath = '/base/apitools/tweetReply';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($api_key !== null) {
            $queryParams['apiKey'] = ObjectSerializer::toQueryValue($api_key);
        }
        // query params
        if ($auth_token !== null) {
            $queryParams['auth_token'] = ObjectSerializer::toQueryValue($auth_token);
        }
        // query params
        if ($ct0 !== null) {
            $queryParams['ct0'] = ObjectSerializer::toQueryValue($ct0);
        }
        // query params
        if (is_array($medias)) {
            $queryParams['medias'] = $medias;
        } else
        if ($medias !== null) {
            $queryParams['medias'] = ObjectSerializer::toQueryValue($medias);
        }
        // query params
        if ($text !== null) {
            $queryParams['text'] = ObjectSerializer::toQueryValue($text);
        }
        // query params
        if ($tweet_id !== null) {
            $queryParams['tweetId'] = ObjectSerializer::toQueryValue($tweet_id);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation tweetReplyUsingPOST
     *
     * reply to tweet
     *
     * @param  string $api_key api_key (required)
     * @param  string $auth_token auth_token (required)
     * @param  string $ct0 ct0 (required)
     * @param  string $text text (required)
     * @param  string $tweet_id tweet_id (required)
     * @param  string[] $medias medias ids (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ResultT
     */
    public function tweetReplyUsingPOST($api_key, $auth_token, $ct0, $text, $tweet_id, $medias = null)
    {
        list($response) = $this->tweetReplyUsingPOSTWithHttpInfo($api_key, $auth_token, $ct0, $text, $tweet_id, $medias);
        return $response;
    }

    /**
     * Operation tweetReplyUsingPOSTWithHttpInfo
     *
     * reply to tweet
     *
     * @param  string $api_key (required)
     * @param  string $auth_token (required)
     * @param  string $ct0 (required)
     * @param  string $text (required)
     * @param  string $tweet_id (required)
     * @param  string[] $medias medias ids (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ResultT, HTTP status code, HTTP response headers (array of strings)
     */
    public function tweetReplyUsingPOSTWithHttpInfo($api_key, $auth_token, $ct0, $text, $tweet_id, $medias = null)
    {
        $returnType = '\Swagger\Client\Model\ResultT';
        $request = $this->tweetReplyUsingPOSTRequest($api_key, $auth_token, $ct0, $text, $tweet_id, $medias);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ResultT',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation tweetReplyUsingPOSTAsync
     *
     * reply to tweet
     *
     * @param  string $api_key (required)
     * @param  string $auth_token (required)
     * @param  string $ct0 (required)
     * @param  string $text (required)
     * @param  string $tweet_id (required)
     * @param  string[] $medias medias ids (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function tweetReplyUsingPOSTAsync($api_key, $auth_token, $ct0, $text, $tweet_id, $medias = null)
    {
        return $this->tweetReplyUsingPOSTAsyncWithHttpInfo($api_key, $auth_token, $ct0, $text, $tweet_id, $medias)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation tweetReplyUsingPOSTAsyncWithHttpInfo
     *
     * reply to tweet
     *
     * @param  string $api_key (required)
     * @param  string $auth_token (required)
     * @param  string $ct0 (required)
     * @param  string $text (required)
     * @param  string $tweet_id (required)
     * @param  string[] $medias medias ids (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function tweetReplyUsingPOSTAsyncWithHttpInfo($api_key, $auth_token, $ct0, $text, $tweet_id, $medias = null)
    {
        $returnType = '\Swagger\Client\Model\ResultT';
        $request = $this->tweetReplyUsingPOSTRequest($api_key, $auth_token, $ct0, $text, $tweet_id, $medias);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'tweetReplyUsingPOST'
     *
     * @param  string $api_key (required)
     * @param  string $auth_token (required)
     * @param  string $ct0 (required)
     * @param  string $text (required)
     * @param  string $tweet_id (required)
     * @param  string[] $medias medias ids (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function tweetReplyUsingPOSTRequest($api_key, $auth_token, $ct0, $text, $tweet_id, $medias = null)
    {
        // verify the required parameter 'api_key' is set
        if ($api_key === null || (is_array($api_key) && count($api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_key when calling tweetReplyUsingPOST'
            );
        }
        // verify the required parameter 'auth_token' is set
        if ($auth_token === null || (is_array($auth_token) && count($auth_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $auth_token when calling tweetReplyUsingPOST'
            );
        }
        // verify the required parameter 'ct0' is set
        if ($ct0 === null || (is_array($ct0) && count($ct0) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ct0 when calling tweetReplyUsingPOST'
            );
        }
        // verify the required parameter 'text' is set
        if ($text === null || (is_array($text) && count($text) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $text when calling tweetReplyUsingPOST'
            );
        }
        // verify the required parameter 'tweet_id' is set
        if ($tweet_id === null || (is_array($tweet_id) && count($tweet_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tweet_id when calling tweetReplyUsingPOST'
            );
        }

        $resourcePath = '/base/apitools/tweetReply';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($api_key !== null) {
            $queryParams['apiKey'] = ObjectSerializer::toQueryValue($api_key);
        }
        // query params
        if ($auth_token !== null) {
            $queryParams['auth_token'] = ObjectSerializer::toQueryValue($auth_token);
        }
        // query params
        if ($ct0 !== null) {
            $queryParams['ct0'] = ObjectSerializer::toQueryValue($ct0);
        }
        // query params
        if (is_array($medias)) {
            $queryParams['medias'] = $medias;
        } else
        if ($medias !== null) {
            $queryParams['medias'] = ObjectSerializer::toQueryValue($medias);
        }
        // query params
        if ($text !== null) {
            $queryParams['text'] = ObjectSerializer::toQueryValue($text);
        }
        // query params
        if ($tweet_id !== null) {
            $queryParams['tweetId'] = ObjectSerializer::toQueryValue($tweet_id);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation unlikeTweetUsingGET
     *
     * unlike(unfavorites) Tweet
     *
     * @param  string $api_key api_key (required)
     * @param  string $auth_token auth_token (required)
     * @param  string $ct0 ct0 (required)
     * @param  string $id id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ResultT
     */
    public function unlikeTweetUsingGET($api_key, $auth_token, $ct0, $id)
    {
        list($response) = $this->unlikeTweetUsingGETWithHttpInfo($api_key, $auth_token, $ct0, $id);
        return $response;
    }

    /**
     * Operation unlikeTweetUsingGETWithHttpInfo
     *
     * unlike(unfavorites) Tweet
     *
     * @param  string $api_key (required)
     * @param  string $auth_token (required)
     * @param  string $ct0 (required)
     * @param  string $id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ResultT, HTTP status code, HTTP response headers (array of strings)
     */
    public function unlikeTweetUsingGETWithHttpInfo($api_key, $auth_token, $ct0, $id)
    {
        $returnType = '\Swagger\Client\Model\ResultT';
        $request = $this->unlikeTweetUsingGETRequest($api_key, $auth_token, $ct0, $id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ResultT',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation unlikeTweetUsingGETAsync
     *
     * unlike(unfavorites) Tweet
     *
     * @param  string $api_key (required)
     * @param  string $auth_token (required)
     * @param  string $ct0 (required)
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function unlikeTweetUsingGETAsync($api_key, $auth_token, $ct0, $id)
    {
        return $this->unlikeTweetUsingGETAsyncWithHttpInfo($api_key, $auth_token, $ct0, $id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation unlikeTweetUsingGETAsyncWithHttpInfo
     *
     * unlike(unfavorites) Tweet
     *
     * @param  string $api_key (required)
     * @param  string $auth_token (required)
     * @param  string $ct0 (required)
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function unlikeTweetUsingGETAsyncWithHttpInfo($api_key, $auth_token, $ct0, $id)
    {
        $returnType = '\Swagger\Client\Model\ResultT';
        $request = $this->unlikeTweetUsingGETRequest($api_key, $auth_token, $ct0, $id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'unlikeTweetUsingGET'
     *
     * @param  string $api_key (required)
     * @param  string $auth_token (required)
     * @param  string $ct0 (required)
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function unlikeTweetUsingGETRequest($api_key, $auth_token, $ct0, $id)
    {
        // verify the required parameter 'api_key' is set
        if ($api_key === null || (is_array($api_key) && count($api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_key when calling unlikeTweetUsingGET'
            );
        }
        // verify the required parameter 'auth_token' is set
        if ($auth_token === null || (is_array($auth_token) && count($auth_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $auth_token when calling unlikeTweetUsingGET'
            );
        }
        // verify the required parameter 'ct0' is set
        if ($ct0 === null || (is_array($ct0) && count($ct0) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ct0 when calling unlikeTweetUsingGET'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling unlikeTweetUsingGET'
            );
        }

        $resourcePath = '/base/apitools/unlikeTweet';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($api_key !== null) {
            $queryParams['apiKey'] = ObjectSerializer::toQueryValue($api_key);
        }
        // query params
        if ($auth_token !== null) {
            $queryParams['auth_token'] = ObjectSerializer::toQueryValue($auth_token);
        }
        // query params
        if ($ct0 !== null) {
            $queryParams['ct0'] = ObjectSerializer::toQueryValue($ct0);
        }
        // query params
        if ($id !== null) {
            $queryParams['id'] = ObjectSerializer::toQueryValue($id);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation unlikeTweetUsingPOST
     *
     * unlike(unfavorites) Tweet
     *
     * @param  string $api_key api_key (required)
     * @param  string $auth_token auth_token (required)
     * @param  string $ct0 ct0 (required)
     * @param  string $id id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ResultT
     */
    public function unlikeTweetUsingPOST($api_key, $auth_token, $ct0, $id)
    {
        list($response) = $this->unlikeTweetUsingPOSTWithHttpInfo($api_key, $auth_token, $ct0, $id);
        return $response;
    }

    /**
     * Operation unlikeTweetUsingPOSTWithHttpInfo
     *
     * unlike(unfavorites) Tweet
     *
     * @param  string $api_key (required)
     * @param  string $auth_token (required)
     * @param  string $ct0 (required)
     * @param  string $id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ResultT, HTTP status code, HTTP response headers (array of strings)
     */
    public function unlikeTweetUsingPOSTWithHttpInfo($api_key, $auth_token, $ct0, $id)
    {
        $returnType = '\Swagger\Client\Model\ResultT';
        $request = $this->unlikeTweetUsingPOSTRequest($api_key, $auth_token, $ct0, $id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ResultT',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation unlikeTweetUsingPOSTAsync
     *
     * unlike(unfavorites) Tweet
     *
     * @param  string $api_key (required)
     * @param  string $auth_token (required)
     * @param  string $ct0 (required)
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function unlikeTweetUsingPOSTAsync($api_key, $auth_token, $ct0, $id)
    {
        return $this->unlikeTweetUsingPOSTAsyncWithHttpInfo($api_key, $auth_token, $ct0, $id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation unlikeTweetUsingPOSTAsyncWithHttpInfo
     *
     * unlike(unfavorites) Tweet
     *
     * @param  string $api_key (required)
     * @param  string $auth_token (required)
     * @param  string $ct0 (required)
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function unlikeTweetUsingPOSTAsyncWithHttpInfo($api_key, $auth_token, $ct0, $id)
    {
        $returnType = '\Swagger\Client\Model\ResultT';
        $request = $this->unlikeTweetUsingPOSTRequest($api_key, $auth_token, $ct0, $id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'unlikeTweetUsingPOST'
     *
     * @param  string $api_key (required)
     * @param  string $auth_token (required)
     * @param  string $ct0 (required)
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function unlikeTweetUsingPOSTRequest($api_key, $auth_token, $ct0, $id)
    {
        // verify the required parameter 'api_key' is set
        if ($api_key === null || (is_array($api_key) && count($api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_key when calling unlikeTweetUsingPOST'
            );
        }
        // verify the required parameter 'auth_token' is set
        if ($auth_token === null || (is_array($auth_token) && count($auth_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $auth_token when calling unlikeTweetUsingPOST'
            );
        }
        // verify the required parameter 'ct0' is set
        if ($ct0 === null || (is_array($ct0) && count($ct0) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ct0 when calling unlikeTweetUsingPOST'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling unlikeTweetUsingPOST'
            );
        }

        $resourcePath = '/base/apitools/unlikeTweet';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($api_key !== null) {
            $queryParams['apiKey'] = ObjectSerializer::toQueryValue($api_key);
        }
        // query params
        if ($auth_token !== null) {
            $queryParams['auth_token'] = ObjectSerializer::toQueryValue($auth_token);
        }
        // query params
        if ($ct0 !== null) {
            $queryParams['ct0'] = ObjectSerializer::toQueryValue($ct0);
        }
        // query params
        if ($id !== null) {
            $queryParams['id'] = ObjectSerializer::toQueryValue($id);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation uploadMediaUsingGET
     *
     * upload media (gif)
     *
     * @param  string $api_key api_key (required)
     * @param  string $auth_token auth_token (required)
     * @param  string $ct0 ct0 (required)
     * @param  string $media_url media_url (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ResultT
     */
    public function uploadMediaUsingGET($api_key, $auth_token, $ct0, $media_url)
    {
        list($response) = $this->uploadMediaUsingGETWithHttpInfo($api_key, $auth_token, $ct0, $media_url);
        return $response;
    }

    /**
     * Operation uploadMediaUsingGETWithHttpInfo
     *
     * upload media (gif)
     *
     * @param  string $api_key (required)
     * @param  string $auth_token (required)
     * @param  string $ct0 (required)
     * @param  string $media_url (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ResultT, HTTP status code, HTTP response headers (array of strings)
     */
    public function uploadMediaUsingGETWithHttpInfo($api_key, $auth_token, $ct0, $media_url)
    {
        $returnType = '\Swagger\Client\Model\ResultT';
        $request = $this->uploadMediaUsingGETRequest($api_key, $auth_token, $ct0, $media_url);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ResultT',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation uploadMediaUsingGETAsync
     *
     * upload media (gif)
     *
     * @param  string $api_key (required)
     * @param  string $auth_token (required)
     * @param  string $ct0 (required)
     * @param  string $media_url (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function uploadMediaUsingGETAsync($api_key, $auth_token, $ct0, $media_url)
    {
        return $this->uploadMediaUsingGETAsyncWithHttpInfo($api_key, $auth_token, $ct0, $media_url)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation uploadMediaUsingGETAsyncWithHttpInfo
     *
     * upload media (gif)
     *
     * @param  string $api_key (required)
     * @param  string $auth_token (required)
     * @param  string $ct0 (required)
     * @param  string $media_url (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function uploadMediaUsingGETAsyncWithHttpInfo($api_key, $auth_token, $ct0, $media_url)
    {
        $returnType = '\Swagger\Client\Model\ResultT';
        $request = $this->uploadMediaUsingGETRequest($api_key, $auth_token, $ct0, $media_url);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'uploadMediaUsingGET'
     *
     * @param  string $api_key (required)
     * @param  string $auth_token (required)
     * @param  string $ct0 (required)
     * @param  string $media_url (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function uploadMediaUsingGETRequest($api_key, $auth_token, $ct0, $media_url)
    {
        // verify the required parameter 'api_key' is set
        if ($api_key === null || (is_array($api_key) && count($api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_key when calling uploadMediaUsingGET'
            );
        }
        // verify the required parameter 'auth_token' is set
        if ($auth_token === null || (is_array($auth_token) && count($auth_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $auth_token when calling uploadMediaUsingGET'
            );
        }
        // verify the required parameter 'ct0' is set
        if ($ct0 === null || (is_array($ct0) && count($ct0) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ct0 when calling uploadMediaUsingGET'
            );
        }
        // verify the required parameter 'media_url' is set
        if ($media_url === null || (is_array($media_url) && count($media_url) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $media_url when calling uploadMediaUsingGET'
            );
        }

        $resourcePath = '/base/apitools/uploadMedia';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($api_key !== null) {
            $queryParams['apiKey'] = ObjectSerializer::toQueryValue($api_key);
        }
        // query params
        if ($auth_token !== null) {
            $queryParams['auth_token'] = ObjectSerializer::toQueryValue($auth_token);
        }
        // query params
        if ($ct0 !== null) {
            $queryParams['ct0'] = ObjectSerializer::toQueryValue($ct0);
        }
        // query params
        if ($media_url !== null) {
            $queryParams['media_url'] = ObjectSerializer::toQueryValue($media_url);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation uploadMediaUsingPOST
     *
     * upload media (gif)
     *
     * @param  string $api_key api_key (required)
     * @param  string $auth_token auth_token (required)
     * @param  string $ct0 ct0 (required)
     * @param  string $media_url media_url (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ResultT
     */
    public function uploadMediaUsingPOST($api_key, $auth_token, $ct0, $media_url)
    {
        list($response) = $this->uploadMediaUsingPOSTWithHttpInfo($api_key, $auth_token, $ct0, $media_url);
        return $response;
    }

    /**
     * Operation uploadMediaUsingPOSTWithHttpInfo
     *
     * upload media (gif)
     *
     * @param  string $api_key (required)
     * @param  string $auth_token (required)
     * @param  string $ct0 (required)
     * @param  string $media_url (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ResultT, HTTP status code, HTTP response headers (array of strings)
     */
    public function uploadMediaUsingPOSTWithHttpInfo($api_key, $auth_token, $ct0, $media_url)
    {
        $returnType = '\Swagger\Client\Model\ResultT';
        $request = $this->uploadMediaUsingPOSTRequest($api_key, $auth_token, $ct0, $media_url);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ResultT',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation uploadMediaUsingPOSTAsync
     *
     * upload media (gif)
     *
     * @param  string $api_key (required)
     * @param  string $auth_token (required)
     * @param  string $ct0 (required)
     * @param  string $media_url (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function uploadMediaUsingPOSTAsync($api_key, $auth_token, $ct0, $media_url)
    {
        return $this->uploadMediaUsingPOSTAsyncWithHttpInfo($api_key, $auth_token, $ct0, $media_url)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation uploadMediaUsingPOSTAsyncWithHttpInfo
     *
     * upload media (gif)
     *
     * @param  string $api_key (required)
     * @param  string $auth_token (required)
     * @param  string $ct0 (required)
     * @param  string $media_url (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function uploadMediaUsingPOSTAsyncWithHttpInfo($api_key, $auth_token, $ct0, $media_url)
    {
        $returnType = '\Swagger\Client\Model\ResultT';
        $request = $this->uploadMediaUsingPOSTRequest($api_key, $auth_token, $ct0, $media_url);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'uploadMediaUsingPOST'
     *
     * @param  string $api_key (required)
     * @param  string $auth_token (required)
     * @param  string $ct0 (required)
     * @param  string $media_url (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function uploadMediaUsingPOSTRequest($api_key, $auth_token, $ct0, $media_url)
    {
        // verify the required parameter 'api_key' is set
        if ($api_key === null || (is_array($api_key) && count($api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_key when calling uploadMediaUsingPOST'
            );
        }
        // verify the required parameter 'auth_token' is set
        if ($auth_token === null || (is_array($auth_token) && count($auth_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $auth_token when calling uploadMediaUsingPOST'
            );
        }
        // verify the required parameter 'ct0' is set
        if ($ct0 === null || (is_array($ct0) && count($ct0) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ct0 when calling uploadMediaUsingPOST'
            );
        }
        // verify the required parameter 'media_url' is set
        if ($media_url === null || (is_array($media_url) && count($media_url) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $media_url when calling uploadMediaUsingPOST'
            );
        }

        $resourcePath = '/base/apitools/uploadMedia';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($api_key !== null) {
            $queryParams['apiKey'] = ObjectSerializer::toQueryValue($api_key);
        }
        // query params
        if ($auth_token !== null) {
            $queryParams['auth_token'] = ObjectSerializer::toQueryValue($auth_token);
        }
        // query params
        if ($ct0 !== null) {
            $queryParams['ct0'] = ObjectSerializer::toQueryValue($ct0);
        }
        // query params
        if ($media_url !== null) {
            $queryParams['media_url'] = ObjectSerializer::toQueryValue($media_url);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
