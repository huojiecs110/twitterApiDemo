<?php
/**
 * TwitterDMSApiToolsApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Utools_twitter_tools_api
 *
 * X (Twitter) API for search, Tweets, users, followers, images, media and more. Supports some v1.1 and v2 API endpoints, with more to come in the future!
 *
 * OpenAPI spec version: 1.1
 * Contact: huojiecs@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.37
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * TwitterDMSApiToolsApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TwitterDMSApiToolsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation getDMSListV2UsingGET
     *
     * get DMS List
     *
     * @param  string $api_key api_key (required)
     * @param  string $auth_token auth_token (required)
     * @param  string $ct0 ct0 (required)
     * @param  string $cursor cursor (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ResultT
     */
    public function getDMSListV2UsingGET($api_key, $auth_token, $ct0, $cursor)
    {
        list($response) = $this->getDMSListV2UsingGETWithHttpInfo($api_key, $auth_token, $ct0, $cursor);
        return $response;
    }

    /**
     * Operation getDMSListV2UsingGETWithHttpInfo
     *
     * get DMS List
     *
     * @param  string $api_key (required)
     * @param  string $auth_token (required)
     * @param  string $ct0 (required)
     * @param  string $cursor (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ResultT, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDMSListV2UsingGETWithHttpInfo($api_key, $auth_token, $ct0, $cursor)
    {
        $returnType = '\Swagger\Client\Model\ResultT';
        $request = $this->getDMSListV2UsingGETRequest($api_key, $auth_token, $ct0, $cursor);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ResultT',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getDMSListV2UsingGETAsync
     *
     * get DMS List
     *
     * @param  string $api_key (required)
     * @param  string $auth_token (required)
     * @param  string $ct0 (required)
     * @param  string $cursor (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDMSListV2UsingGETAsync($api_key, $auth_token, $ct0, $cursor)
    {
        return $this->getDMSListV2UsingGETAsyncWithHttpInfo($api_key, $auth_token, $ct0, $cursor)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDMSListV2UsingGETAsyncWithHttpInfo
     *
     * get DMS List
     *
     * @param  string $api_key (required)
     * @param  string $auth_token (required)
     * @param  string $ct0 (required)
     * @param  string $cursor (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDMSListV2UsingGETAsyncWithHttpInfo($api_key, $auth_token, $ct0, $cursor)
    {
        $returnType = '\Swagger\Client\Model\ResultT';
        $request = $this->getDMSListV2UsingGETRequest($api_key, $auth_token, $ct0, $cursor);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDMSListV2UsingGET'
     *
     * @param  string $api_key (required)
     * @param  string $auth_token (required)
     * @param  string $ct0 (required)
     * @param  string $cursor (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getDMSListV2UsingGETRequest($api_key, $auth_token, $ct0, $cursor)
    {
        // verify the required parameter 'api_key' is set
        if ($api_key === null || (is_array($api_key) && count($api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_key when calling getDMSListV2UsingGET'
            );
        }
        // verify the required parameter 'auth_token' is set
        if ($auth_token === null || (is_array($auth_token) && count($auth_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $auth_token when calling getDMSListV2UsingGET'
            );
        }
        // verify the required parameter 'ct0' is set
        if ($ct0 === null || (is_array($ct0) && count($ct0) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ct0 when calling getDMSListV2UsingGET'
            );
        }
        // verify the required parameter 'cursor' is set
        if ($cursor === null || (is_array($cursor) && count($cursor) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cursor when calling getDMSListV2UsingGET'
            );
        }

        $resourcePath = '/base/apitools/getDMSListV2';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($api_key !== null) {
            $queryParams['apiKey'] = ObjectSerializer::toQueryValue($api_key);
        }
        // query params
        if ($auth_token !== null) {
            $queryParams['auth_token'] = ObjectSerializer::toQueryValue($auth_token);
        }
        // query params
        if ($ct0 !== null) {
            $queryParams['ct0'] = ObjectSerializer::toQueryValue($ct0);
        }
        // query params
        if ($cursor !== null) {
            $queryParams['cursor'] = ObjectSerializer::toQueryValue($cursor);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getDMSListV2UsingPOST
     *
     * get DMS List
     *
     * @param  string $api_key api_key (required)
     * @param  string $auth_token auth_token (required)
     * @param  string $ct0 ct0 (required)
     * @param  string $cursor cursor (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ResultT
     */
    public function getDMSListV2UsingPOST($api_key, $auth_token, $ct0, $cursor)
    {
        list($response) = $this->getDMSListV2UsingPOSTWithHttpInfo($api_key, $auth_token, $ct0, $cursor);
        return $response;
    }

    /**
     * Operation getDMSListV2UsingPOSTWithHttpInfo
     *
     * get DMS List
     *
     * @param  string $api_key (required)
     * @param  string $auth_token (required)
     * @param  string $ct0 (required)
     * @param  string $cursor (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ResultT, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDMSListV2UsingPOSTWithHttpInfo($api_key, $auth_token, $ct0, $cursor)
    {
        $returnType = '\Swagger\Client\Model\ResultT';
        $request = $this->getDMSListV2UsingPOSTRequest($api_key, $auth_token, $ct0, $cursor);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ResultT',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getDMSListV2UsingPOSTAsync
     *
     * get DMS List
     *
     * @param  string $api_key (required)
     * @param  string $auth_token (required)
     * @param  string $ct0 (required)
     * @param  string $cursor (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDMSListV2UsingPOSTAsync($api_key, $auth_token, $ct0, $cursor)
    {
        return $this->getDMSListV2UsingPOSTAsyncWithHttpInfo($api_key, $auth_token, $ct0, $cursor)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDMSListV2UsingPOSTAsyncWithHttpInfo
     *
     * get DMS List
     *
     * @param  string $api_key (required)
     * @param  string $auth_token (required)
     * @param  string $ct0 (required)
     * @param  string $cursor (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDMSListV2UsingPOSTAsyncWithHttpInfo($api_key, $auth_token, $ct0, $cursor)
    {
        $returnType = '\Swagger\Client\Model\ResultT';
        $request = $this->getDMSListV2UsingPOSTRequest($api_key, $auth_token, $ct0, $cursor);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDMSListV2UsingPOST'
     *
     * @param  string $api_key (required)
     * @param  string $auth_token (required)
     * @param  string $ct0 (required)
     * @param  string $cursor (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getDMSListV2UsingPOSTRequest($api_key, $auth_token, $ct0, $cursor)
    {
        // verify the required parameter 'api_key' is set
        if ($api_key === null || (is_array($api_key) && count($api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_key when calling getDMSListV2UsingPOST'
            );
        }
        // verify the required parameter 'auth_token' is set
        if ($auth_token === null || (is_array($auth_token) && count($auth_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $auth_token when calling getDMSListV2UsingPOST'
            );
        }
        // verify the required parameter 'ct0' is set
        if ($ct0 === null || (is_array($ct0) && count($ct0) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ct0 when calling getDMSListV2UsingPOST'
            );
        }
        // verify the required parameter 'cursor' is set
        if ($cursor === null || (is_array($cursor) && count($cursor) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cursor when calling getDMSListV2UsingPOST'
            );
        }

        $resourcePath = '/base/apitools/getDMSListV2';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($api_key !== null) {
            $queryParams['apiKey'] = ObjectSerializer::toQueryValue($api_key);
        }
        // query params
        if ($auth_token !== null) {
            $queryParams['auth_token'] = ObjectSerializer::toQueryValue($auth_token);
        }
        // query params
        if ($ct0 !== null) {
            $queryParams['ct0'] = ObjectSerializer::toQueryValue($ct0);
        }
        // query params
        if ($cursor !== null) {
            $queryParams['cursor'] = ObjectSerializer::toQueryValue($cursor);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getDMSUsingGET
     *
     * receiving events
     *
     * @param  string $api_key api_key (required)
     * @param  string $auth_token auth_token (required)
     * @param  string $ct0 ct0 (required)
     * @param  string $id id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ResultT
     */
    public function getDMSUsingGET($api_key, $auth_token, $ct0, $id)
    {
        list($response) = $this->getDMSUsingGETWithHttpInfo($api_key, $auth_token, $ct0, $id);
        return $response;
    }

    /**
     * Operation getDMSUsingGETWithHttpInfo
     *
     * receiving events
     *
     * @param  string $api_key (required)
     * @param  string $auth_token (required)
     * @param  string $ct0 (required)
     * @param  string $id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ResultT, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDMSUsingGETWithHttpInfo($api_key, $auth_token, $ct0, $id)
    {
        $returnType = '\Swagger\Client\Model\ResultT';
        $request = $this->getDMSUsingGETRequest($api_key, $auth_token, $ct0, $id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ResultT',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getDMSUsingGETAsync
     *
     * receiving events
     *
     * @param  string $api_key (required)
     * @param  string $auth_token (required)
     * @param  string $ct0 (required)
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDMSUsingGETAsync($api_key, $auth_token, $ct0, $id)
    {
        return $this->getDMSUsingGETAsyncWithHttpInfo($api_key, $auth_token, $ct0, $id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDMSUsingGETAsyncWithHttpInfo
     *
     * receiving events
     *
     * @param  string $api_key (required)
     * @param  string $auth_token (required)
     * @param  string $ct0 (required)
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDMSUsingGETAsyncWithHttpInfo($api_key, $auth_token, $ct0, $id)
    {
        $returnType = '\Swagger\Client\Model\ResultT';
        $request = $this->getDMSUsingGETRequest($api_key, $auth_token, $ct0, $id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDMSUsingGET'
     *
     * @param  string $api_key (required)
     * @param  string $auth_token (required)
     * @param  string $ct0 (required)
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getDMSUsingGETRequest($api_key, $auth_token, $ct0, $id)
    {
        // verify the required parameter 'api_key' is set
        if ($api_key === null || (is_array($api_key) && count($api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_key when calling getDMSUsingGET'
            );
        }
        // verify the required parameter 'auth_token' is set
        if ($auth_token === null || (is_array($auth_token) && count($auth_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $auth_token when calling getDMSUsingGET'
            );
        }
        // verify the required parameter 'ct0' is set
        if ($ct0 === null || (is_array($ct0) && count($ct0) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ct0 when calling getDMSUsingGET'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getDMSUsingGET'
            );
        }

        $resourcePath = '/base/apitools/getDMS';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($api_key !== null) {
            $queryParams['apiKey'] = ObjectSerializer::toQueryValue($api_key);
        }
        // query params
        if ($auth_token !== null) {
            $queryParams['auth_token'] = ObjectSerializer::toQueryValue($auth_token);
        }
        // query params
        if ($ct0 !== null) {
            $queryParams['ct0'] = ObjectSerializer::toQueryValue($ct0);
        }
        // query params
        if ($id !== null) {
            $queryParams['id'] = ObjectSerializer::toQueryValue($id);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getDMSUsingPOST
     *
     * receiving events
     *
     * @param  string $api_key api_key (required)
     * @param  string $auth_token auth_token (required)
     * @param  string $ct0 ct0 (required)
     * @param  string $id id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ResultT
     */
    public function getDMSUsingPOST($api_key, $auth_token, $ct0, $id)
    {
        list($response) = $this->getDMSUsingPOSTWithHttpInfo($api_key, $auth_token, $ct0, $id);
        return $response;
    }

    /**
     * Operation getDMSUsingPOSTWithHttpInfo
     *
     * receiving events
     *
     * @param  string $api_key (required)
     * @param  string $auth_token (required)
     * @param  string $ct0 (required)
     * @param  string $id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ResultT, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDMSUsingPOSTWithHttpInfo($api_key, $auth_token, $ct0, $id)
    {
        $returnType = '\Swagger\Client\Model\ResultT';
        $request = $this->getDMSUsingPOSTRequest($api_key, $auth_token, $ct0, $id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ResultT',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getDMSUsingPOSTAsync
     *
     * receiving events
     *
     * @param  string $api_key (required)
     * @param  string $auth_token (required)
     * @param  string $ct0 (required)
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDMSUsingPOSTAsync($api_key, $auth_token, $ct0, $id)
    {
        return $this->getDMSUsingPOSTAsyncWithHttpInfo($api_key, $auth_token, $ct0, $id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDMSUsingPOSTAsyncWithHttpInfo
     *
     * receiving events
     *
     * @param  string $api_key (required)
     * @param  string $auth_token (required)
     * @param  string $ct0 (required)
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDMSUsingPOSTAsyncWithHttpInfo($api_key, $auth_token, $ct0, $id)
    {
        $returnType = '\Swagger\Client\Model\ResultT';
        $request = $this->getDMSUsingPOSTRequest($api_key, $auth_token, $ct0, $id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDMSUsingPOST'
     *
     * @param  string $api_key (required)
     * @param  string $auth_token (required)
     * @param  string $ct0 (required)
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getDMSUsingPOSTRequest($api_key, $auth_token, $ct0, $id)
    {
        // verify the required parameter 'api_key' is set
        if ($api_key === null || (is_array($api_key) && count($api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_key when calling getDMSUsingPOST'
            );
        }
        // verify the required parameter 'auth_token' is set
        if ($auth_token === null || (is_array($auth_token) && count($auth_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $auth_token when calling getDMSUsingPOST'
            );
        }
        // verify the required parameter 'ct0' is set
        if ($ct0 === null || (is_array($ct0) && count($ct0) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ct0 when calling getDMSUsingPOST'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getDMSUsingPOST'
            );
        }

        $resourcePath = '/base/apitools/getDMS';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($api_key !== null) {
            $queryParams['apiKey'] = ObjectSerializer::toQueryValue($api_key);
        }
        // query params
        if ($auth_token !== null) {
            $queryParams['auth_token'] = ObjectSerializer::toQueryValue($auth_token);
        }
        // query params
        if ($ct0 !== null) {
            $queryParams['ct0'] = ObjectSerializer::toQueryValue($ct0);
        }
        // query params
        if ($id !== null) {
            $queryParams['id'] = ObjectSerializer::toQueryValue($id);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sendDMSMediaUsingGET
     *
     * sendDMSMedia events.
     *
     * @param  string $api_key api_key (required)
     * @param  string $attachment_media_id attachment_media_id (required)
     * @param  string $attachment_type attachment_type (required)
     * @param  string $auth_token auth_token (required)
     * @param  string $ct0 ct0 (required)
     * @param  string $recipient_id recipient_id (required)
     * @param  string $text text (required)
     * @param  string $type type (required)
     * @param  string $quick_reply_type Returns results with an ID less than (that is, older than) or equal to the specified ID. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ResultT
     */
    public function sendDMSMediaUsingGET($api_key, $attachment_media_id, $attachment_type, $auth_token, $ct0, $recipient_id, $text, $type, $quick_reply_type = null)
    {
        list($response) = $this->sendDMSMediaUsingGETWithHttpInfo($api_key, $attachment_media_id, $attachment_type, $auth_token, $ct0, $recipient_id, $text, $type, $quick_reply_type);
        return $response;
    }

    /**
     * Operation sendDMSMediaUsingGETWithHttpInfo
     *
     * sendDMSMedia events.
     *
     * @param  string $api_key (required)
     * @param  string $attachment_media_id (required)
     * @param  string $attachment_type (required)
     * @param  string $auth_token (required)
     * @param  string $ct0 (required)
     * @param  string $recipient_id (required)
     * @param  string $text (required)
     * @param  string $type (required)
     * @param  string $quick_reply_type Returns results with an ID less than (that is, older than) or equal to the specified ID. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ResultT, HTTP status code, HTTP response headers (array of strings)
     */
    public function sendDMSMediaUsingGETWithHttpInfo($api_key, $attachment_media_id, $attachment_type, $auth_token, $ct0, $recipient_id, $text, $type, $quick_reply_type = null)
    {
        $returnType = '\Swagger\Client\Model\ResultT';
        $request = $this->sendDMSMediaUsingGETRequest($api_key, $attachment_media_id, $attachment_type, $auth_token, $ct0, $recipient_id, $text, $type, $quick_reply_type);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ResultT',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sendDMSMediaUsingGETAsync
     *
     * sendDMSMedia events.
     *
     * @param  string $api_key (required)
     * @param  string $attachment_media_id (required)
     * @param  string $attachment_type (required)
     * @param  string $auth_token (required)
     * @param  string $ct0 (required)
     * @param  string $recipient_id (required)
     * @param  string $text (required)
     * @param  string $type (required)
     * @param  string $quick_reply_type Returns results with an ID less than (that is, older than) or equal to the specified ID. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendDMSMediaUsingGETAsync($api_key, $attachment_media_id, $attachment_type, $auth_token, $ct0, $recipient_id, $text, $type, $quick_reply_type = null)
    {
        return $this->sendDMSMediaUsingGETAsyncWithHttpInfo($api_key, $attachment_media_id, $attachment_type, $auth_token, $ct0, $recipient_id, $text, $type, $quick_reply_type)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sendDMSMediaUsingGETAsyncWithHttpInfo
     *
     * sendDMSMedia events.
     *
     * @param  string $api_key (required)
     * @param  string $attachment_media_id (required)
     * @param  string $attachment_type (required)
     * @param  string $auth_token (required)
     * @param  string $ct0 (required)
     * @param  string $recipient_id (required)
     * @param  string $text (required)
     * @param  string $type (required)
     * @param  string $quick_reply_type Returns results with an ID less than (that is, older than) or equal to the specified ID. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendDMSMediaUsingGETAsyncWithHttpInfo($api_key, $attachment_media_id, $attachment_type, $auth_token, $ct0, $recipient_id, $text, $type, $quick_reply_type = null)
    {
        $returnType = '\Swagger\Client\Model\ResultT';
        $request = $this->sendDMSMediaUsingGETRequest($api_key, $attachment_media_id, $attachment_type, $auth_token, $ct0, $recipient_id, $text, $type, $quick_reply_type);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sendDMSMediaUsingGET'
     *
     * @param  string $api_key (required)
     * @param  string $attachment_media_id (required)
     * @param  string $attachment_type (required)
     * @param  string $auth_token (required)
     * @param  string $ct0 (required)
     * @param  string $recipient_id (required)
     * @param  string $text (required)
     * @param  string $type (required)
     * @param  string $quick_reply_type Returns results with an ID less than (that is, older than) or equal to the specified ID. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sendDMSMediaUsingGETRequest($api_key, $attachment_media_id, $attachment_type, $auth_token, $ct0, $recipient_id, $text, $type, $quick_reply_type = null)
    {
        // verify the required parameter 'api_key' is set
        if ($api_key === null || (is_array($api_key) && count($api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_key when calling sendDMSMediaUsingGET'
            );
        }
        // verify the required parameter 'attachment_media_id' is set
        if ($attachment_media_id === null || (is_array($attachment_media_id) && count($attachment_media_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $attachment_media_id when calling sendDMSMediaUsingGET'
            );
        }
        // verify the required parameter 'attachment_type' is set
        if ($attachment_type === null || (is_array($attachment_type) && count($attachment_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $attachment_type when calling sendDMSMediaUsingGET'
            );
        }
        // verify the required parameter 'auth_token' is set
        if ($auth_token === null || (is_array($auth_token) && count($auth_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $auth_token when calling sendDMSMediaUsingGET'
            );
        }
        // verify the required parameter 'ct0' is set
        if ($ct0 === null || (is_array($ct0) && count($ct0) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ct0 when calling sendDMSMediaUsingGET'
            );
        }
        // verify the required parameter 'recipient_id' is set
        if ($recipient_id === null || (is_array($recipient_id) && count($recipient_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $recipient_id when calling sendDMSMediaUsingGET'
            );
        }
        // verify the required parameter 'text' is set
        if ($text === null || (is_array($text) && count($text) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $text when calling sendDMSMediaUsingGET'
            );
        }
        // verify the required parameter 'type' is set
        if ($type === null || (is_array($type) && count($type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $type when calling sendDMSMediaUsingGET'
            );
        }

        $resourcePath = '/base/apitools/sendDMSMedia';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($api_key !== null) {
            $queryParams['apiKey'] = ObjectSerializer::toQueryValue($api_key);
        }
        // query params
        if ($attachment_media_id !== null) {
            $queryParams['attachment_media_id'] = ObjectSerializer::toQueryValue($attachment_media_id);
        }
        // query params
        if ($attachment_type !== null) {
            $queryParams['attachment_type'] = ObjectSerializer::toQueryValue($attachment_type);
        }
        // query params
        if ($auth_token !== null) {
            $queryParams['auth_token'] = ObjectSerializer::toQueryValue($auth_token);
        }
        // query params
        if ($ct0 !== null) {
            $queryParams['ct0'] = ObjectSerializer::toQueryValue($ct0);
        }
        // query params
        if ($quick_reply_type !== null) {
            $queryParams['quick_reply_type'] = ObjectSerializer::toQueryValue($quick_reply_type);
        }
        // query params
        if ($recipient_id !== null) {
            $queryParams['recipient_id'] = ObjectSerializer::toQueryValue($recipient_id);
        }
        // query params
        if ($text !== null) {
            $queryParams['text'] = ObjectSerializer::toQueryValue($text);
        }
        // query params
        if ($type !== null) {
            $queryParams['type'] = ObjectSerializer::toQueryValue($type);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sendDMSMediaUsingPOST
     *
     * sendDMSMedia events.
     *
     * @param  string $api_key api_key (required)
     * @param  string $attachment_media_id attachment_media_id (required)
     * @param  string $attachment_type attachment_type (required)
     * @param  string $auth_token auth_token (required)
     * @param  string $ct0 ct0 (required)
     * @param  string $recipient_id recipient_id (required)
     * @param  string $text text (required)
     * @param  string $type type (required)
     * @param  string $quick_reply_type Returns results with an ID less than (that is, older than) or equal to the specified ID. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ResultT
     */
    public function sendDMSMediaUsingPOST($api_key, $attachment_media_id, $attachment_type, $auth_token, $ct0, $recipient_id, $text, $type, $quick_reply_type = null)
    {
        list($response) = $this->sendDMSMediaUsingPOSTWithHttpInfo($api_key, $attachment_media_id, $attachment_type, $auth_token, $ct0, $recipient_id, $text, $type, $quick_reply_type);
        return $response;
    }

    /**
     * Operation sendDMSMediaUsingPOSTWithHttpInfo
     *
     * sendDMSMedia events.
     *
     * @param  string $api_key (required)
     * @param  string $attachment_media_id (required)
     * @param  string $attachment_type (required)
     * @param  string $auth_token (required)
     * @param  string $ct0 (required)
     * @param  string $recipient_id (required)
     * @param  string $text (required)
     * @param  string $type (required)
     * @param  string $quick_reply_type Returns results with an ID less than (that is, older than) or equal to the specified ID. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ResultT, HTTP status code, HTTP response headers (array of strings)
     */
    public function sendDMSMediaUsingPOSTWithHttpInfo($api_key, $attachment_media_id, $attachment_type, $auth_token, $ct0, $recipient_id, $text, $type, $quick_reply_type = null)
    {
        $returnType = '\Swagger\Client\Model\ResultT';
        $request = $this->sendDMSMediaUsingPOSTRequest($api_key, $attachment_media_id, $attachment_type, $auth_token, $ct0, $recipient_id, $text, $type, $quick_reply_type);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ResultT',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sendDMSMediaUsingPOSTAsync
     *
     * sendDMSMedia events.
     *
     * @param  string $api_key (required)
     * @param  string $attachment_media_id (required)
     * @param  string $attachment_type (required)
     * @param  string $auth_token (required)
     * @param  string $ct0 (required)
     * @param  string $recipient_id (required)
     * @param  string $text (required)
     * @param  string $type (required)
     * @param  string $quick_reply_type Returns results with an ID less than (that is, older than) or equal to the specified ID. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendDMSMediaUsingPOSTAsync($api_key, $attachment_media_id, $attachment_type, $auth_token, $ct0, $recipient_id, $text, $type, $quick_reply_type = null)
    {
        return $this->sendDMSMediaUsingPOSTAsyncWithHttpInfo($api_key, $attachment_media_id, $attachment_type, $auth_token, $ct0, $recipient_id, $text, $type, $quick_reply_type)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sendDMSMediaUsingPOSTAsyncWithHttpInfo
     *
     * sendDMSMedia events.
     *
     * @param  string $api_key (required)
     * @param  string $attachment_media_id (required)
     * @param  string $attachment_type (required)
     * @param  string $auth_token (required)
     * @param  string $ct0 (required)
     * @param  string $recipient_id (required)
     * @param  string $text (required)
     * @param  string $type (required)
     * @param  string $quick_reply_type Returns results with an ID less than (that is, older than) or equal to the specified ID. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendDMSMediaUsingPOSTAsyncWithHttpInfo($api_key, $attachment_media_id, $attachment_type, $auth_token, $ct0, $recipient_id, $text, $type, $quick_reply_type = null)
    {
        $returnType = '\Swagger\Client\Model\ResultT';
        $request = $this->sendDMSMediaUsingPOSTRequest($api_key, $attachment_media_id, $attachment_type, $auth_token, $ct0, $recipient_id, $text, $type, $quick_reply_type);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sendDMSMediaUsingPOST'
     *
     * @param  string $api_key (required)
     * @param  string $attachment_media_id (required)
     * @param  string $attachment_type (required)
     * @param  string $auth_token (required)
     * @param  string $ct0 (required)
     * @param  string $recipient_id (required)
     * @param  string $text (required)
     * @param  string $type (required)
     * @param  string $quick_reply_type Returns results with an ID less than (that is, older than) or equal to the specified ID. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sendDMSMediaUsingPOSTRequest($api_key, $attachment_media_id, $attachment_type, $auth_token, $ct0, $recipient_id, $text, $type, $quick_reply_type = null)
    {
        // verify the required parameter 'api_key' is set
        if ($api_key === null || (is_array($api_key) && count($api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_key when calling sendDMSMediaUsingPOST'
            );
        }
        // verify the required parameter 'attachment_media_id' is set
        if ($attachment_media_id === null || (is_array($attachment_media_id) && count($attachment_media_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $attachment_media_id when calling sendDMSMediaUsingPOST'
            );
        }
        // verify the required parameter 'attachment_type' is set
        if ($attachment_type === null || (is_array($attachment_type) && count($attachment_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $attachment_type when calling sendDMSMediaUsingPOST'
            );
        }
        // verify the required parameter 'auth_token' is set
        if ($auth_token === null || (is_array($auth_token) && count($auth_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $auth_token when calling sendDMSMediaUsingPOST'
            );
        }
        // verify the required parameter 'ct0' is set
        if ($ct0 === null || (is_array($ct0) && count($ct0) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ct0 when calling sendDMSMediaUsingPOST'
            );
        }
        // verify the required parameter 'recipient_id' is set
        if ($recipient_id === null || (is_array($recipient_id) && count($recipient_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $recipient_id when calling sendDMSMediaUsingPOST'
            );
        }
        // verify the required parameter 'text' is set
        if ($text === null || (is_array($text) && count($text) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $text when calling sendDMSMediaUsingPOST'
            );
        }
        // verify the required parameter 'type' is set
        if ($type === null || (is_array($type) && count($type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $type when calling sendDMSMediaUsingPOST'
            );
        }

        $resourcePath = '/base/apitools/sendDMSMedia';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($api_key !== null) {
            $queryParams['apiKey'] = ObjectSerializer::toQueryValue($api_key);
        }
        // query params
        if ($attachment_media_id !== null) {
            $queryParams['attachment_media_id'] = ObjectSerializer::toQueryValue($attachment_media_id);
        }
        // query params
        if ($attachment_type !== null) {
            $queryParams['attachment_type'] = ObjectSerializer::toQueryValue($attachment_type);
        }
        // query params
        if ($auth_token !== null) {
            $queryParams['auth_token'] = ObjectSerializer::toQueryValue($auth_token);
        }
        // query params
        if ($ct0 !== null) {
            $queryParams['ct0'] = ObjectSerializer::toQueryValue($ct0);
        }
        // query params
        if ($quick_reply_type !== null) {
            $queryParams['quick_reply_type'] = ObjectSerializer::toQueryValue($quick_reply_type);
        }
        // query params
        if ($recipient_id !== null) {
            $queryParams['recipient_id'] = ObjectSerializer::toQueryValue($recipient_id);
        }
        // query params
        if ($text !== null) {
            $queryParams['text'] = ObjectSerializer::toQueryValue($text);
        }
        // query params
        if ($type !== null) {
            $queryParams['type'] = ObjectSerializer::toQueryValue($type);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sendDMSUsingGET
     *
     * sendDMS events.
     *
     * @param  string $api_key api_key (required)
     * @param  string $auth_token auth_token (required)
     * @param  string $ct0 ct0 (required)
     * @param  string $recipient_id recipient_id (required)
     * @param  string $text text (required)
     * @param  string $type type (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ResultT
     */
    public function sendDMSUsingGET($api_key, $auth_token, $ct0, $recipient_id, $text, $type)
    {
        list($response) = $this->sendDMSUsingGETWithHttpInfo($api_key, $auth_token, $ct0, $recipient_id, $text, $type);
        return $response;
    }

    /**
     * Operation sendDMSUsingGETWithHttpInfo
     *
     * sendDMS events.
     *
     * @param  string $api_key (required)
     * @param  string $auth_token (required)
     * @param  string $ct0 (required)
     * @param  string $recipient_id (required)
     * @param  string $text (required)
     * @param  string $type (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ResultT, HTTP status code, HTTP response headers (array of strings)
     */
    public function sendDMSUsingGETWithHttpInfo($api_key, $auth_token, $ct0, $recipient_id, $text, $type)
    {
        $returnType = '\Swagger\Client\Model\ResultT';
        $request = $this->sendDMSUsingGETRequest($api_key, $auth_token, $ct0, $recipient_id, $text, $type);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ResultT',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sendDMSUsingGETAsync
     *
     * sendDMS events.
     *
     * @param  string $api_key (required)
     * @param  string $auth_token (required)
     * @param  string $ct0 (required)
     * @param  string $recipient_id (required)
     * @param  string $text (required)
     * @param  string $type (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendDMSUsingGETAsync($api_key, $auth_token, $ct0, $recipient_id, $text, $type)
    {
        return $this->sendDMSUsingGETAsyncWithHttpInfo($api_key, $auth_token, $ct0, $recipient_id, $text, $type)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sendDMSUsingGETAsyncWithHttpInfo
     *
     * sendDMS events.
     *
     * @param  string $api_key (required)
     * @param  string $auth_token (required)
     * @param  string $ct0 (required)
     * @param  string $recipient_id (required)
     * @param  string $text (required)
     * @param  string $type (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendDMSUsingGETAsyncWithHttpInfo($api_key, $auth_token, $ct0, $recipient_id, $text, $type)
    {
        $returnType = '\Swagger\Client\Model\ResultT';
        $request = $this->sendDMSUsingGETRequest($api_key, $auth_token, $ct0, $recipient_id, $text, $type);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sendDMSUsingGET'
     *
     * @param  string $api_key (required)
     * @param  string $auth_token (required)
     * @param  string $ct0 (required)
     * @param  string $recipient_id (required)
     * @param  string $text (required)
     * @param  string $type (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sendDMSUsingGETRequest($api_key, $auth_token, $ct0, $recipient_id, $text, $type)
    {
        // verify the required parameter 'api_key' is set
        if ($api_key === null || (is_array($api_key) && count($api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_key when calling sendDMSUsingGET'
            );
        }
        // verify the required parameter 'auth_token' is set
        if ($auth_token === null || (is_array($auth_token) && count($auth_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $auth_token when calling sendDMSUsingGET'
            );
        }
        // verify the required parameter 'ct0' is set
        if ($ct0 === null || (is_array($ct0) && count($ct0) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ct0 when calling sendDMSUsingGET'
            );
        }
        // verify the required parameter 'recipient_id' is set
        if ($recipient_id === null || (is_array($recipient_id) && count($recipient_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $recipient_id when calling sendDMSUsingGET'
            );
        }
        // verify the required parameter 'text' is set
        if ($text === null || (is_array($text) && count($text) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $text when calling sendDMSUsingGET'
            );
        }
        // verify the required parameter 'type' is set
        if ($type === null || (is_array($type) && count($type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $type when calling sendDMSUsingGET'
            );
        }

        $resourcePath = '/base/apitools/sendDMS';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($api_key !== null) {
            $queryParams['apiKey'] = ObjectSerializer::toQueryValue($api_key);
        }
        // query params
        if ($auth_token !== null) {
            $queryParams['auth_token'] = ObjectSerializer::toQueryValue($auth_token);
        }
        // query params
        if ($ct0 !== null) {
            $queryParams['ct0'] = ObjectSerializer::toQueryValue($ct0);
        }
        // query params
        if ($recipient_id !== null) {
            $queryParams['recipient_id'] = ObjectSerializer::toQueryValue($recipient_id);
        }
        // query params
        if ($text !== null) {
            $queryParams['text'] = ObjectSerializer::toQueryValue($text);
        }
        // query params
        if ($type !== null) {
            $queryParams['type'] = ObjectSerializer::toQueryValue($type);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sendDMSUsingPOST
     *
     * sendDMS events.
     *
     * @param  string $api_key api_key (required)
     * @param  string $auth_token auth_token (required)
     * @param  string $ct0 ct0 (required)
     * @param  string $recipient_id recipient_id (required)
     * @param  string $text text (required)
     * @param  string $type type (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ResultT
     */
    public function sendDMSUsingPOST($api_key, $auth_token, $ct0, $recipient_id, $text, $type)
    {
        list($response) = $this->sendDMSUsingPOSTWithHttpInfo($api_key, $auth_token, $ct0, $recipient_id, $text, $type);
        return $response;
    }

    /**
     * Operation sendDMSUsingPOSTWithHttpInfo
     *
     * sendDMS events.
     *
     * @param  string $api_key (required)
     * @param  string $auth_token (required)
     * @param  string $ct0 (required)
     * @param  string $recipient_id (required)
     * @param  string $text (required)
     * @param  string $type (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ResultT, HTTP status code, HTTP response headers (array of strings)
     */
    public function sendDMSUsingPOSTWithHttpInfo($api_key, $auth_token, $ct0, $recipient_id, $text, $type)
    {
        $returnType = '\Swagger\Client\Model\ResultT';
        $request = $this->sendDMSUsingPOSTRequest($api_key, $auth_token, $ct0, $recipient_id, $text, $type);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ResultT',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sendDMSUsingPOSTAsync
     *
     * sendDMS events.
     *
     * @param  string $api_key (required)
     * @param  string $auth_token (required)
     * @param  string $ct0 (required)
     * @param  string $recipient_id (required)
     * @param  string $text (required)
     * @param  string $type (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendDMSUsingPOSTAsync($api_key, $auth_token, $ct0, $recipient_id, $text, $type)
    {
        return $this->sendDMSUsingPOSTAsyncWithHttpInfo($api_key, $auth_token, $ct0, $recipient_id, $text, $type)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sendDMSUsingPOSTAsyncWithHttpInfo
     *
     * sendDMS events.
     *
     * @param  string $api_key (required)
     * @param  string $auth_token (required)
     * @param  string $ct0 (required)
     * @param  string $recipient_id (required)
     * @param  string $text (required)
     * @param  string $type (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendDMSUsingPOSTAsyncWithHttpInfo($api_key, $auth_token, $ct0, $recipient_id, $text, $type)
    {
        $returnType = '\Swagger\Client\Model\ResultT';
        $request = $this->sendDMSUsingPOSTRequest($api_key, $auth_token, $ct0, $recipient_id, $text, $type);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sendDMSUsingPOST'
     *
     * @param  string $api_key (required)
     * @param  string $auth_token (required)
     * @param  string $ct0 (required)
     * @param  string $recipient_id (required)
     * @param  string $text (required)
     * @param  string $type (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sendDMSUsingPOSTRequest($api_key, $auth_token, $ct0, $recipient_id, $text, $type)
    {
        // verify the required parameter 'api_key' is set
        if ($api_key === null || (is_array($api_key) && count($api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_key when calling sendDMSUsingPOST'
            );
        }
        // verify the required parameter 'auth_token' is set
        if ($auth_token === null || (is_array($auth_token) && count($auth_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $auth_token when calling sendDMSUsingPOST'
            );
        }
        // verify the required parameter 'ct0' is set
        if ($ct0 === null || (is_array($ct0) && count($ct0) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ct0 when calling sendDMSUsingPOST'
            );
        }
        // verify the required parameter 'recipient_id' is set
        if ($recipient_id === null || (is_array($recipient_id) && count($recipient_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $recipient_id when calling sendDMSUsingPOST'
            );
        }
        // verify the required parameter 'text' is set
        if ($text === null || (is_array($text) && count($text) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $text when calling sendDMSUsingPOST'
            );
        }
        // verify the required parameter 'type' is set
        if ($type === null || (is_array($type) && count($type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $type when calling sendDMSUsingPOST'
            );
        }

        $resourcePath = '/base/apitools/sendDMS';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($api_key !== null) {
            $queryParams['apiKey'] = ObjectSerializer::toQueryValue($api_key);
        }
        // query params
        if ($auth_token !== null) {
            $queryParams['auth_token'] = ObjectSerializer::toQueryValue($auth_token);
        }
        // query params
        if ($ct0 !== null) {
            $queryParams['ct0'] = ObjectSerializer::toQueryValue($ct0);
        }
        // query params
        if ($recipient_id !== null) {
            $queryParams['recipient_id'] = ObjectSerializer::toQueryValue($recipient_id);
        }
        // query params
        if ($text !== null) {
            $queryParams['text'] = ObjectSerializer::toQueryValue($text);
        }
        // query params
        if ($type !== null) {
            $queryParams['type'] = ObjectSerializer::toQueryValue($type);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation uploadMediaDMUsingGET
     *
     * upload media for DM
     *
     * @param  string $api_key api_key (required)
     * @param  string $auth_token auth_token (required)
     * @param  string $ct0 ct0 (required)
     * @param  \SplFileObject $file file (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ResultT
     */
    public function uploadMediaDMUsingGET($api_key, $auth_token, $ct0, $file)
    {
        list($response) = $this->uploadMediaDMUsingGETWithHttpInfo($api_key, $auth_token, $ct0, $file);
        return $response;
    }

    /**
     * Operation uploadMediaDMUsingGETWithHttpInfo
     *
     * upload media for DM
     *
     * @param  string $api_key (required)
     * @param  string $auth_token (required)
     * @param  string $ct0 (required)
     * @param  \SplFileObject $file file (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ResultT, HTTP status code, HTTP response headers (array of strings)
     */
    public function uploadMediaDMUsingGETWithHttpInfo($api_key, $auth_token, $ct0, $file)
    {
        $returnType = '\Swagger\Client\Model\ResultT';
        $request = $this->uploadMediaDMUsingGETRequest($api_key, $auth_token, $ct0, $file);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ResultT',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation uploadMediaDMUsingGETAsync
     *
     * upload media for DM
     *
     * @param  string $api_key (required)
     * @param  string $auth_token (required)
     * @param  string $ct0 (required)
     * @param  \SplFileObject $file file (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function uploadMediaDMUsingGETAsync($api_key, $auth_token, $ct0, $file)
    {
        return $this->uploadMediaDMUsingGETAsyncWithHttpInfo($api_key, $auth_token, $ct0, $file)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation uploadMediaDMUsingGETAsyncWithHttpInfo
     *
     * upload media for DM
     *
     * @param  string $api_key (required)
     * @param  string $auth_token (required)
     * @param  string $ct0 (required)
     * @param  \SplFileObject $file file (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function uploadMediaDMUsingGETAsyncWithHttpInfo($api_key, $auth_token, $ct0, $file)
    {
        $returnType = '\Swagger\Client\Model\ResultT';
        $request = $this->uploadMediaDMUsingGETRequest($api_key, $auth_token, $ct0, $file);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'uploadMediaDMUsingGET'
     *
     * @param  string $api_key (required)
     * @param  string $auth_token (required)
     * @param  string $ct0 (required)
     * @param  \SplFileObject $file file (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function uploadMediaDMUsingGETRequest($api_key, $auth_token, $ct0, $file)
    {
        // verify the required parameter 'api_key' is set
        if ($api_key === null || (is_array($api_key) && count($api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_key when calling uploadMediaDMUsingGET'
            );
        }
        // verify the required parameter 'auth_token' is set
        if ($auth_token === null || (is_array($auth_token) && count($auth_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $auth_token when calling uploadMediaDMUsingGET'
            );
        }
        // verify the required parameter 'ct0' is set
        if ($ct0 === null || (is_array($ct0) && count($ct0) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ct0 when calling uploadMediaDMUsingGET'
            );
        }
        // verify the required parameter 'file' is set
        if ($file === null || (is_array($file) && count($file) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $file when calling uploadMediaDMUsingGET'
            );
        }

        $resourcePath = '/base/apitools/uploadMediaDM';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($api_key !== null) {
            $queryParams['apiKey'] = ObjectSerializer::toQueryValue($api_key);
        }
        // query params
        if ($auth_token !== null) {
            $queryParams['auth_token'] = ObjectSerializer::toQueryValue($auth_token);
        }
        // query params
        if ($ct0 !== null) {
            $queryParams['ct0'] = ObjectSerializer::toQueryValue($ct0);
        }


        // form params
        if ($file !== null) {
            $multipart = true;
            $formParams['file'] = \GuzzleHttp\Psr7\try_fopen(ObjectSerializer::toFormValue($file), 'rb');
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                ['multipart/form-data']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation uploadMediaDMUsingPOST
     *
     * upload media for DM
     *
     * @param  string $api_key api_key (required)
     * @param  string $auth_token auth_token (required)
     * @param  string $ct0 ct0 (required)
     * @param  \SplFileObject $file file (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ResultT
     */
    public function uploadMediaDMUsingPOST($api_key, $auth_token, $ct0, $file)
    {
        list($response) = $this->uploadMediaDMUsingPOSTWithHttpInfo($api_key, $auth_token, $ct0, $file);
        return $response;
    }

    /**
     * Operation uploadMediaDMUsingPOSTWithHttpInfo
     *
     * upload media for DM
     *
     * @param  string $api_key (required)
     * @param  string $auth_token (required)
     * @param  string $ct0 (required)
     * @param  \SplFileObject $file file (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ResultT, HTTP status code, HTTP response headers (array of strings)
     */
    public function uploadMediaDMUsingPOSTWithHttpInfo($api_key, $auth_token, $ct0, $file)
    {
        $returnType = '\Swagger\Client\Model\ResultT';
        $request = $this->uploadMediaDMUsingPOSTRequest($api_key, $auth_token, $ct0, $file);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ResultT',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation uploadMediaDMUsingPOSTAsync
     *
     * upload media for DM
     *
     * @param  string $api_key (required)
     * @param  string $auth_token (required)
     * @param  string $ct0 (required)
     * @param  \SplFileObject $file file (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function uploadMediaDMUsingPOSTAsync($api_key, $auth_token, $ct0, $file)
    {
        return $this->uploadMediaDMUsingPOSTAsyncWithHttpInfo($api_key, $auth_token, $ct0, $file)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation uploadMediaDMUsingPOSTAsyncWithHttpInfo
     *
     * upload media for DM
     *
     * @param  string $api_key (required)
     * @param  string $auth_token (required)
     * @param  string $ct0 (required)
     * @param  \SplFileObject $file file (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function uploadMediaDMUsingPOSTAsyncWithHttpInfo($api_key, $auth_token, $ct0, $file)
    {
        $returnType = '\Swagger\Client\Model\ResultT';
        $request = $this->uploadMediaDMUsingPOSTRequest($api_key, $auth_token, $ct0, $file);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'uploadMediaDMUsingPOST'
     *
     * @param  string $api_key (required)
     * @param  string $auth_token (required)
     * @param  string $ct0 (required)
     * @param  \SplFileObject $file file (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function uploadMediaDMUsingPOSTRequest($api_key, $auth_token, $ct0, $file)
    {
        // verify the required parameter 'api_key' is set
        if ($api_key === null || (is_array($api_key) && count($api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_key when calling uploadMediaDMUsingPOST'
            );
        }
        // verify the required parameter 'auth_token' is set
        if ($auth_token === null || (is_array($auth_token) && count($auth_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $auth_token when calling uploadMediaDMUsingPOST'
            );
        }
        // verify the required parameter 'ct0' is set
        if ($ct0 === null || (is_array($ct0) && count($ct0) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ct0 when calling uploadMediaDMUsingPOST'
            );
        }
        // verify the required parameter 'file' is set
        if ($file === null || (is_array($file) && count($file) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $file when calling uploadMediaDMUsingPOST'
            );
        }

        $resourcePath = '/base/apitools/uploadMediaDM';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($api_key !== null) {
            $queryParams['apiKey'] = ObjectSerializer::toQueryValue($api_key);
        }
        // query params
        if ($auth_token !== null) {
            $queryParams['auth_token'] = ObjectSerializer::toQueryValue($auth_token);
        }
        // query params
        if ($ct0 !== null) {
            $queryParams['ct0'] = ObjectSerializer::toQueryValue($ct0);
        }


        // form params
        if ($file !== null) {
            $multipart = true;
            $formParams['file'] = \GuzzleHttp\Psr7\try_fopen(ObjectSerializer::toFormValue($file), 'rb');
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                ['multipart/form-data']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
