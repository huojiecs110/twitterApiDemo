<?php
/**
 * TwitterFollowsApiToolsApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Utools_twitter_tools_api
 *
 * X (Twitter) API for search, Tweets, users, followers, images, media and more. Supports some v1.1 and v2 API endpoints, with more to come in the future!
 *
 * OpenAPI spec version: 1.1
 * Contact: huojiecs@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.37
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * TwitterFollowsApiToolsApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TwitterFollowsApiToolsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation blueVerifiedFollowersV2UsingGET
     *
     * get blueVerifiedFollowers by V2
     *
     * @param  string $api_key api_key (required)
     * @param  string $user_id user_id (required)
     * @param  string $cursor cursor (optional, default to -1)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ResultT
     */
    public function blueVerifiedFollowersV2UsingGET($api_key, $user_id, $cursor = '-1')
    {
        list($response) = $this->blueVerifiedFollowersV2UsingGETWithHttpInfo($api_key, $user_id, $cursor);
        return $response;
    }

    /**
     * Operation blueVerifiedFollowersV2UsingGETWithHttpInfo
     *
     * get blueVerifiedFollowers by V2
     *
     * @param  string $api_key (required)
     * @param  string $user_id (required)
     * @param  string $cursor (optional, default to -1)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ResultT, HTTP status code, HTTP response headers (array of strings)
     */
    public function blueVerifiedFollowersV2UsingGETWithHttpInfo($api_key, $user_id, $cursor = '-1')
    {
        $returnType = '\Swagger\Client\Model\ResultT';
        $request = $this->blueVerifiedFollowersV2UsingGETRequest($api_key, $user_id, $cursor);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ResultT',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation blueVerifiedFollowersV2UsingGETAsync
     *
     * get blueVerifiedFollowers by V2
     *
     * @param  string $api_key (required)
     * @param  string $user_id (required)
     * @param  string $cursor (optional, default to -1)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function blueVerifiedFollowersV2UsingGETAsync($api_key, $user_id, $cursor = '-1')
    {
        return $this->blueVerifiedFollowersV2UsingGETAsyncWithHttpInfo($api_key, $user_id, $cursor)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation blueVerifiedFollowersV2UsingGETAsyncWithHttpInfo
     *
     * get blueVerifiedFollowers by V2
     *
     * @param  string $api_key (required)
     * @param  string $user_id (required)
     * @param  string $cursor (optional, default to -1)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function blueVerifiedFollowersV2UsingGETAsyncWithHttpInfo($api_key, $user_id, $cursor = '-1')
    {
        $returnType = '\Swagger\Client\Model\ResultT';
        $request = $this->blueVerifiedFollowersV2UsingGETRequest($api_key, $user_id, $cursor);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'blueVerifiedFollowersV2UsingGET'
     *
     * @param  string $api_key (required)
     * @param  string $user_id (required)
     * @param  string $cursor (optional, default to -1)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function blueVerifiedFollowersV2UsingGETRequest($api_key, $user_id, $cursor = '-1')
    {
        // verify the required parameter 'api_key' is set
        if ($api_key === null || (is_array($api_key) && count($api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_key when calling blueVerifiedFollowersV2UsingGET'
            );
        }
        // verify the required parameter 'user_id' is set
        if ($user_id === null || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling blueVerifiedFollowersV2UsingGET'
            );
        }

        $resourcePath = '/base/apitools/blueVerifiedFollowersV2';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($api_key !== null) {
            $queryParams['apiKey'] = ObjectSerializer::toQueryValue($api_key);
        }
        // query params
        if ($cursor !== null) {
            $queryParams['cursor'] = ObjectSerializer::toQueryValue($cursor);
        }
        // query params
        if ($user_id !== null) {
            $queryParams['userId'] = ObjectSerializer::toQueryValue($user_id);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation blueVerifiedFollowersV2UsingPOST
     *
     * get blueVerifiedFollowers by V2
     *
     * @param  string $api_key api_key (required)
     * @param  string $user_id user_id (required)
     * @param  string $cursor cursor (optional, default to -1)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ResultT
     */
    public function blueVerifiedFollowersV2UsingPOST($api_key, $user_id, $cursor = '-1')
    {
        list($response) = $this->blueVerifiedFollowersV2UsingPOSTWithHttpInfo($api_key, $user_id, $cursor);
        return $response;
    }

    /**
     * Operation blueVerifiedFollowersV2UsingPOSTWithHttpInfo
     *
     * get blueVerifiedFollowers by V2
     *
     * @param  string $api_key (required)
     * @param  string $user_id (required)
     * @param  string $cursor (optional, default to -1)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ResultT, HTTP status code, HTTP response headers (array of strings)
     */
    public function blueVerifiedFollowersV2UsingPOSTWithHttpInfo($api_key, $user_id, $cursor = '-1')
    {
        $returnType = '\Swagger\Client\Model\ResultT';
        $request = $this->blueVerifiedFollowersV2UsingPOSTRequest($api_key, $user_id, $cursor);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ResultT',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation blueVerifiedFollowersV2UsingPOSTAsync
     *
     * get blueVerifiedFollowers by V2
     *
     * @param  string $api_key (required)
     * @param  string $user_id (required)
     * @param  string $cursor (optional, default to -1)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function blueVerifiedFollowersV2UsingPOSTAsync($api_key, $user_id, $cursor = '-1')
    {
        return $this->blueVerifiedFollowersV2UsingPOSTAsyncWithHttpInfo($api_key, $user_id, $cursor)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation blueVerifiedFollowersV2UsingPOSTAsyncWithHttpInfo
     *
     * get blueVerifiedFollowers by V2
     *
     * @param  string $api_key (required)
     * @param  string $user_id (required)
     * @param  string $cursor (optional, default to -1)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function blueVerifiedFollowersV2UsingPOSTAsyncWithHttpInfo($api_key, $user_id, $cursor = '-1')
    {
        $returnType = '\Swagger\Client\Model\ResultT';
        $request = $this->blueVerifiedFollowersV2UsingPOSTRequest($api_key, $user_id, $cursor);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'blueVerifiedFollowersV2UsingPOST'
     *
     * @param  string $api_key (required)
     * @param  string $user_id (required)
     * @param  string $cursor (optional, default to -1)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function blueVerifiedFollowersV2UsingPOSTRequest($api_key, $user_id, $cursor = '-1')
    {
        // verify the required parameter 'api_key' is set
        if ($api_key === null || (is_array($api_key) && count($api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_key when calling blueVerifiedFollowersV2UsingPOST'
            );
        }
        // verify the required parameter 'user_id' is set
        if ($user_id === null || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling blueVerifiedFollowersV2UsingPOST'
            );
        }

        $resourcePath = '/base/apitools/blueVerifiedFollowersV2';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($api_key !== null) {
            $queryParams['apiKey'] = ObjectSerializer::toQueryValue($api_key);
        }
        // query params
        if ($cursor !== null) {
            $queryParams['cursor'] = ObjectSerializer::toQueryValue($cursor);
        }
        // query params
        if ($user_id !== null) {
            $queryParams['userId'] = ObjectSerializer::toQueryValue($user_id);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation followUsingGET
     *
     * to follow
     *
     * @param  string $api_key api_key (required)
     * @param  string $auth_token auth_token (required)
     * @param  string $ct0 ct0 (required)
     * @param  string $screen_name screen_name (optional)
     * @param  string $user_id user_id (optional, default to 1574242047661207552)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ResultT
     */
    public function followUsingGET($api_key, $auth_token, $ct0, $screen_name = null, $user_id = '1574242047661207552')
    {
        list($response) = $this->followUsingGETWithHttpInfo($api_key, $auth_token, $ct0, $screen_name, $user_id);
        return $response;
    }

    /**
     * Operation followUsingGETWithHttpInfo
     *
     * to follow
     *
     * @param  string $api_key (required)
     * @param  string $auth_token (required)
     * @param  string $ct0 (required)
     * @param  string $screen_name (optional)
     * @param  string $user_id (optional, default to 1574242047661207552)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ResultT, HTTP status code, HTTP response headers (array of strings)
     */
    public function followUsingGETWithHttpInfo($api_key, $auth_token, $ct0, $screen_name = null, $user_id = '1574242047661207552')
    {
        $returnType = '\Swagger\Client\Model\ResultT';
        $request = $this->followUsingGETRequest($api_key, $auth_token, $ct0, $screen_name, $user_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ResultT',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation followUsingGETAsync
     *
     * to follow
     *
     * @param  string $api_key (required)
     * @param  string $auth_token (required)
     * @param  string $ct0 (required)
     * @param  string $screen_name (optional)
     * @param  string $user_id (optional, default to 1574242047661207552)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function followUsingGETAsync($api_key, $auth_token, $ct0, $screen_name = null, $user_id = '1574242047661207552')
    {
        return $this->followUsingGETAsyncWithHttpInfo($api_key, $auth_token, $ct0, $screen_name, $user_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation followUsingGETAsyncWithHttpInfo
     *
     * to follow
     *
     * @param  string $api_key (required)
     * @param  string $auth_token (required)
     * @param  string $ct0 (required)
     * @param  string $screen_name (optional)
     * @param  string $user_id (optional, default to 1574242047661207552)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function followUsingGETAsyncWithHttpInfo($api_key, $auth_token, $ct0, $screen_name = null, $user_id = '1574242047661207552')
    {
        $returnType = '\Swagger\Client\Model\ResultT';
        $request = $this->followUsingGETRequest($api_key, $auth_token, $ct0, $screen_name, $user_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'followUsingGET'
     *
     * @param  string $api_key (required)
     * @param  string $auth_token (required)
     * @param  string $ct0 (required)
     * @param  string $screen_name (optional)
     * @param  string $user_id (optional, default to 1574242047661207552)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function followUsingGETRequest($api_key, $auth_token, $ct0, $screen_name = null, $user_id = '1574242047661207552')
    {
        // verify the required parameter 'api_key' is set
        if ($api_key === null || (is_array($api_key) && count($api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_key when calling followUsingGET'
            );
        }
        // verify the required parameter 'auth_token' is set
        if ($auth_token === null || (is_array($auth_token) && count($auth_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $auth_token when calling followUsingGET'
            );
        }
        // verify the required parameter 'ct0' is set
        if ($ct0 === null || (is_array($ct0) && count($ct0) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ct0 when calling followUsingGET'
            );
        }

        $resourcePath = '/base/apitools/follow';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($api_key !== null) {
            $queryParams['apiKey'] = ObjectSerializer::toQueryValue($api_key);
        }
        // query params
        if ($auth_token !== null) {
            $queryParams['auth_token'] = ObjectSerializer::toQueryValue($auth_token);
        }
        // query params
        if ($ct0 !== null) {
            $queryParams['ct0'] = ObjectSerializer::toQueryValue($ct0);
        }
        // query params
        if ($screen_name !== null) {
            $queryParams['screenName'] = ObjectSerializer::toQueryValue($screen_name);
        }
        // query params
        if ($user_id !== null) {
            $queryParams['userId'] = ObjectSerializer::toQueryValue($user_id);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation followUsingPOST
     *
     * to follow
     *
     * @param  string $api_key api_key (required)
     * @param  string $auth_token auth_token (required)
     * @param  string $ct0 ct0 (required)
     * @param  string $screen_name screen_name (optional)
     * @param  string $user_id user_id (optional, default to 1574242047661207552)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ResultT
     */
    public function followUsingPOST($api_key, $auth_token, $ct0, $screen_name = null, $user_id = '1574242047661207552')
    {
        list($response) = $this->followUsingPOSTWithHttpInfo($api_key, $auth_token, $ct0, $screen_name, $user_id);
        return $response;
    }

    /**
     * Operation followUsingPOSTWithHttpInfo
     *
     * to follow
     *
     * @param  string $api_key (required)
     * @param  string $auth_token (required)
     * @param  string $ct0 (required)
     * @param  string $screen_name (optional)
     * @param  string $user_id (optional, default to 1574242047661207552)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ResultT, HTTP status code, HTTP response headers (array of strings)
     */
    public function followUsingPOSTWithHttpInfo($api_key, $auth_token, $ct0, $screen_name = null, $user_id = '1574242047661207552')
    {
        $returnType = '\Swagger\Client\Model\ResultT';
        $request = $this->followUsingPOSTRequest($api_key, $auth_token, $ct0, $screen_name, $user_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ResultT',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation followUsingPOSTAsync
     *
     * to follow
     *
     * @param  string $api_key (required)
     * @param  string $auth_token (required)
     * @param  string $ct0 (required)
     * @param  string $screen_name (optional)
     * @param  string $user_id (optional, default to 1574242047661207552)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function followUsingPOSTAsync($api_key, $auth_token, $ct0, $screen_name = null, $user_id = '1574242047661207552')
    {
        return $this->followUsingPOSTAsyncWithHttpInfo($api_key, $auth_token, $ct0, $screen_name, $user_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation followUsingPOSTAsyncWithHttpInfo
     *
     * to follow
     *
     * @param  string $api_key (required)
     * @param  string $auth_token (required)
     * @param  string $ct0 (required)
     * @param  string $screen_name (optional)
     * @param  string $user_id (optional, default to 1574242047661207552)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function followUsingPOSTAsyncWithHttpInfo($api_key, $auth_token, $ct0, $screen_name = null, $user_id = '1574242047661207552')
    {
        $returnType = '\Swagger\Client\Model\ResultT';
        $request = $this->followUsingPOSTRequest($api_key, $auth_token, $ct0, $screen_name, $user_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'followUsingPOST'
     *
     * @param  string $api_key (required)
     * @param  string $auth_token (required)
     * @param  string $ct0 (required)
     * @param  string $screen_name (optional)
     * @param  string $user_id (optional, default to 1574242047661207552)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function followUsingPOSTRequest($api_key, $auth_token, $ct0, $screen_name = null, $user_id = '1574242047661207552')
    {
        // verify the required parameter 'api_key' is set
        if ($api_key === null || (is_array($api_key) && count($api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_key when calling followUsingPOST'
            );
        }
        // verify the required parameter 'auth_token' is set
        if ($auth_token === null || (is_array($auth_token) && count($auth_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $auth_token when calling followUsingPOST'
            );
        }
        // verify the required parameter 'ct0' is set
        if ($ct0 === null || (is_array($ct0) && count($ct0) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ct0 when calling followUsingPOST'
            );
        }

        $resourcePath = '/base/apitools/follow';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($api_key !== null) {
            $queryParams['apiKey'] = ObjectSerializer::toQueryValue($api_key);
        }
        // query params
        if ($auth_token !== null) {
            $queryParams['auth_token'] = ObjectSerializer::toQueryValue($auth_token);
        }
        // query params
        if ($ct0 !== null) {
            $queryParams['ct0'] = ObjectSerializer::toQueryValue($ct0);
        }
        // query params
        if ($screen_name !== null) {
            $queryParams['screenName'] = ObjectSerializer::toQueryValue($screen_name);
        }
        // query params
        if ($user_id !== null) {
            $queryParams['userId'] = ObjectSerializer::toQueryValue($user_id);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation followersIdsUsingGET
     *
     * Get Followers Ids
     *
     * @param  string $api_key api_key (required)
     * @param  string $cursor cursor (optional, default to -1)
     * @param  string $screen_name screen_name (optional, default to elonmusk)
     * @param  string $user_id user_id (optional, default to 1574242047661207552)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ResultT
     */
    public function followersIdsUsingGET($api_key, $cursor = '-1', $screen_name = 'elonmusk', $user_id = '1574242047661207552')
    {
        list($response) = $this->followersIdsUsingGETWithHttpInfo($api_key, $cursor, $screen_name, $user_id);
        return $response;
    }

    /**
     * Operation followersIdsUsingGETWithHttpInfo
     *
     * Get Followers Ids
     *
     * @param  string $api_key (required)
     * @param  string $cursor (optional, default to -1)
     * @param  string $screen_name (optional, default to elonmusk)
     * @param  string $user_id (optional, default to 1574242047661207552)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ResultT, HTTP status code, HTTP response headers (array of strings)
     */
    public function followersIdsUsingGETWithHttpInfo($api_key, $cursor = '-1', $screen_name = 'elonmusk', $user_id = '1574242047661207552')
    {
        $returnType = '\Swagger\Client\Model\ResultT';
        $request = $this->followersIdsUsingGETRequest($api_key, $cursor, $screen_name, $user_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ResultT',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation followersIdsUsingGETAsync
     *
     * Get Followers Ids
     *
     * @param  string $api_key (required)
     * @param  string $cursor (optional, default to -1)
     * @param  string $screen_name (optional, default to elonmusk)
     * @param  string $user_id (optional, default to 1574242047661207552)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function followersIdsUsingGETAsync($api_key, $cursor = '-1', $screen_name = 'elonmusk', $user_id = '1574242047661207552')
    {
        return $this->followersIdsUsingGETAsyncWithHttpInfo($api_key, $cursor, $screen_name, $user_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation followersIdsUsingGETAsyncWithHttpInfo
     *
     * Get Followers Ids
     *
     * @param  string $api_key (required)
     * @param  string $cursor (optional, default to -1)
     * @param  string $screen_name (optional, default to elonmusk)
     * @param  string $user_id (optional, default to 1574242047661207552)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function followersIdsUsingGETAsyncWithHttpInfo($api_key, $cursor = '-1', $screen_name = 'elonmusk', $user_id = '1574242047661207552')
    {
        $returnType = '\Swagger\Client\Model\ResultT';
        $request = $this->followersIdsUsingGETRequest($api_key, $cursor, $screen_name, $user_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'followersIdsUsingGET'
     *
     * @param  string $api_key (required)
     * @param  string $cursor (optional, default to -1)
     * @param  string $screen_name (optional, default to elonmusk)
     * @param  string $user_id (optional, default to 1574242047661207552)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function followersIdsUsingGETRequest($api_key, $cursor = '-1', $screen_name = 'elonmusk', $user_id = '1574242047661207552')
    {
        // verify the required parameter 'api_key' is set
        if ($api_key === null || (is_array($api_key) && count($api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_key when calling followersIdsUsingGET'
            );
        }

        $resourcePath = '/base/apitools/followersIds';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($api_key !== null) {
            $queryParams['apiKey'] = ObjectSerializer::toQueryValue($api_key);
        }
        // query params
        if ($cursor !== null) {
            $queryParams['cursor'] = ObjectSerializer::toQueryValue($cursor);
        }
        // query params
        if ($screen_name !== null) {
            $queryParams['screenName'] = ObjectSerializer::toQueryValue($screen_name);
        }
        // query params
        if ($user_id !== null) {
            $queryParams['userId'] = ObjectSerializer::toQueryValue($user_id);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation followersIdsUsingPOST
     *
     * Get Followers Ids
     *
     * @param  string $api_key api_key (required)
     * @param  string $cursor cursor (optional, default to -1)
     * @param  string $screen_name screen_name (optional, default to elonmusk)
     * @param  string $user_id user_id (optional, default to 1574242047661207552)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ResultT
     */
    public function followersIdsUsingPOST($api_key, $cursor = '-1', $screen_name = 'elonmusk', $user_id = '1574242047661207552')
    {
        list($response) = $this->followersIdsUsingPOSTWithHttpInfo($api_key, $cursor, $screen_name, $user_id);
        return $response;
    }

    /**
     * Operation followersIdsUsingPOSTWithHttpInfo
     *
     * Get Followers Ids
     *
     * @param  string $api_key (required)
     * @param  string $cursor (optional, default to -1)
     * @param  string $screen_name (optional, default to elonmusk)
     * @param  string $user_id (optional, default to 1574242047661207552)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ResultT, HTTP status code, HTTP response headers (array of strings)
     */
    public function followersIdsUsingPOSTWithHttpInfo($api_key, $cursor = '-1', $screen_name = 'elonmusk', $user_id = '1574242047661207552')
    {
        $returnType = '\Swagger\Client\Model\ResultT';
        $request = $this->followersIdsUsingPOSTRequest($api_key, $cursor, $screen_name, $user_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ResultT',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation followersIdsUsingPOSTAsync
     *
     * Get Followers Ids
     *
     * @param  string $api_key (required)
     * @param  string $cursor (optional, default to -1)
     * @param  string $screen_name (optional, default to elonmusk)
     * @param  string $user_id (optional, default to 1574242047661207552)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function followersIdsUsingPOSTAsync($api_key, $cursor = '-1', $screen_name = 'elonmusk', $user_id = '1574242047661207552')
    {
        return $this->followersIdsUsingPOSTAsyncWithHttpInfo($api_key, $cursor, $screen_name, $user_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation followersIdsUsingPOSTAsyncWithHttpInfo
     *
     * Get Followers Ids
     *
     * @param  string $api_key (required)
     * @param  string $cursor (optional, default to -1)
     * @param  string $screen_name (optional, default to elonmusk)
     * @param  string $user_id (optional, default to 1574242047661207552)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function followersIdsUsingPOSTAsyncWithHttpInfo($api_key, $cursor = '-1', $screen_name = 'elonmusk', $user_id = '1574242047661207552')
    {
        $returnType = '\Swagger\Client\Model\ResultT';
        $request = $this->followersIdsUsingPOSTRequest($api_key, $cursor, $screen_name, $user_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'followersIdsUsingPOST'
     *
     * @param  string $api_key (required)
     * @param  string $cursor (optional, default to -1)
     * @param  string $screen_name (optional, default to elonmusk)
     * @param  string $user_id (optional, default to 1574242047661207552)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function followersIdsUsingPOSTRequest($api_key, $cursor = '-1', $screen_name = 'elonmusk', $user_id = '1574242047661207552')
    {
        // verify the required parameter 'api_key' is set
        if ($api_key === null || (is_array($api_key) && count($api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_key when calling followersIdsUsingPOST'
            );
        }

        $resourcePath = '/base/apitools/followersIds';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($api_key !== null) {
            $queryParams['apiKey'] = ObjectSerializer::toQueryValue($api_key);
        }
        // query params
        if ($cursor !== null) {
            $queryParams['cursor'] = ObjectSerializer::toQueryValue($cursor);
        }
        // query params
        if ($screen_name !== null) {
            $queryParams['screenName'] = ObjectSerializer::toQueryValue($screen_name);
        }
        // query params
        if ($user_id !== null) {
            $queryParams['userId'] = ObjectSerializer::toQueryValue($user_id);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation followersListUsingGET
     *
     * Get Followers User Collection
     *
     * @param  string $api_key api_key (required)
     * @param  string $cursor cursor (optional, default to -1)
     * @param  string $screen_name screen_name (optional, default to elonmusk)
     * @param  string $user_id user_id (optional, default to 1574242047661207552)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ResultT
     */
    public function followersListUsingGET($api_key, $cursor = '-1', $screen_name = 'elonmusk', $user_id = '1574242047661207552')
    {
        list($response) = $this->followersListUsingGETWithHttpInfo($api_key, $cursor, $screen_name, $user_id);
        return $response;
    }

    /**
     * Operation followersListUsingGETWithHttpInfo
     *
     * Get Followers User Collection
     *
     * @param  string $api_key (required)
     * @param  string $cursor (optional, default to -1)
     * @param  string $screen_name (optional, default to elonmusk)
     * @param  string $user_id (optional, default to 1574242047661207552)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ResultT, HTTP status code, HTTP response headers (array of strings)
     */
    public function followersListUsingGETWithHttpInfo($api_key, $cursor = '-1', $screen_name = 'elonmusk', $user_id = '1574242047661207552')
    {
        $returnType = '\Swagger\Client\Model\ResultT';
        $request = $this->followersListUsingGETRequest($api_key, $cursor, $screen_name, $user_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ResultT',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation followersListUsingGETAsync
     *
     * Get Followers User Collection
     *
     * @param  string $api_key (required)
     * @param  string $cursor (optional, default to -1)
     * @param  string $screen_name (optional, default to elonmusk)
     * @param  string $user_id (optional, default to 1574242047661207552)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function followersListUsingGETAsync($api_key, $cursor = '-1', $screen_name = 'elonmusk', $user_id = '1574242047661207552')
    {
        return $this->followersListUsingGETAsyncWithHttpInfo($api_key, $cursor, $screen_name, $user_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation followersListUsingGETAsyncWithHttpInfo
     *
     * Get Followers User Collection
     *
     * @param  string $api_key (required)
     * @param  string $cursor (optional, default to -1)
     * @param  string $screen_name (optional, default to elonmusk)
     * @param  string $user_id (optional, default to 1574242047661207552)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function followersListUsingGETAsyncWithHttpInfo($api_key, $cursor = '-1', $screen_name = 'elonmusk', $user_id = '1574242047661207552')
    {
        $returnType = '\Swagger\Client\Model\ResultT';
        $request = $this->followersListUsingGETRequest($api_key, $cursor, $screen_name, $user_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'followersListUsingGET'
     *
     * @param  string $api_key (required)
     * @param  string $cursor (optional, default to -1)
     * @param  string $screen_name (optional, default to elonmusk)
     * @param  string $user_id (optional, default to 1574242047661207552)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function followersListUsingGETRequest($api_key, $cursor = '-1', $screen_name = 'elonmusk', $user_id = '1574242047661207552')
    {
        // verify the required parameter 'api_key' is set
        if ($api_key === null || (is_array($api_key) && count($api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_key when calling followersListUsingGET'
            );
        }

        $resourcePath = '/base/apitools/followersList';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($api_key !== null) {
            $queryParams['apiKey'] = ObjectSerializer::toQueryValue($api_key);
        }
        // query params
        if ($cursor !== null) {
            $queryParams['cursor'] = ObjectSerializer::toQueryValue($cursor);
        }
        // query params
        if ($screen_name !== null) {
            $queryParams['screenName'] = ObjectSerializer::toQueryValue($screen_name);
        }
        // query params
        if ($user_id !== null) {
            $queryParams['userId'] = ObjectSerializer::toQueryValue($user_id);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation followersListUsingPOST
     *
     * Get Followers User Collection
     *
     * @param  string $api_key api_key (required)
     * @param  string $cursor cursor (optional, default to -1)
     * @param  string $screen_name screen_name (optional, default to elonmusk)
     * @param  string $user_id user_id (optional, default to 1574242047661207552)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ResultT
     */
    public function followersListUsingPOST($api_key, $cursor = '-1', $screen_name = 'elonmusk', $user_id = '1574242047661207552')
    {
        list($response) = $this->followersListUsingPOSTWithHttpInfo($api_key, $cursor, $screen_name, $user_id);
        return $response;
    }

    /**
     * Operation followersListUsingPOSTWithHttpInfo
     *
     * Get Followers User Collection
     *
     * @param  string $api_key (required)
     * @param  string $cursor (optional, default to -1)
     * @param  string $screen_name (optional, default to elonmusk)
     * @param  string $user_id (optional, default to 1574242047661207552)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ResultT, HTTP status code, HTTP response headers (array of strings)
     */
    public function followersListUsingPOSTWithHttpInfo($api_key, $cursor = '-1', $screen_name = 'elonmusk', $user_id = '1574242047661207552')
    {
        $returnType = '\Swagger\Client\Model\ResultT';
        $request = $this->followersListUsingPOSTRequest($api_key, $cursor, $screen_name, $user_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ResultT',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation followersListUsingPOSTAsync
     *
     * Get Followers User Collection
     *
     * @param  string $api_key (required)
     * @param  string $cursor (optional, default to -1)
     * @param  string $screen_name (optional, default to elonmusk)
     * @param  string $user_id (optional, default to 1574242047661207552)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function followersListUsingPOSTAsync($api_key, $cursor = '-1', $screen_name = 'elonmusk', $user_id = '1574242047661207552')
    {
        return $this->followersListUsingPOSTAsyncWithHttpInfo($api_key, $cursor, $screen_name, $user_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation followersListUsingPOSTAsyncWithHttpInfo
     *
     * Get Followers User Collection
     *
     * @param  string $api_key (required)
     * @param  string $cursor (optional, default to -1)
     * @param  string $screen_name (optional, default to elonmusk)
     * @param  string $user_id (optional, default to 1574242047661207552)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function followersListUsingPOSTAsyncWithHttpInfo($api_key, $cursor = '-1', $screen_name = 'elonmusk', $user_id = '1574242047661207552')
    {
        $returnType = '\Swagger\Client\Model\ResultT';
        $request = $this->followersListUsingPOSTRequest($api_key, $cursor, $screen_name, $user_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'followersListUsingPOST'
     *
     * @param  string $api_key (required)
     * @param  string $cursor (optional, default to -1)
     * @param  string $screen_name (optional, default to elonmusk)
     * @param  string $user_id (optional, default to 1574242047661207552)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function followersListUsingPOSTRequest($api_key, $cursor = '-1', $screen_name = 'elonmusk', $user_id = '1574242047661207552')
    {
        // verify the required parameter 'api_key' is set
        if ($api_key === null || (is_array($api_key) && count($api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_key when calling followersListUsingPOST'
            );
        }

        $resourcePath = '/base/apitools/followersList';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($api_key !== null) {
            $queryParams['apiKey'] = ObjectSerializer::toQueryValue($api_key);
        }
        // query params
        if ($cursor !== null) {
            $queryParams['cursor'] = ObjectSerializer::toQueryValue($cursor);
        }
        // query params
        if ($screen_name !== null) {
            $queryParams['screenName'] = ObjectSerializer::toQueryValue($screen_name);
        }
        // query params
        if ($user_id !== null) {
            $queryParams['userId'] = ObjectSerializer::toQueryValue($user_id);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation followersListV2UsingGET
     *
     * get followersList by V2
     *
     * @param  string $api_key api_key (required)
     * @param  string $user_id user_id (required)
     * @param  string $cursor cursor (optional, default to -1)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ResultT
     */
    public function followersListV2UsingGET($api_key, $user_id, $cursor = '-1')
    {
        list($response) = $this->followersListV2UsingGETWithHttpInfo($api_key, $user_id, $cursor);
        return $response;
    }

    /**
     * Operation followersListV2UsingGETWithHttpInfo
     *
     * get followersList by V2
     *
     * @param  string $api_key (required)
     * @param  string $user_id (required)
     * @param  string $cursor (optional, default to -1)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ResultT, HTTP status code, HTTP response headers (array of strings)
     */
    public function followersListV2UsingGETWithHttpInfo($api_key, $user_id, $cursor = '-1')
    {
        $returnType = '\Swagger\Client\Model\ResultT';
        $request = $this->followersListV2UsingGETRequest($api_key, $user_id, $cursor);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ResultT',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation followersListV2UsingGETAsync
     *
     * get followersList by V2
     *
     * @param  string $api_key (required)
     * @param  string $user_id (required)
     * @param  string $cursor (optional, default to -1)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function followersListV2UsingGETAsync($api_key, $user_id, $cursor = '-1')
    {
        return $this->followersListV2UsingGETAsyncWithHttpInfo($api_key, $user_id, $cursor)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation followersListV2UsingGETAsyncWithHttpInfo
     *
     * get followersList by V2
     *
     * @param  string $api_key (required)
     * @param  string $user_id (required)
     * @param  string $cursor (optional, default to -1)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function followersListV2UsingGETAsyncWithHttpInfo($api_key, $user_id, $cursor = '-1')
    {
        $returnType = '\Swagger\Client\Model\ResultT';
        $request = $this->followersListV2UsingGETRequest($api_key, $user_id, $cursor);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'followersListV2UsingGET'
     *
     * @param  string $api_key (required)
     * @param  string $user_id (required)
     * @param  string $cursor (optional, default to -1)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function followersListV2UsingGETRequest($api_key, $user_id, $cursor = '-1')
    {
        // verify the required parameter 'api_key' is set
        if ($api_key === null || (is_array($api_key) && count($api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_key when calling followersListV2UsingGET'
            );
        }
        // verify the required parameter 'user_id' is set
        if ($user_id === null || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling followersListV2UsingGET'
            );
        }

        $resourcePath = '/base/apitools/followersListV2';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($api_key !== null) {
            $queryParams['apiKey'] = ObjectSerializer::toQueryValue($api_key);
        }
        // query params
        if ($cursor !== null) {
            $queryParams['cursor'] = ObjectSerializer::toQueryValue($cursor);
        }
        // query params
        if ($user_id !== null) {
            $queryParams['userId'] = ObjectSerializer::toQueryValue($user_id);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation followersListV2UsingPOST
     *
     * get followersList by V2
     *
     * @param  string $api_key api_key (required)
     * @param  string $user_id user_id (required)
     * @param  string $cursor cursor (optional, default to -1)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ResultT
     */
    public function followersListV2UsingPOST($api_key, $user_id, $cursor = '-1')
    {
        list($response) = $this->followersListV2UsingPOSTWithHttpInfo($api_key, $user_id, $cursor);
        return $response;
    }

    /**
     * Operation followersListV2UsingPOSTWithHttpInfo
     *
     * get followersList by V2
     *
     * @param  string $api_key (required)
     * @param  string $user_id (required)
     * @param  string $cursor (optional, default to -1)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ResultT, HTTP status code, HTTP response headers (array of strings)
     */
    public function followersListV2UsingPOSTWithHttpInfo($api_key, $user_id, $cursor = '-1')
    {
        $returnType = '\Swagger\Client\Model\ResultT';
        $request = $this->followersListV2UsingPOSTRequest($api_key, $user_id, $cursor);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ResultT',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation followersListV2UsingPOSTAsync
     *
     * get followersList by V2
     *
     * @param  string $api_key (required)
     * @param  string $user_id (required)
     * @param  string $cursor (optional, default to -1)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function followersListV2UsingPOSTAsync($api_key, $user_id, $cursor = '-1')
    {
        return $this->followersListV2UsingPOSTAsyncWithHttpInfo($api_key, $user_id, $cursor)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation followersListV2UsingPOSTAsyncWithHttpInfo
     *
     * get followersList by V2
     *
     * @param  string $api_key (required)
     * @param  string $user_id (required)
     * @param  string $cursor (optional, default to -1)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function followersListV2UsingPOSTAsyncWithHttpInfo($api_key, $user_id, $cursor = '-1')
    {
        $returnType = '\Swagger\Client\Model\ResultT';
        $request = $this->followersListV2UsingPOSTRequest($api_key, $user_id, $cursor);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'followersListV2UsingPOST'
     *
     * @param  string $api_key (required)
     * @param  string $user_id (required)
     * @param  string $cursor (optional, default to -1)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function followersListV2UsingPOSTRequest($api_key, $user_id, $cursor = '-1')
    {
        // verify the required parameter 'api_key' is set
        if ($api_key === null || (is_array($api_key) && count($api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_key when calling followersListV2UsingPOST'
            );
        }
        // verify the required parameter 'user_id' is set
        if ($user_id === null || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling followersListV2UsingPOST'
            );
        }

        $resourcePath = '/base/apitools/followersListV2';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($api_key !== null) {
            $queryParams['apiKey'] = ObjectSerializer::toQueryValue($api_key);
        }
        // query params
        if ($cursor !== null) {
            $queryParams['cursor'] = ObjectSerializer::toQueryValue($cursor);
        }
        // query params
        if ($user_id !== null) {
            $queryParams['userId'] = ObjectSerializer::toQueryValue($user_id);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation followingsIdsUsingGET
     *
     * Get Followings Ids
     *
     * @param  string $api_key api_key (required)
     * @param  string $cursor cursor (optional, default to -1)
     * @param  string $screen_name screen_name (optional, default to elonmusk)
     * @param  string $user_id user_id (optional, default to 1574242047661207552)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ResultT
     */
    public function followingsIdsUsingGET($api_key, $cursor = '-1', $screen_name = 'elonmusk', $user_id = '1574242047661207552')
    {
        list($response) = $this->followingsIdsUsingGETWithHttpInfo($api_key, $cursor, $screen_name, $user_id);
        return $response;
    }

    /**
     * Operation followingsIdsUsingGETWithHttpInfo
     *
     * Get Followings Ids
     *
     * @param  string $api_key (required)
     * @param  string $cursor (optional, default to -1)
     * @param  string $screen_name (optional, default to elonmusk)
     * @param  string $user_id (optional, default to 1574242047661207552)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ResultT, HTTP status code, HTTP response headers (array of strings)
     */
    public function followingsIdsUsingGETWithHttpInfo($api_key, $cursor = '-1', $screen_name = 'elonmusk', $user_id = '1574242047661207552')
    {
        $returnType = '\Swagger\Client\Model\ResultT';
        $request = $this->followingsIdsUsingGETRequest($api_key, $cursor, $screen_name, $user_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ResultT',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation followingsIdsUsingGETAsync
     *
     * Get Followings Ids
     *
     * @param  string $api_key (required)
     * @param  string $cursor (optional, default to -1)
     * @param  string $screen_name (optional, default to elonmusk)
     * @param  string $user_id (optional, default to 1574242047661207552)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function followingsIdsUsingGETAsync($api_key, $cursor = '-1', $screen_name = 'elonmusk', $user_id = '1574242047661207552')
    {
        return $this->followingsIdsUsingGETAsyncWithHttpInfo($api_key, $cursor, $screen_name, $user_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation followingsIdsUsingGETAsyncWithHttpInfo
     *
     * Get Followings Ids
     *
     * @param  string $api_key (required)
     * @param  string $cursor (optional, default to -1)
     * @param  string $screen_name (optional, default to elonmusk)
     * @param  string $user_id (optional, default to 1574242047661207552)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function followingsIdsUsingGETAsyncWithHttpInfo($api_key, $cursor = '-1', $screen_name = 'elonmusk', $user_id = '1574242047661207552')
    {
        $returnType = '\Swagger\Client\Model\ResultT';
        $request = $this->followingsIdsUsingGETRequest($api_key, $cursor, $screen_name, $user_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'followingsIdsUsingGET'
     *
     * @param  string $api_key (required)
     * @param  string $cursor (optional, default to -1)
     * @param  string $screen_name (optional, default to elonmusk)
     * @param  string $user_id (optional, default to 1574242047661207552)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function followingsIdsUsingGETRequest($api_key, $cursor = '-1', $screen_name = 'elonmusk', $user_id = '1574242047661207552')
    {
        // verify the required parameter 'api_key' is set
        if ($api_key === null || (is_array($api_key) && count($api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_key when calling followingsIdsUsingGET'
            );
        }

        $resourcePath = '/base/apitools/followingsIds';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($api_key !== null) {
            $queryParams['apiKey'] = ObjectSerializer::toQueryValue($api_key);
        }
        // query params
        if ($cursor !== null) {
            $queryParams['cursor'] = ObjectSerializer::toQueryValue($cursor);
        }
        // query params
        if ($screen_name !== null) {
            $queryParams['screenName'] = ObjectSerializer::toQueryValue($screen_name);
        }
        // query params
        if ($user_id !== null) {
            $queryParams['userId'] = ObjectSerializer::toQueryValue($user_id);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation followingsIdsUsingPOST
     *
     * Get Followings Ids
     *
     * @param  string $api_key api_key (required)
     * @param  string $cursor cursor (optional, default to -1)
     * @param  string $screen_name screen_name (optional, default to elonmusk)
     * @param  string $user_id user_id (optional, default to 1574242047661207552)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ResultT
     */
    public function followingsIdsUsingPOST($api_key, $cursor = '-1', $screen_name = 'elonmusk', $user_id = '1574242047661207552')
    {
        list($response) = $this->followingsIdsUsingPOSTWithHttpInfo($api_key, $cursor, $screen_name, $user_id);
        return $response;
    }

    /**
     * Operation followingsIdsUsingPOSTWithHttpInfo
     *
     * Get Followings Ids
     *
     * @param  string $api_key (required)
     * @param  string $cursor (optional, default to -1)
     * @param  string $screen_name (optional, default to elonmusk)
     * @param  string $user_id (optional, default to 1574242047661207552)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ResultT, HTTP status code, HTTP response headers (array of strings)
     */
    public function followingsIdsUsingPOSTWithHttpInfo($api_key, $cursor = '-1', $screen_name = 'elonmusk', $user_id = '1574242047661207552')
    {
        $returnType = '\Swagger\Client\Model\ResultT';
        $request = $this->followingsIdsUsingPOSTRequest($api_key, $cursor, $screen_name, $user_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ResultT',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation followingsIdsUsingPOSTAsync
     *
     * Get Followings Ids
     *
     * @param  string $api_key (required)
     * @param  string $cursor (optional, default to -1)
     * @param  string $screen_name (optional, default to elonmusk)
     * @param  string $user_id (optional, default to 1574242047661207552)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function followingsIdsUsingPOSTAsync($api_key, $cursor = '-1', $screen_name = 'elonmusk', $user_id = '1574242047661207552')
    {
        return $this->followingsIdsUsingPOSTAsyncWithHttpInfo($api_key, $cursor, $screen_name, $user_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation followingsIdsUsingPOSTAsyncWithHttpInfo
     *
     * Get Followings Ids
     *
     * @param  string $api_key (required)
     * @param  string $cursor (optional, default to -1)
     * @param  string $screen_name (optional, default to elonmusk)
     * @param  string $user_id (optional, default to 1574242047661207552)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function followingsIdsUsingPOSTAsyncWithHttpInfo($api_key, $cursor = '-1', $screen_name = 'elonmusk', $user_id = '1574242047661207552')
    {
        $returnType = '\Swagger\Client\Model\ResultT';
        $request = $this->followingsIdsUsingPOSTRequest($api_key, $cursor, $screen_name, $user_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'followingsIdsUsingPOST'
     *
     * @param  string $api_key (required)
     * @param  string $cursor (optional, default to -1)
     * @param  string $screen_name (optional, default to elonmusk)
     * @param  string $user_id (optional, default to 1574242047661207552)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function followingsIdsUsingPOSTRequest($api_key, $cursor = '-1', $screen_name = 'elonmusk', $user_id = '1574242047661207552')
    {
        // verify the required parameter 'api_key' is set
        if ($api_key === null || (is_array($api_key) && count($api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_key when calling followingsIdsUsingPOST'
            );
        }

        $resourcePath = '/base/apitools/followingsIds';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($api_key !== null) {
            $queryParams['apiKey'] = ObjectSerializer::toQueryValue($api_key);
        }
        // query params
        if ($cursor !== null) {
            $queryParams['cursor'] = ObjectSerializer::toQueryValue($cursor);
        }
        // query params
        if ($screen_name !== null) {
            $queryParams['screenName'] = ObjectSerializer::toQueryValue($screen_name);
        }
        // query params
        if ($user_id !== null) {
            $queryParams['userId'] = ObjectSerializer::toQueryValue($user_id);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation followingsListUsingGET
     *
     * Get Followings User Collection
     *
     * @param  string $api_key api_key (required)
     * @param  string $cursor cursor (optional, default to -1)
     * @param  string $screen_name screen_name (optional, default to elonmusk)
     * @param  string $user_id user_id (optional, default to 1574242047661207552)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ResultT
     */
    public function followingsListUsingGET($api_key, $cursor = '-1', $screen_name = 'elonmusk', $user_id = '1574242047661207552')
    {
        list($response) = $this->followingsListUsingGETWithHttpInfo($api_key, $cursor, $screen_name, $user_id);
        return $response;
    }

    /**
     * Operation followingsListUsingGETWithHttpInfo
     *
     * Get Followings User Collection
     *
     * @param  string $api_key (required)
     * @param  string $cursor (optional, default to -1)
     * @param  string $screen_name (optional, default to elonmusk)
     * @param  string $user_id (optional, default to 1574242047661207552)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ResultT, HTTP status code, HTTP response headers (array of strings)
     */
    public function followingsListUsingGETWithHttpInfo($api_key, $cursor = '-1', $screen_name = 'elonmusk', $user_id = '1574242047661207552')
    {
        $returnType = '\Swagger\Client\Model\ResultT';
        $request = $this->followingsListUsingGETRequest($api_key, $cursor, $screen_name, $user_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ResultT',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation followingsListUsingGETAsync
     *
     * Get Followings User Collection
     *
     * @param  string $api_key (required)
     * @param  string $cursor (optional, default to -1)
     * @param  string $screen_name (optional, default to elonmusk)
     * @param  string $user_id (optional, default to 1574242047661207552)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function followingsListUsingGETAsync($api_key, $cursor = '-1', $screen_name = 'elonmusk', $user_id = '1574242047661207552')
    {
        return $this->followingsListUsingGETAsyncWithHttpInfo($api_key, $cursor, $screen_name, $user_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation followingsListUsingGETAsyncWithHttpInfo
     *
     * Get Followings User Collection
     *
     * @param  string $api_key (required)
     * @param  string $cursor (optional, default to -1)
     * @param  string $screen_name (optional, default to elonmusk)
     * @param  string $user_id (optional, default to 1574242047661207552)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function followingsListUsingGETAsyncWithHttpInfo($api_key, $cursor = '-1', $screen_name = 'elonmusk', $user_id = '1574242047661207552')
    {
        $returnType = '\Swagger\Client\Model\ResultT';
        $request = $this->followingsListUsingGETRequest($api_key, $cursor, $screen_name, $user_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'followingsListUsingGET'
     *
     * @param  string $api_key (required)
     * @param  string $cursor (optional, default to -1)
     * @param  string $screen_name (optional, default to elonmusk)
     * @param  string $user_id (optional, default to 1574242047661207552)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function followingsListUsingGETRequest($api_key, $cursor = '-1', $screen_name = 'elonmusk', $user_id = '1574242047661207552')
    {
        // verify the required parameter 'api_key' is set
        if ($api_key === null || (is_array($api_key) && count($api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_key when calling followingsListUsingGET'
            );
        }

        $resourcePath = '/base/apitools/followingsList';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($api_key !== null) {
            $queryParams['apiKey'] = ObjectSerializer::toQueryValue($api_key);
        }
        // query params
        if ($cursor !== null) {
            $queryParams['cursor'] = ObjectSerializer::toQueryValue($cursor);
        }
        // query params
        if ($screen_name !== null) {
            $queryParams['screenName'] = ObjectSerializer::toQueryValue($screen_name);
        }
        // query params
        if ($user_id !== null) {
            $queryParams['userId'] = ObjectSerializer::toQueryValue($user_id);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation followingsListUsingPOST
     *
     * Get Followings User Collection
     *
     * @param  string $api_key api_key (required)
     * @param  string $cursor cursor (optional, default to -1)
     * @param  string $screen_name screen_name (optional, default to elonmusk)
     * @param  string $user_id user_id (optional, default to 1574242047661207552)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ResultT
     */
    public function followingsListUsingPOST($api_key, $cursor = '-1', $screen_name = 'elonmusk', $user_id = '1574242047661207552')
    {
        list($response) = $this->followingsListUsingPOSTWithHttpInfo($api_key, $cursor, $screen_name, $user_id);
        return $response;
    }

    /**
     * Operation followingsListUsingPOSTWithHttpInfo
     *
     * Get Followings User Collection
     *
     * @param  string $api_key (required)
     * @param  string $cursor (optional, default to -1)
     * @param  string $screen_name (optional, default to elonmusk)
     * @param  string $user_id (optional, default to 1574242047661207552)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ResultT, HTTP status code, HTTP response headers (array of strings)
     */
    public function followingsListUsingPOSTWithHttpInfo($api_key, $cursor = '-1', $screen_name = 'elonmusk', $user_id = '1574242047661207552')
    {
        $returnType = '\Swagger\Client\Model\ResultT';
        $request = $this->followingsListUsingPOSTRequest($api_key, $cursor, $screen_name, $user_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ResultT',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation followingsListUsingPOSTAsync
     *
     * Get Followings User Collection
     *
     * @param  string $api_key (required)
     * @param  string $cursor (optional, default to -1)
     * @param  string $screen_name (optional, default to elonmusk)
     * @param  string $user_id (optional, default to 1574242047661207552)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function followingsListUsingPOSTAsync($api_key, $cursor = '-1', $screen_name = 'elonmusk', $user_id = '1574242047661207552')
    {
        return $this->followingsListUsingPOSTAsyncWithHttpInfo($api_key, $cursor, $screen_name, $user_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation followingsListUsingPOSTAsyncWithHttpInfo
     *
     * Get Followings User Collection
     *
     * @param  string $api_key (required)
     * @param  string $cursor (optional, default to -1)
     * @param  string $screen_name (optional, default to elonmusk)
     * @param  string $user_id (optional, default to 1574242047661207552)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function followingsListUsingPOSTAsyncWithHttpInfo($api_key, $cursor = '-1', $screen_name = 'elonmusk', $user_id = '1574242047661207552')
    {
        $returnType = '\Swagger\Client\Model\ResultT';
        $request = $this->followingsListUsingPOSTRequest($api_key, $cursor, $screen_name, $user_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'followingsListUsingPOST'
     *
     * @param  string $api_key (required)
     * @param  string $cursor (optional, default to -1)
     * @param  string $screen_name (optional, default to elonmusk)
     * @param  string $user_id (optional, default to 1574242047661207552)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function followingsListUsingPOSTRequest($api_key, $cursor = '-1', $screen_name = 'elonmusk', $user_id = '1574242047661207552')
    {
        // verify the required parameter 'api_key' is set
        if ($api_key === null || (is_array($api_key) && count($api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_key when calling followingsListUsingPOST'
            );
        }

        $resourcePath = '/base/apitools/followingsList';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($api_key !== null) {
            $queryParams['apiKey'] = ObjectSerializer::toQueryValue($api_key);
        }
        // query params
        if ($cursor !== null) {
            $queryParams['cursor'] = ObjectSerializer::toQueryValue($cursor);
        }
        // query params
        if ($screen_name !== null) {
            $queryParams['screenName'] = ObjectSerializer::toQueryValue($screen_name);
        }
        // query params
        if ($user_id !== null) {
            $queryParams['userId'] = ObjectSerializer::toQueryValue($user_id);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation followingsListV2UsingGET
     *
     * get followingsList by V2
     *
     * @param  string $api_key api_key (required)
     * @param  string $user_id user_id (required)
     * @param  string $cursor cursor (optional, default to -1)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ResultT
     */
    public function followingsListV2UsingGET($api_key, $user_id, $cursor = '-1')
    {
        list($response) = $this->followingsListV2UsingGETWithHttpInfo($api_key, $user_id, $cursor);
        return $response;
    }

    /**
     * Operation followingsListV2UsingGETWithHttpInfo
     *
     * get followingsList by V2
     *
     * @param  string $api_key (required)
     * @param  string $user_id (required)
     * @param  string $cursor (optional, default to -1)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ResultT, HTTP status code, HTTP response headers (array of strings)
     */
    public function followingsListV2UsingGETWithHttpInfo($api_key, $user_id, $cursor = '-1')
    {
        $returnType = '\Swagger\Client\Model\ResultT';
        $request = $this->followingsListV2UsingGETRequest($api_key, $user_id, $cursor);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ResultT',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation followingsListV2UsingGETAsync
     *
     * get followingsList by V2
     *
     * @param  string $api_key (required)
     * @param  string $user_id (required)
     * @param  string $cursor (optional, default to -1)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function followingsListV2UsingGETAsync($api_key, $user_id, $cursor = '-1')
    {
        return $this->followingsListV2UsingGETAsyncWithHttpInfo($api_key, $user_id, $cursor)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation followingsListV2UsingGETAsyncWithHttpInfo
     *
     * get followingsList by V2
     *
     * @param  string $api_key (required)
     * @param  string $user_id (required)
     * @param  string $cursor (optional, default to -1)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function followingsListV2UsingGETAsyncWithHttpInfo($api_key, $user_id, $cursor = '-1')
    {
        $returnType = '\Swagger\Client\Model\ResultT';
        $request = $this->followingsListV2UsingGETRequest($api_key, $user_id, $cursor);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'followingsListV2UsingGET'
     *
     * @param  string $api_key (required)
     * @param  string $user_id (required)
     * @param  string $cursor (optional, default to -1)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function followingsListV2UsingGETRequest($api_key, $user_id, $cursor = '-1')
    {
        // verify the required parameter 'api_key' is set
        if ($api_key === null || (is_array($api_key) && count($api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_key when calling followingsListV2UsingGET'
            );
        }
        // verify the required parameter 'user_id' is set
        if ($user_id === null || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling followingsListV2UsingGET'
            );
        }

        $resourcePath = '/base/apitools/followingsListV2';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($api_key !== null) {
            $queryParams['apiKey'] = ObjectSerializer::toQueryValue($api_key);
        }
        // query params
        if ($cursor !== null) {
            $queryParams['cursor'] = ObjectSerializer::toQueryValue($cursor);
        }
        // query params
        if ($user_id !== null) {
            $queryParams['userId'] = ObjectSerializer::toQueryValue($user_id);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation followingsListV2UsingPOST
     *
     * get followingsList by V2
     *
     * @param  string $api_key api_key (required)
     * @param  string $user_id user_id (required)
     * @param  string $cursor cursor (optional, default to -1)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ResultT
     */
    public function followingsListV2UsingPOST($api_key, $user_id, $cursor = '-1')
    {
        list($response) = $this->followingsListV2UsingPOSTWithHttpInfo($api_key, $user_id, $cursor);
        return $response;
    }

    /**
     * Operation followingsListV2UsingPOSTWithHttpInfo
     *
     * get followingsList by V2
     *
     * @param  string $api_key (required)
     * @param  string $user_id (required)
     * @param  string $cursor (optional, default to -1)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ResultT, HTTP status code, HTTP response headers (array of strings)
     */
    public function followingsListV2UsingPOSTWithHttpInfo($api_key, $user_id, $cursor = '-1')
    {
        $returnType = '\Swagger\Client\Model\ResultT';
        $request = $this->followingsListV2UsingPOSTRequest($api_key, $user_id, $cursor);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ResultT',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation followingsListV2UsingPOSTAsync
     *
     * get followingsList by V2
     *
     * @param  string $api_key (required)
     * @param  string $user_id (required)
     * @param  string $cursor (optional, default to -1)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function followingsListV2UsingPOSTAsync($api_key, $user_id, $cursor = '-1')
    {
        return $this->followingsListV2UsingPOSTAsyncWithHttpInfo($api_key, $user_id, $cursor)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation followingsListV2UsingPOSTAsyncWithHttpInfo
     *
     * get followingsList by V2
     *
     * @param  string $api_key (required)
     * @param  string $user_id (required)
     * @param  string $cursor (optional, default to -1)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function followingsListV2UsingPOSTAsyncWithHttpInfo($api_key, $user_id, $cursor = '-1')
    {
        $returnType = '\Swagger\Client\Model\ResultT';
        $request = $this->followingsListV2UsingPOSTRequest($api_key, $user_id, $cursor);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'followingsListV2UsingPOST'
     *
     * @param  string $api_key (required)
     * @param  string $user_id (required)
     * @param  string $cursor (optional, default to -1)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function followingsListV2UsingPOSTRequest($api_key, $user_id, $cursor = '-1')
    {
        // verify the required parameter 'api_key' is set
        if ($api_key === null || (is_array($api_key) && count($api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_key when calling followingsListV2UsingPOST'
            );
        }
        // verify the required parameter 'user_id' is set
        if ($user_id === null || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling followingsListV2UsingPOST'
            );
        }

        $resourcePath = '/base/apitools/followingsListV2';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($api_key !== null) {
            $queryParams['apiKey'] = ObjectSerializer::toQueryValue($api_key);
        }
        // query params
        if ($cursor !== null) {
            $queryParams['cursor'] = ObjectSerializer::toQueryValue($cursor);
        }
        // query params
        if ($user_id !== null) {
            $queryParams['userId'] = ObjectSerializer::toQueryValue($user_id);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getFriendshipsShowUsingGET
     *
     * Get relationship information between two users
     *
     * @param  string $api_key api_key (required)
     * @param  string $source_id source_id (optional, default to 1574242047661207552)
     * @param  string $source_screen_name source_screen_name (optional)
     * @param  string $target_id target_id (optional, default to 1620357967962058752)
     * @param  string $target_screen_name target_screen_name (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ResultT
     */
    public function getFriendshipsShowUsingGET($api_key, $source_id = '1574242047661207552', $source_screen_name = null, $target_id = '1620357967962058752', $target_screen_name = null)
    {
        list($response) = $this->getFriendshipsShowUsingGETWithHttpInfo($api_key, $source_id, $source_screen_name, $target_id, $target_screen_name);
        return $response;
    }

    /**
     * Operation getFriendshipsShowUsingGETWithHttpInfo
     *
     * Get relationship information between two users
     *
     * @param  string $api_key (required)
     * @param  string $source_id (optional, default to 1574242047661207552)
     * @param  string $source_screen_name (optional)
     * @param  string $target_id (optional, default to 1620357967962058752)
     * @param  string $target_screen_name (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ResultT, HTTP status code, HTTP response headers (array of strings)
     */
    public function getFriendshipsShowUsingGETWithHttpInfo($api_key, $source_id = '1574242047661207552', $source_screen_name = null, $target_id = '1620357967962058752', $target_screen_name = null)
    {
        $returnType = '\Swagger\Client\Model\ResultT';
        $request = $this->getFriendshipsShowUsingGETRequest($api_key, $source_id, $source_screen_name, $target_id, $target_screen_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ResultT',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getFriendshipsShowUsingGETAsync
     *
     * Get relationship information between two users
     *
     * @param  string $api_key (required)
     * @param  string $source_id (optional, default to 1574242047661207552)
     * @param  string $source_screen_name (optional)
     * @param  string $target_id (optional, default to 1620357967962058752)
     * @param  string $target_screen_name (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getFriendshipsShowUsingGETAsync($api_key, $source_id = '1574242047661207552', $source_screen_name = null, $target_id = '1620357967962058752', $target_screen_name = null)
    {
        return $this->getFriendshipsShowUsingGETAsyncWithHttpInfo($api_key, $source_id, $source_screen_name, $target_id, $target_screen_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getFriendshipsShowUsingGETAsyncWithHttpInfo
     *
     * Get relationship information between two users
     *
     * @param  string $api_key (required)
     * @param  string $source_id (optional, default to 1574242047661207552)
     * @param  string $source_screen_name (optional)
     * @param  string $target_id (optional, default to 1620357967962058752)
     * @param  string $target_screen_name (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getFriendshipsShowUsingGETAsyncWithHttpInfo($api_key, $source_id = '1574242047661207552', $source_screen_name = null, $target_id = '1620357967962058752', $target_screen_name = null)
    {
        $returnType = '\Swagger\Client\Model\ResultT';
        $request = $this->getFriendshipsShowUsingGETRequest($api_key, $source_id, $source_screen_name, $target_id, $target_screen_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getFriendshipsShowUsingGET'
     *
     * @param  string $api_key (required)
     * @param  string $source_id (optional, default to 1574242047661207552)
     * @param  string $source_screen_name (optional)
     * @param  string $target_id (optional, default to 1620357967962058752)
     * @param  string $target_screen_name (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getFriendshipsShowUsingGETRequest($api_key, $source_id = '1574242047661207552', $source_screen_name = null, $target_id = '1620357967962058752', $target_screen_name = null)
    {
        // verify the required parameter 'api_key' is set
        if ($api_key === null || (is_array($api_key) && count($api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_key when calling getFriendshipsShowUsingGET'
            );
        }

        $resourcePath = '/base/apitools/friendshipsShow';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($api_key !== null) {
            $queryParams['apiKey'] = ObjectSerializer::toQueryValue($api_key);
        }
        // query params
        if ($source_id !== null) {
            $queryParams['source_id'] = ObjectSerializer::toQueryValue($source_id);
        }
        // query params
        if ($source_screen_name !== null) {
            $queryParams['source_screen_name'] = ObjectSerializer::toQueryValue($source_screen_name);
        }
        // query params
        if ($target_id !== null) {
            $queryParams['target_id'] = ObjectSerializer::toQueryValue($target_id);
        }
        // query params
        if ($target_screen_name !== null) {
            $queryParams['target_screen_name'] = ObjectSerializer::toQueryValue($target_screen_name);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getFriendshipsShowUsingPOST
     *
     * Get relationship information between two users
     *
     * @param  string $api_key api_key (required)
     * @param  string $source_id source_id (optional, default to 1574242047661207552)
     * @param  string $source_screen_name source_screen_name (optional)
     * @param  string $target_id target_id (optional, default to 1620357967962058752)
     * @param  string $target_screen_name target_screen_name (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ResultT
     */
    public function getFriendshipsShowUsingPOST($api_key, $source_id = '1574242047661207552', $source_screen_name = null, $target_id = '1620357967962058752', $target_screen_name = null)
    {
        list($response) = $this->getFriendshipsShowUsingPOSTWithHttpInfo($api_key, $source_id, $source_screen_name, $target_id, $target_screen_name);
        return $response;
    }

    /**
     * Operation getFriendshipsShowUsingPOSTWithHttpInfo
     *
     * Get relationship information between two users
     *
     * @param  string $api_key (required)
     * @param  string $source_id (optional, default to 1574242047661207552)
     * @param  string $source_screen_name (optional)
     * @param  string $target_id (optional, default to 1620357967962058752)
     * @param  string $target_screen_name (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ResultT, HTTP status code, HTTP response headers (array of strings)
     */
    public function getFriendshipsShowUsingPOSTWithHttpInfo($api_key, $source_id = '1574242047661207552', $source_screen_name = null, $target_id = '1620357967962058752', $target_screen_name = null)
    {
        $returnType = '\Swagger\Client\Model\ResultT';
        $request = $this->getFriendshipsShowUsingPOSTRequest($api_key, $source_id, $source_screen_name, $target_id, $target_screen_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ResultT',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getFriendshipsShowUsingPOSTAsync
     *
     * Get relationship information between two users
     *
     * @param  string $api_key (required)
     * @param  string $source_id (optional, default to 1574242047661207552)
     * @param  string $source_screen_name (optional)
     * @param  string $target_id (optional, default to 1620357967962058752)
     * @param  string $target_screen_name (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getFriendshipsShowUsingPOSTAsync($api_key, $source_id = '1574242047661207552', $source_screen_name = null, $target_id = '1620357967962058752', $target_screen_name = null)
    {
        return $this->getFriendshipsShowUsingPOSTAsyncWithHttpInfo($api_key, $source_id, $source_screen_name, $target_id, $target_screen_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getFriendshipsShowUsingPOSTAsyncWithHttpInfo
     *
     * Get relationship information between two users
     *
     * @param  string $api_key (required)
     * @param  string $source_id (optional, default to 1574242047661207552)
     * @param  string $source_screen_name (optional)
     * @param  string $target_id (optional, default to 1620357967962058752)
     * @param  string $target_screen_name (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getFriendshipsShowUsingPOSTAsyncWithHttpInfo($api_key, $source_id = '1574242047661207552', $source_screen_name = null, $target_id = '1620357967962058752', $target_screen_name = null)
    {
        $returnType = '\Swagger\Client\Model\ResultT';
        $request = $this->getFriendshipsShowUsingPOSTRequest($api_key, $source_id, $source_screen_name, $target_id, $target_screen_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getFriendshipsShowUsingPOST'
     *
     * @param  string $api_key (required)
     * @param  string $source_id (optional, default to 1574242047661207552)
     * @param  string $source_screen_name (optional)
     * @param  string $target_id (optional, default to 1620357967962058752)
     * @param  string $target_screen_name (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getFriendshipsShowUsingPOSTRequest($api_key, $source_id = '1574242047661207552', $source_screen_name = null, $target_id = '1620357967962058752', $target_screen_name = null)
    {
        // verify the required parameter 'api_key' is set
        if ($api_key === null || (is_array($api_key) && count($api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_key when calling getFriendshipsShowUsingPOST'
            );
        }

        $resourcePath = '/base/apitools/friendshipsShow';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($api_key !== null) {
            $queryParams['apiKey'] = ObjectSerializer::toQueryValue($api_key);
        }
        // query params
        if ($source_id !== null) {
            $queryParams['source_id'] = ObjectSerializer::toQueryValue($source_id);
        }
        // query params
        if ($source_screen_name !== null) {
            $queryParams['source_screen_name'] = ObjectSerializer::toQueryValue($source_screen_name);
        }
        // query params
        if ($target_id !== null) {
            $queryParams['target_id'] = ObjectSerializer::toQueryValue($target_id);
        }
        // query params
        if ($target_screen_name !== null) {
            $queryParams['target_screen_name'] = ObjectSerializer::toQueryValue($target_screen_name);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation unfollowUsingGET
     *
     * to unfollow
     *
     * @param  string $api_key api_key (required)
     * @param  string $auth_token auth_token (required)
     * @param  string $ct0 ct0 (required)
     * @param  string $screen_name screen_name (optional)
     * @param  string $user_id user_id (optional, default to 44196397)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ResultT
     */
    public function unfollowUsingGET($api_key, $auth_token, $ct0, $screen_name = null, $user_id = '44196397')
    {
        list($response) = $this->unfollowUsingGETWithHttpInfo($api_key, $auth_token, $ct0, $screen_name, $user_id);
        return $response;
    }

    /**
     * Operation unfollowUsingGETWithHttpInfo
     *
     * to unfollow
     *
     * @param  string $api_key (required)
     * @param  string $auth_token (required)
     * @param  string $ct0 (required)
     * @param  string $screen_name (optional)
     * @param  string $user_id (optional, default to 44196397)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ResultT, HTTP status code, HTTP response headers (array of strings)
     */
    public function unfollowUsingGETWithHttpInfo($api_key, $auth_token, $ct0, $screen_name = null, $user_id = '44196397')
    {
        $returnType = '\Swagger\Client\Model\ResultT';
        $request = $this->unfollowUsingGETRequest($api_key, $auth_token, $ct0, $screen_name, $user_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ResultT',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation unfollowUsingGETAsync
     *
     * to unfollow
     *
     * @param  string $api_key (required)
     * @param  string $auth_token (required)
     * @param  string $ct0 (required)
     * @param  string $screen_name (optional)
     * @param  string $user_id (optional, default to 44196397)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function unfollowUsingGETAsync($api_key, $auth_token, $ct0, $screen_name = null, $user_id = '44196397')
    {
        return $this->unfollowUsingGETAsyncWithHttpInfo($api_key, $auth_token, $ct0, $screen_name, $user_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation unfollowUsingGETAsyncWithHttpInfo
     *
     * to unfollow
     *
     * @param  string $api_key (required)
     * @param  string $auth_token (required)
     * @param  string $ct0 (required)
     * @param  string $screen_name (optional)
     * @param  string $user_id (optional, default to 44196397)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function unfollowUsingGETAsyncWithHttpInfo($api_key, $auth_token, $ct0, $screen_name = null, $user_id = '44196397')
    {
        $returnType = '\Swagger\Client\Model\ResultT';
        $request = $this->unfollowUsingGETRequest($api_key, $auth_token, $ct0, $screen_name, $user_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'unfollowUsingGET'
     *
     * @param  string $api_key (required)
     * @param  string $auth_token (required)
     * @param  string $ct0 (required)
     * @param  string $screen_name (optional)
     * @param  string $user_id (optional, default to 44196397)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function unfollowUsingGETRequest($api_key, $auth_token, $ct0, $screen_name = null, $user_id = '44196397')
    {
        // verify the required parameter 'api_key' is set
        if ($api_key === null || (is_array($api_key) && count($api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_key when calling unfollowUsingGET'
            );
        }
        // verify the required parameter 'auth_token' is set
        if ($auth_token === null || (is_array($auth_token) && count($auth_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $auth_token when calling unfollowUsingGET'
            );
        }
        // verify the required parameter 'ct0' is set
        if ($ct0 === null || (is_array($ct0) && count($ct0) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ct0 when calling unfollowUsingGET'
            );
        }

        $resourcePath = '/base/apitools/unfollow';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($api_key !== null) {
            $queryParams['apiKey'] = ObjectSerializer::toQueryValue($api_key);
        }
        // query params
        if ($auth_token !== null) {
            $queryParams['auth_token'] = ObjectSerializer::toQueryValue($auth_token);
        }
        // query params
        if ($ct0 !== null) {
            $queryParams['ct0'] = ObjectSerializer::toQueryValue($ct0);
        }
        // query params
        if ($screen_name !== null) {
            $queryParams['screenName'] = ObjectSerializer::toQueryValue($screen_name);
        }
        // query params
        if ($user_id !== null) {
            $queryParams['userId'] = ObjectSerializer::toQueryValue($user_id);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation unfollowUsingPOST
     *
     * to unfollow
     *
     * @param  string $api_key api_key (required)
     * @param  string $auth_token auth_token (required)
     * @param  string $ct0 ct0 (required)
     * @param  string $screen_name screen_name (optional)
     * @param  string $user_id user_id (optional, default to 44196397)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ResultT
     */
    public function unfollowUsingPOST($api_key, $auth_token, $ct0, $screen_name = null, $user_id = '44196397')
    {
        list($response) = $this->unfollowUsingPOSTWithHttpInfo($api_key, $auth_token, $ct0, $screen_name, $user_id);
        return $response;
    }

    /**
     * Operation unfollowUsingPOSTWithHttpInfo
     *
     * to unfollow
     *
     * @param  string $api_key (required)
     * @param  string $auth_token (required)
     * @param  string $ct0 (required)
     * @param  string $screen_name (optional)
     * @param  string $user_id (optional, default to 44196397)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ResultT, HTTP status code, HTTP response headers (array of strings)
     */
    public function unfollowUsingPOSTWithHttpInfo($api_key, $auth_token, $ct0, $screen_name = null, $user_id = '44196397')
    {
        $returnType = '\Swagger\Client\Model\ResultT';
        $request = $this->unfollowUsingPOSTRequest($api_key, $auth_token, $ct0, $screen_name, $user_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ResultT',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation unfollowUsingPOSTAsync
     *
     * to unfollow
     *
     * @param  string $api_key (required)
     * @param  string $auth_token (required)
     * @param  string $ct0 (required)
     * @param  string $screen_name (optional)
     * @param  string $user_id (optional, default to 44196397)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function unfollowUsingPOSTAsync($api_key, $auth_token, $ct0, $screen_name = null, $user_id = '44196397')
    {
        return $this->unfollowUsingPOSTAsyncWithHttpInfo($api_key, $auth_token, $ct0, $screen_name, $user_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation unfollowUsingPOSTAsyncWithHttpInfo
     *
     * to unfollow
     *
     * @param  string $api_key (required)
     * @param  string $auth_token (required)
     * @param  string $ct0 (required)
     * @param  string $screen_name (optional)
     * @param  string $user_id (optional, default to 44196397)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function unfollowUsingPOSTAsyncWithHttpInfo($api_key, $auth_token, $ct0, $screen_name = null, $user_id = '44196397')
    {
        $returnType = '\Swagger\Client\Model\ResultT';
        $request = $this->unfollowUsingPOSTRequest($api_key, $auth_token, $ct0, $screen_name, $user_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'unfollowUsingPOST'
     *
     * @param  string $api_key (required)
     * @param  string $auth_token (required)
     * @param  string $ct0 (required)
     * @param  string $screen_name (optional)
     * @param  string $user_id (optional, default to 44196397)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function unfollowUsingPOSTRequest($api_key, $auth_token, $ct0, $screen_name = null, $user_id = '44196397')
    {
        // verify the required parameter 'api_key' is set
        if ($api_key === null || (is_array($api_key) && count($api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_key when calling unfollowUsingPOST'
            );
        }
        // verify the required parameter 'auth_token' is set
        if ($auth_token === null || (is_array($auth_token) && count($auth_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $auth_token when calling unfollowUsingPOST'
            );
        }
        // verify the required parameter 'ct0' is set
        if ($ct0 === null || (is_array($ct0) && count($ct0) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ct0 when calling unfollowUsingPOST'
            );
        }

        $resourcePath = '/base/apitools/unfollow';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($api_key !== null) {
            $queryParams['apiKey'] = ObjectSerializer::toQueryValue($api_key);
        }
        // query params
        if ($auth_token !== null) {
            $queryParams['auth_token'] = ObjectSerializer::toQueryValue($auth_token);
        }
        // query params
        if ($ct0 !== null) {
            $queryParams['ct0'] = ObjectSerializer::toQueryValue($ct0);
        }
        // query params
        if ($screen_name !== null) {
            $queryParams['screenName'] = ObjectSerializer::toQueryValue($screen_name);
        }
        // query params
        if ($user_id !== null) {
            $queryParams['userId'] = ObjectSerializer::toQueryValue($user_id);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
