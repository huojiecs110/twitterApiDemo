
/*
 * Utools_twitter_tools_api
 *
 * X (Twitter) API for search, Tweets, users, followers, images, media and more. Supports some v1.1 and v2 API endpoints, with more to come in the future!
 *
 * API version: 1.1
 * Contact: huojiecs@gmail.com
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package swagger

import (
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
	"github.com/antihax/optional"
)

// Linger please
var (
	_ context.Context
)

type TwitterSearchApiToolsApiService service

/*
TwitterSearchApiToolsApiService Advanced Search
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param apiKey
 * @param words
 * @param optional nil or *TwitterSearchApiToolsApiSearchUsingGETOpts - Optional Parameters:
     * @param "Any" (optional.String) -  Any of these words (Example: cats dogs �� contains either ��cats�� or ��dogs�� (or both))
     * @param "Cursor" (optional.String) -  cursor (Example: AACCgACF91iNpzAJxAKAAMX3WI2nL-x4AgABAAAAA )
     * @param "From" (optional.String) -  From these accounts (Example: @Twitter �� sent from @Twitter)
     * @param "Likes" (optional.String) -  Minimum likes (Example: 280 �� Tweets with at least 280 likes))
     * @param "Mentioning" (optional.String) -  Mentioning these accounts (Example: @SFBART @Caltrain �� mentions @SFBART or mentions @Caltrain)
     * @param "None" (optional.String) -  None of these words (Example: cats dogs �� does not contain ��cats�� and does not contain ��dogs��)
     * @param "Phrase" (optional.String) -  This exact phrase (Example: happy hour �� contains the exact phrase ��happy hour��)
     * @param "Replies" (optional.String) -  Minimum replies (Example: 280 �� Tweets with at least 280 replies)
     * @param "Retweets" (optional.String) -  Minimum retweets (Example: 280 �� Tweets with at least 280 likes)
     * @param "Since" (optional.String) -  start time (Example: 2020-01-01 )
     * @param "Tag" (optional.String) -  These hashtags (Example: #ThrowbackThursday �� contains the hashtag #ThrowbackThursday)
     * @param "To" (optional.String) -  To these accounts (Example: @Twitter �� sent in reply to @Twitter)
     * @param "Until" (optional.String) -  end time (Example: 2021-02-02)

@return ResultT
*/

type TwitterSearchApiToolsApiSearchUsingGETOpts struct { 
	Any optional.String
	Cursor optional.String
	From optional.String
	Likes optional.String
	Mentioning optional.String
	None optional.String
	Phrase optional.String
	Replies optional.String
	Retweets optional.String
	Since optional.String
	Tag optional.String
	To optional.String
	Until optional.String
}

func (a *TwitterSearchApiToolsApiService) SearchUsingGET(ctx context.Context, apiKey string, words string, localVarOptionals *TwitterSearchApiToolsApiSearchUsingGETOpts) (ResultT, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue ResultT
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/base/apitools/search"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.Any.IsSet() {
		localVarQueryParams.Add("any", parameterToString(localVarOptionals.Any.Value(), ""))
	}
	localVarQueryParams.Add("apiKey", parameterToString(apiKey, ""))
	if localVarOptionals != nil && localVarOptionals.Cursor.IsSet() {
		localVarQueryParams.Add("cursor", parameterToString(localVarOptionals.Cursor.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.From.IsSet() {
		localVarQueryParams.Add("from", parameterToString(localVarOptionals.From.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Likes.IsSet() {
		localVarQueryParams.Add("likes", parameterToString(localVarOptionals.Likes.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Mentioning.IsSet() {
		localVarQueryParams.Add("mentioning", parameterToString(localVarOptionals.Mentioning.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.None.IsSet() {
		localVarQueryParams.Add("none", parameterToString(localVarOptionals.None.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Phrase.IsSet() {
		localVarQueryParams.Add("phrase", parameterToString(localVarOptionals.Phrase.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Replies.IsSet() {
		localVarQueryParams.Add("replies", parameterToString(localVarOptionals.Replies.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Retweets.IsSet() {
		localVarQueryParams.Add("retweets", parameterToString(localVarOptionals.Retweets.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Since.IsSet() {
		localVarQueryParams.Add("since", parameterToString(localVarOptionals.Since.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Tag.IsSet() {
		localVarQueryParams.Add("tag", parameterToString(localVarOptionals.Tag.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.To.IsSet() {
		localVarQueryParams.Add("to", parameterToString(localVarOptionals.To.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Until.IsSet() {
		localVarQueryParams.Add("until", parameterToString(localVarOptionals.Until.Value(), ""))
	}
	localVarQueryParams.Add("words", parameterToString(words, ""))
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		if localVarHttpResponse.StatusCode == 200 {
			var v ResultT
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
TwitterSearchApiToolsApiService Advanced Search
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param apiKey
 * @param words
 * @param optional nil or *TwitterSearchApiToolsApiSearchUsingPOSTOpts - Optional Parameters:
     * @param "Any" (optional.String) -  Any of these words (Example: cats dogs �� contains either ��cats�� or ��dogs�� (or both))
     * @param "Cursor" (optional.String) -  cursor (Example: AACCgACF91iNpzAJxAKAAMX3WI2nL-x4AgABAAAAA )
     * @param "From" (optional.String) -  From these accounts (Example: @Twitter �� sent from @Twitter)
     * @param "Likes" (optional.String) -  Minimum likes (Example: 280 �� Tweets with at least 280 likes))
     * @param "Mentioning" (optional.String) -  Mentioning these accounts (Example: @SFBART @Caltrain �� mentions @SFBART or mentions @Caltrain)
     * @param "None" (optional.String) -  None of these words (Example: cats dogs �� does not contain ��cats�� and does not contain ��dogs��)
     * @param "Phrase" (optional.String) -  This exact phrase (Example: happy hour �� contains the exact phrase ��happy hour��)
     * @param "Replies" (optional.String) -  Minimum replies (Example: 280 �� Tweets with at least 280 replies)
     * @param "Retweets" (optional.String) -  Minimum retweets (Example: 280 �� Tweets with at least 280 likes)
     * @param "Since" (optional.String) -  start time (Example: 2020-01-01 )
     * @param "Tag" (optional.String) -  These hashtags (Example: #ThrowbackThursday �� contains the hashtag #ThrowbackThursday)
     * @param "To" (optional.String) -  To these accounts (Example: @Twitter �� sent in reply to @Twitter)
     * @param "Until" (optional.String) -  end time (Example: 2021-02-02)

@return ResultT
*/

type TwitterSearchApiToolsApiSearchUsingPOSTOpts struct { 
	Any optional.String
	Cursor optional.String
	From optional.String
	Likes optional.String
	Mentioning optional.String
	None optional.String
	Phrase optional.String
	Replies optional.String
	Retweets optional.String
	Since optional.String
	Tag optional.String
	To optional.String
	Until optional.String
}

func (a *TwitterSearchApiToolsApiService) SearchUsingPOST(ctx context.Context, apiKey string, words string, localVarOptionals *TwitterSearchApiToolsApiSearchUsingPOSTOpts) (ResultT, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Post")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue ResultT
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/base/apitools/search"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.Any.IsSet() {
		localVarQueryParams.Add("any", parameterToString(localVarOptionals.Any.Value(), ""))
	}
	localVarQueryParams.Add("apiKey", parameterToString(apiKey, ""))
	if localVarOptionals != nil && localVarOptionals.Cursor.IsSet() {
		localVarQueryParams.Add("cursor", parameterToString(localVarOptionals.Cursor.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.From.IsSet() {
		localVarQueryParams.Add("from", parameterToString(localVarOptionals.From.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Likes.IsSet() {
		localVarQueryParams.Add("likes", parameterToString(localVarOptionals.Likes.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Mentioning.IsSet() {
		localVarQueryParams.Add("mentioning", parameterToString(localVarOptionals.Mentioning.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.None.IsSet() {
		localVarQueryParams.Add("none", parameterToString(localVarOptionals.None.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Phrase.IsSet() {
		localVarQueryParams.Add("phrase", parameterToString(localVarOptionals.Phrase.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Replies.IsSet() {
		localVarQueryParams.Add("replies", parameterToString(localVarOptionals.Replies.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Retweets.IsSet() {
		localVarQueryParams.Add("retweets", parameterToString(localVarOptionals.Retweets.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Since.IsSet() {
		localVarQueryParams.Add("since", parameterToString(localVarOptionals.Since.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Tag.IsSet() {
		localVarQueryParams.Add("tag", parameterToString(localVarOptionals.Tag.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.To.IsSet() {
		localVarQueryParams.Add("to", parameterToString(localVarOptionals.To.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Until.IsSet() {
		localVarQueryParams.Add("until", parameterToString(localVarOptionals.Until.Value(), ""))
	}
	localVarQueryParams.Add("words", parameterToString(words, ""))
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		if localVarHttpResponse.StatusCode == 200 {
			var v ResultT
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
TwitterSearchApiToolsApiService trends Search
see details https://developer.twitter.com/en/docs/twitter-api/v1/trends/trends-for-location/api-reference/get-trends-place
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param apiKey
 * @param id

@return ResultT
*/
func (a *TwitterSearchApiToolsApiService) TrendsUsingGET(ctx context.Context, apiKey string, id string) (ResultT, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue ResultT
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/base/apitools/trends"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	localVarQueryParams.Add("apiKey", parameterToString(apiKey, ""))
	localVarQueryParams.Add("id", parameterToString(id, ""))
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		if localVarHttpResponse.StatusCode == 200 {
			var v ResultT
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
TwitterSearchApiToolsApiService trends Search
see details https://developer.twitter.com/en/docs/twitter-api/v1/trends/trends-for-location/api-reference/get-trends-place
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param apiKey
 * @param id

@return ResultT
*/
func (a *TwitterSearchApiToolsApiService) TrendsUsingPOST(ctx context.Context, apiKey string, id string) (ResultT, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Post")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue ResultT
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/base/apitools/trends"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	localVarQueryParams.Add("apiKey", parameterToString(apiKey, ""))
	localVarQueryParams.Add("id", parameterToString(id, ""))
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		if localVarHttpResponse.StatusCode == 200 {
			var v ResultT
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

